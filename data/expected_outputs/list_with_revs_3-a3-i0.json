{
  "original_cost": 92448,
  "final_cost": 60432,
  "compression_ratio": 1.5297855440826051,
  "num_abstractions": 18,
  "original": [
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in let $v4::list(int) = (repeat $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5::list(int) = (concat $v2 $v4) in (cons $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5::list(int) = (concat $v2 $v4) in (cons $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v1 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = 1 in let $v6::list(int) = (repeat $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v1) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = 1 in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::int = (- $v3 $v1) in let $v7::int = (- $v5 $v6) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v4 $v1) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = 1 in let $v8::list(int) = (repeat $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (concat $v2 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v2 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (- $v3 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v7 $v3) in let $v9::int = (+ $v3 $v8) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v7 $v3) in let $v9::int = (+ $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (concat $v4 $v8) in let $v10::list(int) = (cons $v3 $v9) in (cons $v1 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v4 $v8) in let $v10::list(int) = (cons $v3 $v9) in (cons $v1 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = 1 in let $v12::list(int) = (repeat $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::int = (- $v5 $v11) in let $v13::int = (- $v5 $v12) in let $v14::list(int) = (repeat $v9 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::int = (- $v5 $v13) in let $v15::int = (- $v5 $v14) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = Const(int, 1) in let $v14::int = (- $v5 $v13) in let $v15::int = (- $v5 $v14) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $inp0 $v2)",
    "let $v1::int = 0 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 0) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = (range $v1) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 0) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::list(int) = (repeat $v2 $v1) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $inp0 $v2)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (- $v2 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = Const(int, -1) in let $v4::int = (+ $v2 $v3) in let $v5::list(int) = (range $v4) in let $v6::list(int) = (cons $v1 $v5) in (concat $inp0 $v6)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v3 $v4) in let $v6::list(int) = (repeat $v5 $v1) in (concat $inp0 $v6)",
    "let $v1::int = Const(int, 3) in let $v2::int = Const(int, 1) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (- $v1 $v4) in let $v6::list(int) = (repeat $v5 $v2) in (concat $inp0 $v6)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 2) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (range $v1) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v4 $v5) in (concat $inp0 $v6)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, 3) in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v1 $v3) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v4 $v5) in (concat $inp0 $v6)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, -3) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v5 $v3) in (concat $inp0 $v6)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::int = Const(int, -4) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -5) in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v1) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (- $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v2) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "(cdr (cdr $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr $v2)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v4",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v1 $v6) $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v3 $v6) $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v5 = (rev_fix_param (- $v7 $v8) $v8 (lam 1))) in (cdr (concat (repeat $v3 $v8) $v6))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v5 (lam 1))) in let $v7, $v8 = rev($v3 = (rev_fix_param (- $v7 $v8) $v8 (lam 1))) in (cdr (concat (repeat $v6 $v8) $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v6",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v5) in let $v10::int = (+ $v5 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v3 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v4 $v9) in let $v12::int = (- $v4 $v11) in (cons $v12 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in (cons $v12 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v3) in let $v11::int = (- $v3 $v10) in let $v12::int = (+ $v1 $v11) in (cons $v12 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v1 $v11) in (cons $v12 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr (cdr (cdr $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr (cdr $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cdr $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v8",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr (cdr (cdr $v4)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cdr (cdr $v6))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cdr $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in $v10",
    "(empty? $inp0)",
    "(eq? empty $inp0)",
    "(eq? $inp0 empty)",
    "(gt? 1 (length $inp0))",
    "(empty? (range (length $inp0)))",
    "(empty? (concat $inp0 $inp0))",
    "(empty? (concat $inp0 empty))",
    "(empty? (concat empty $inp0))",
    "(eq? (concat $inp0 $inp0) $inp0)",
    "(eq? $inp0 (concat $inp0 $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v1::int = Const(int, 0) in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in let $v4::int = (+ $v1 $v3) in (- $v4 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (+ $v1 $v3) in let $v5::int = 1 in (- $v4 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1::int = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (- $v1 $v2) in (- $v1 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1::int = Const(int, 1) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (+ $v1 $v2) in let $v5::int = 1 in (- $v4 $v5)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (+ $v1 $v1) in let $v4::int = (- $v1 $v3) in (+ $v3 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v1::int = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v2 $v4) in (+ $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in (- $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in (- $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (+ $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (+ $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (- $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v1 $v5) in (+ $v6 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6::int = (- $v3 $v1) in let $v7::int = (- $v5 $v6) in (+ $v3 $v7)",
    "let $v1::int = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6::int = (- $v4 $v2) in let $v7::int = (- $v1 $v6) in (+ $v7 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in (- $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in (- $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (+ $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (+ $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v5 $v3) in (- $v5 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = Const(int, 0) in let $v7::int = (- $v6 $v1) in (- $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6::int = (- $v5 $v1) in let $v7::int = (+ $v3 $v6) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v1 $v4) in let $v7::int = (- $v3 $v6) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v5",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in (- $v7 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in (- $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in (- $v7 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in (- $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in (- $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in (- $v3 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in (+ $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = Const(int, 0) in let $v9::int = (- $v8 $v1) in (+ $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v7",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in (- $v9 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v3 $v7) in (- $v9 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in (- $v9 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in (- $v9 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in (+ $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8, $v9 = rev($v6 = (cons $v8 $v9)) in let $v10::int = (- $v7 $v8) in (- $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v1 $v8) in let $v11::int = (- $v3 $v10) in (+ $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in (- $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v3 $v9) in (+ $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in (- $v11 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v5 $v9) in (- $v11 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v3) in (- $v11 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v5) in (- $v11 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in (- $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in (- $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in (- $v5 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in (+ $v11 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in (+ $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v5) in (+ $v11 $v5)",
    "Const(bool, true)",
    "(is-square 0)",
    "(is-square 1)",
    "(gt? 1 0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (is-square (- $v1 $v1))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (empty? (repeat $v1 (- $v1 $v1)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (is-square $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 0))) in (is-square $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in (is-square $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (gt? $v4 0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cons $v1 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in (concat $v4 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 2) in let $v4::list(int) = (repeat $v1 $v3) in (concat $v4 $v2)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = (cons $v1 $v2) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = (cons $v3 $v4) in let $v6::list(int) = (cons $v1 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (+ $v1 $v3) in let $v5::int = (- $v4 $v1) in let $v6::list(int) = (repeat $v1 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v1 $v6) in (concat $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v3 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = (cons $v1 $v2) in (cons $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in let $v8::int = (- $v7 $v3) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = (cons $v1 $v2) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v1 $v2) in (cons $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in (cons $v10 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in (cons $v10 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in let $v12::int = (- $v1 $v11) in (cons $v12 $inp0)",
    "let $v1::int = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v6 $v8) in let $v11::int = (- $v1 $v10) in let $v12::int = (+ $v11 $v6) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = (cons $v1 $v2) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in let $v13::list(int) = (cons $v1 $v2) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v7) in let $v12::int = (- $v11 $v7) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v5) in let $v12::int = (+ $v5 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v11) in let $v14::int = (+ $v13 $v11) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (concat $v16 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v12) in let $v14::int = (+ $v13 $v12) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (concat $v16 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v7) in let $v12::int = (- $v11 $v7) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15::list(int) = (cons $v1 $v2) in (cons $v14 $v15)",
    "let $v1::int = Const(int, 0) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $v1 $inp0)",
    "let $v1::int = 0 in (cons $v1 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 0 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in (cons $v1 $inp0)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $v2 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1::int = Const(int, 2) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = Const(int, -1) in let $v3::int = 1 in let $v4::int = (- $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v2 $v1) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in (cons $v4 $inp0)",
    "let $v1::int = Const(int, -3) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $v1 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::list(int) = (cons $v2 $v3) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -4) in let $v4::int = (+ $v3 $v1) in let $v5::int = (- $v1 $v4) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 4) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (- $v1 $v2) in let $v5::int = (+ $v4 $v2) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -4) in let $v6::int = (+ $v5 $v3) in let $v7::int = (- $v3 $v6) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -4) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v6 $v3) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 4) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v3 $v6) in (cons $v7 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6::list(int) = (cons $v4 $v5) in let $v7::list(int) = (cons $v2 $v6) in (cons $v1 $v7)",
    "let $v1::int = Const(int, 5) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -4) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = Const(int, -6) in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, -5) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in (cons $v4 $inp0)",
    "(range $inp0)",
    "let $v1::int = Const(int, 0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (- $v1 $v3) in (range $v4)",
    "let $v1::int = (+ $inp0 $inp0) in let $v2::int = (- $inp0 $v1) in let $v3::int = (+ $v1 $v2) in (range $v3)",
    "let $v1::int = (+ $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (+ $v1 $v3) in (range $v4)",
    "let $v1::int = (- $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (- $v1 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $inp0 $inp0) in let $v4::int = (+ $v2 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $inp0 $v2) in let $v4::int = (- $v3 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $v2 $inp0) in let $v4::int = (- $v3 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (- $inp0 $v2) in let $v4::int = (+ $v2 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (- $inp0 $v2) in let $v4::int = (+ $v3 $v2) in (range $v4)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (cdr (concat (repeat $v4 $v4) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in (concat $v4 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = (cons $v3 $v6) in (cons $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (concat $v6 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in let $v7::list(int) = (cons $v1 $v6) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in (concat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in let $v9::list(int) = (cons $v3 $v6) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v3 $v8) in (cons $v6 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v6 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v3 $v8) in (cons $v6 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v10::list(int) = (cons $v1 $v9) in let $v11, $v12 = rev($v4 = (cons $v11 $v12)) in (concat $v10 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v6) in let $v9::list(int) = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (+ $v7 $v9) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v3 $v12) in let $v14::list(int) = (cons $v13 $v8) in let $v15::list(int) = (cons $v10 $v14) in (cons $v1 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v9 $v11) in let $v13::int = (- $v7 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v3 $v14) in let $v16::list(int) = (cons $v15 $v10) in let $v17::list(int) = (cons $v12 $v16) in (cons $v6 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = (- $v5 $v1) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12::int = (- $v3 $v10) in let $v13::int = (- $v8 $v12) in let $v14::int = (- $v10 $v13) in let $v15::int = (- $v3 $v14) in let $v16::list(int) = (cons $v15 $v11) in let $v17::list(int) = (cons $v7 $v16) in (cons $v6 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v1 $v6) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v1 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v1 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = (- $v1 $v3) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::list(int) = (cons $v7 $v10) in let $v12::list(int) = (cons $v5 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v1 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::list(int) = (cons $v9 $v12) in let $v14::list(int) = (cons $v7 $v13) in let $v15::list(int) = (cons $v6 $v14) in (cons $v1 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::list(int) = (cons $v9 $v12) in let $v14::list(int) = (cons $v7 $v13) in let $v15::list(int) = (cons $v3 $v14) in (cons $v6 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14::list(int) = (cons $v10 $v13) in let $v15::list(int) = (cons $v8 $v14) in let $v16::list(int) = (cons $v7 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14::list(int) = (cons $v10 $v13) in let $v15::list(int) = (cons $v8 $v14) in let $v16::list(int) = (cons $v7 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15::list(int) = (cons $v11 $v14) in let $v16::list(int) = (cons $v5 $v15) in let $v17::list(int) = (cons $v10 $v16) in (cons $v1 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (- $v1 $v9) in let $v11::int = (- $v1 $v10) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::list(int) = (cons $v13 $v16) in let $v18::list(int) = (cons $v12 $v17) in let $v19::list(int) = (cons $v3 $v18) in (cons $v1 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::list(int) = (cons $v13 $v16) in let $v18::list(int) = (cons $v7 $v17) in let $v19::list(int) = (cons $v12 $v18) in (cons $v6 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v3 $v12) in let $v14, $v15 = rev($v6 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::list(int) = (cons $v14 $v17) in let $v19::list(int) = (cons $v13 $v18) in let $v20::list(int) = (cons $v10 $v19) in (cons $v1 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v3 $v13) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::list(int) = (cons $v15 $v18) in let $v20::list(int) = (cons $v14 $v19) in let $v21::list(int) = (cons $v3 $v20) in (cons $v6 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in (repeat $v3 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (repeat $v3 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (repeat $v6 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v4) in let $v6::int = (+ $v5 $v4) in (repeat $v3 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (repeat $v6 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v2 = (repeat $v5 $v6)) in let $v7::int = (+ $v3 $v6) in let $v8::int = (- $v7 $v6) in (repeat $v8 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v2 = (repeat $v5 $v6)) in let $v7::int = (- $v1 $v6) in let $v8::int = (+ $v7 $v6) in (repeat $v3 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v2 = (repeat $v7 $v8)) in let $v9::int = (- $v6 $v8) in (repeat $v9 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = (+ $v4 $v5) in let $v8::int = (- $v7 $v4) in (repeat $v8 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v1 $v6) in let $v8::int = (- $v1 $v7) in (repeat $v8 $v1)",
    "(concat $inp0 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in (concat $inp0 $v1)",
    "let $v1::list(int) = (concat $inp0 $inp0) in (concat $v1 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in (concat $v1 $v1)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $inp0 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v2 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $inp0 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v2 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v4 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9::list(int) = (concat $v1 $v8) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v5 $v4) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9::list(int) = (concat $v1 $v8) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = Const(int, -1) in let $v7::int = (* $v5 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v3) in (concat $inp0 $v11)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::int = Const(int, -1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (* $v2 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (- $v2 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v1 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v2 $v1)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v1 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $v1) in (concat $inp0 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $inp0) in let $v3::list(int) = (concat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $inp0 $v2) in (concat $v3 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $v2 $inp0) in (concat $inp0 $v3)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $v2 $inp0) in (concat $v3 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in (repeat $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -1) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v4 $v1) in (repeat $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::int = Const(int, -1) in let $v7::int = (- $v5 $v6) in (repeat $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (cons $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v6 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v5 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v10 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v1 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = (- $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10::int = Const(int, 1) in let $v11::list(int) = (repeat $v8 $v10) in let $v12::list(int) = (cons $v7 $v11) in (cons $v6 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15::int = (- $v11 $v13) in let $v16::int = (+ $v13 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v10 $v18) in let $v20::list(int) = (cons $v5 $v19) in let $v21::list(int) = (cons $v3 $v20) in (cons $v1 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v9) in let $v12::int = (- $v11 $v1) in let $v13::int = (+ $v7 $v12) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (- $v9 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v14 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = (+ $v7 $v10) in let $v12::int = (+ $v11 $v1) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = (- $v7 $v1) in let $v12::int = (+ $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v10 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v3 $v9) in let $v11::int = (+ $v1 $v10) in let $v12::int = (- $v11 $v3) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v1 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v7 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v6 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v3) in let $v10::int = (- $v9 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13::int = (+ $v12 $v1) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::int = (- $v14 $v16) in let $v19::int = (+ $v16 $v18) in let $v20::list(int) = Const(list(int), Any[]) in let $v21::list(int) = (cons $v19 $v20) in let $v22::list(int) = (cons $v13 $v21) in let $v23::list(int) = (cons $v5 $v22) in let $v24::list(int) = (cons $v3 $v23) in (cons $v1 $v24)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v1 $v11) in let $v13::int = (- $v12 $v3) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::int = (- $v14 $v16) in let $v19::int = (+ $v16 $v18) in let $v20::list(int) = Const(list(int), Any[]) in let $v21::list(int) = (cons $v19 $v20) in let $v22::list(int) = (cons $v13 $v21) in let $v23::list(int) = (cons $v5 $v22) in let $v24::list(int) = (cons $v3 $v23) in (cons $v10 $v24)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = Const(int, 0) in let $v7::int = (- $v6 $v3) in let $v8::int = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (- $v15 $v17) in let $v20::int = (+ $v17 $v19) in let $v21::list(int) = Const(list(int), Any[]) in let $v22::list(int) = (cons $v20 $v21) in let $v23::list(int) = (cons $v14 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v3 $v24) in (cons $v8 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (+ $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v1 $v4) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v7 $v4) in let $v9, $v10 = rev($v5 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (- $v15 $v17) in let $v20::int = (+ $v17 $v19) in let $v21::list(int) = Const(list(int), Any[]) in let $v22::list(int) = (cons $v20 $v21) in let $v23::list(int) = (cons $v14 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v4 $v24) in (cons $v8 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in (repeat $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in (cons $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = 1 in (repeat $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (cons $v3 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v8 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, -1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v5 $v8) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v6 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v6 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (cons $v3 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, -1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v3) in let $v12::list(int) = (repeat $v5 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v5 $v10) in (cons $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v5 $v12) in (cons $v8 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v9 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v7 $v13) in let $v15::list(int) = (cons $v5 $v14) in (cons $v12 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v5 $v14) in (concat $v10 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (concat $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (concat $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (cons $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in let $v17::list(int) = (cons $v7 $v16) in let $v18::list(int) = (cons $v5 $v17) in (cons $v3 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 0) in let $v10::int = (- $v9 $v1) in let $v11::int = (- $v7 $v10) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (+ $v17 $v6) in let $v20::int = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23::int = Const(int, 1) in let $v24::list(int) = (repeat $v21 $v23) in let $v25::list(int) = (cons $v20 $v24) in let $v26::list(int) = (cons $v15 $v25) in let $v27::list(int) = (cons $v14 $v26) in (cons $v6 $v27)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 0) in let $v10::int = (- $v9 $v1) in let $v11::int = (- $v7 $v10) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (+ $v6 $v17) in let $v20::int = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23::int = Const(int, 1) in let $v24::list(int) = (repeat $v21 $v23) in let $v25::list(int) = (cons $v20 $v24) in let $v26::list(int) = (cons $v15 $v25) in let $v27::list(int) = (cons $v14 $v26) in (cons $v6 $v27)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in let $v8::int = (- $v7 $v3) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v5 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v7 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v8) in let $v15::int = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18::list(int) = Const(list(int), Any[]) in let $v19::list(int) = (cons $v16 $v18) in let $v20::list(int) = (cons $v15 $v19) in (cons $v8 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v7 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v8) in let $v15::int = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18::list(int) = Const(list(int), Any[]) in let $v19::list(int) = (cons $v16 $v18) in let $v20::list(int) = (cons $v15 $v19) in (cons $v8 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8::int = (- $v3 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13::int = (- $v6 $v11) in let $v14::int = (- $v10 $v13) in let $v15::int = (+ $v14 $v1) in let $v16::int = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v10 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = (+ $v1 $v5) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12::int = (- $v9 $v10) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v14 $v8) in let $v16::int = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v8 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = (+ $v5 $v1) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12::int = (- $v9 $v10) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v14 $v8) in let $v16::int = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v8 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6, $v7 = rev($v4 = (cons $v6 $v7)) in let $v8::int = (- $v5 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13::int = (- $v6 $v11) in let $v14::int = (- $v10 $v13) in let $v15::int = (+ $v14 $v1) in let $v16::int = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v10 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in (repeat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = 1 in (repeat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v1) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v3) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = (- $v3 $v3) in let $v14::list(int) = (range $v13) in let $v15::list(int) = (cons $v12 $v14) in (cons $v7 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v3 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v3 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (+ $v11 $v1) in let $v14::int = (- $v13 $v1) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v13 $v1) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in (cons $v7 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::int = (- $v3 $v15) in let $v17::int = (- $v3 $v16) in let $v18::list(int) = (repeat $v13 $v17) in let $v19::list(int) = (cons $v12 $v18) in (cons $v7 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v3 $v7) in let $v10::int = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in let $v10::int = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v10) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v10 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v3 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (* $v10 $v11) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16::int = (- $v14 $v7) in let $v17::int = (+ $v7 $v16) in let $v18, $v19 = rev($v15 = (cons $v18 $v19)) in let $v20::int = Const(int, 1) in let $v21::list(int) = (repeat $v18 $v20) in let $v22::list(int) = (cons $v17 $v21) in (cons $v13 $v22)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in (repeat $v9 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v3 $v11) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::int = (+ $v3 $v11) in let $v13::int = (- $v12 $v3) in (repeat $v9 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::list(int) = Const(list(int), Any[]) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 2) in let $v12, $v13 = rev($v1 = (rev_fix_param (* $v12 $v13) $v13 (lam Const(int, -1)))) in let $v14::int = (+ $v11 $v13) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v13 $v3) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v1) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in (cons $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v7 $v11) in let $v14::int = (- $v7 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v9 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v7 $v9) in let $v12::int = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v7 $v9) in let $v12::int = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v1 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v3 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam (+ $0 $0)))) in let $v5, $v6 = rev($v1 = (rev_fix_param (+ $v5 $v6) $v5 (lam 1))) in (cdr (concat (repeat $v4 $v5) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam 1))) in (cdr (concat (repeat $v3 $v3) (cons $v6 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v3 $v3) (cons $v5 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v3 $v4) in let $v7::int = (+ $v6 $v4) in (repeat $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v3 $v7) in (cons $v6 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -1) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v6 $v1) in let $v8::list(int) = (repeat $v3 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v3 $v7) in (cons $v6 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, 2) in let $v8::int = (+ $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, -1) in let $v8::int = (- $v1 $v7) in let $v9::int = (- $v8 $v1) in let $v10::list(int) = (repeat $v5 $v9) in (concat $v4 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (cons $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in let $v13::list(int) = (cons $v8 $v12) in let $v14::list(int) = (cons $v3 $v13) in (cons $v1 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v1 $v5) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v8 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v1 $v5) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v8 $v17) in (cons $v10 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)"
  ],
  "rewritten": [
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (fn_5 $v1 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in let $v4::list(int) = (repeat $v1 $v3) in (concat $inp0 $v4)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v5::list(int) = (fn_5 $v1 $v2) in (cons $v1 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5::list(int) = (concat $v2 $v4) in (cons $v1 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v5::int = (fn_2 $v3 $v1) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_5 $v3 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = 1 in let $v6::list(int) = (repeat $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v1 $v1) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in (fn_5 $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in (fn_5 $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = 1 in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v3) in let $v7::int = (fn_10 $v1 $v3 $v5) in let $v8::int = (- $v1 $v7) in (fn_5 $v8 $inp0)",
    "let $v1, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v1)) in let $v3::int = (- $v1 $v1) in let $v7::int = (fn_10 $v1 $v4 $v3) in let $v8::int = (- $v1 $v7) in (fn_5 $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_5 $v5 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $inp0 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = 1 in let $v8::list(int) = (repeat $v5 $v7) in (concat $inp0 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v9::list(int) = (fn_5 $v5 $v2) in (cons $v1 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v2 $v8) in (cons $v1 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_2 $v5 $v3) in (fn_5 $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = Const(int, 1) in let $v9::int = (fn_4 $v3 $v7) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v7 $v3) in let $v9::int = (+ $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v9::list(int) = (fn_5 $v5 $v4) in (fn_0 $v9 $v3 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v4 $v8) in (fn_0 $v9 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_7 $v1 $v7 $v1) in (fn_5 $v10 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_16 $v7 $v1) in (fn_5 $v10 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v1 $v7) in (fn_5 $v10 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in (fn_5 $v10 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_7 $v1 $v7 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_16 $v7 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v1 $v7) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (fn_13 $v11 $v3 $v7) in (concat $inp0 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_7 $v1 $v7 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_16 $v7 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_5 $v9 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in (concat $inp0 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = 1 in let $v12::list(int) = (repeat $v9 $v11) in (concat $inp0 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v3) in (fn_5 $v12 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in (fn_5 $v12 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = Const(int, 1) in let $v13::int = (fn_2 $v11 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (concat $inp0 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v3) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v3) in let $v13::int = Const(int, 1) in let $v15::int = (fn_2 $v13 $v5) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = Const(int, 1) in let $v15::int = (fn_2 $v13 $v5) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $inp0 $v2)",
    "let $v1::int = 0 in (fn_5 $v1 $inp0)",
    "let $v1::int = Const(int, 0) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = (range $v1) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 0) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::list(int) = (repeat $v2 $v1) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in (fn_5 $v3 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in (fn_5 $v1 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $inp0 $v2)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (- $v2 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = Const(int, -1) in let $v4::int = (+ $v2 $v3) in let $v5::list(int) = (range $v4) in let $v6::list(int) = (cons $v1 $v5) in (concat $inp0 $v6)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v3 $v4) in (fn_5 $v5 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = Const(int, 1) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (- $v1 $v4) in (fn_5 $v5 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 2) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in (fn_5 $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (fn_5 $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (fn_5 $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in (fn_5 $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in (fn_5 $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (range $v1) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v4::int = (fn_10 $v1 $v2 $v1) in (fn_5 $v4 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v4::int = (fn_10 $v1 $v2 $v1) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, 3) in let $v4::int = (fn_2 $v2 $v1) in (fn_5 $v4 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, -3) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v5 $v3) in (concat $inp0 $v6)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::int = Const(int, -4) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -5) in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v1) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (- $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v2) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "(cdr $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "(fn_14 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (cdr $v2)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in $v4",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6, $v5 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v1 $v6) $v4))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6, $v5 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v3 $v6) $v4))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v8, $v7 = rev($v5 = (rev_fix_param (- $v7 $v8) $v8 (lam 1))) in (cdr (concat (repeat $v3 $v8) $v6))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6, $v5 = rev($v3 = (rev_fix_param (- $v5 $v6) $v5 (lam 1))) in let $v8, $v7 = rev($v3 = (rev_fix_param (- $v7 $v8) $v8 (lam 1))) in (cdr (concat (repeat $v6 $v8) $v4))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (cdr $v4)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in $v6",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v3) in (cons $v10 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v5) in (cons $v10 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_13 $v8 $v1 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v5 $v7) in (cons $v10 $v8)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4, $v3 = rev($v1 = (rev_fix_param (* $v3 $v4) $v3 (lam Const(int, -1)))) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v4) in (cons $v12 $v10)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4, $v3 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v3) in (cons $v12 $v10)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v3) in let $v11::int = (- $v3 $v10) in let $v12::int = (+ $v1 $v11) in (cons $v12 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v1 $v7) in let $v12::int = (fn_4 $v1 $v10) in (cons $v12 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (cdr (fn_14 $v2))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_14 $v4)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (cdr $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in $v8",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (cdr (fn_14 $v4))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (cdr $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in $v10",
    "(empty? $inp0)",
    "(eq? empty $inp0)",
    "(eq? $inp0 empty)",
    "(gt? 1 (length $inp0))",
    "(empty? (range (length $inp0)))",
    "(empty? (fn_8 $inp0))",
    "(empty? (concat $inp0 empty))",
    "(empty? (concat empty $inp0))",
    "(eq? (fn_8 $inp0) $inp0)",
    "(eq? $inp0 (fn_8 $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v2::int = Const(int, 0) in let $v4, $v3 = rev($inp0 = (cons $v3 $v4)) in (fn_2 $v3 $v2)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (fn_16 $v1 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v5::int = 1 in (fn_7 $v5 $v3 $v1)",
    "let $v1::int = 0 in let $v2::int = Const(int, 0) in let $v4, $v3 = rev($inp0 = (cons $v3 $v4)) in (fn_10 $v3 $v2 $v1)",
    "let $v1::int = 1 in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in (fn_2 $v2 $v1)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v4, $v3 = rev($inp0 = (cons $v3 $v4)) in (fn_10 $v3 $v2 $v1)",
    "let $v1::int = Const(int, 1) in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in let $v5::int = 1 in (fn_7 $v5 $v2 $v1)",
    "let $v2::int = 1 in let $v4, $v3 = rev($inp0 = (cons $v3 $v4)) in (fn_2 $v3 $v2)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (+ $v1 $v1) in (fn_4 $v3 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v1::int = 1 in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v2 $v4) in (+ $v1 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_16 $v1 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_7 $v3 $v1 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_4 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v1 $v3) in (+ $v5 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_2 $v1 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v1 $v5) in (+ $v6 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = Const(int, 0) in let $v7::int = (fn_10 $v1 $v3 $v5) in (+ $v3 $v7)",
    "let $v1::int = Const(int, 0) in let $v2, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v2)) in let $v7::int = (fn_10 $v2 $v4 $v1) in (+ $v7 $v4)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in $v3",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_7 $v1 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_16 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_2 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_4 $v1 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in (+ $v5 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in (fn_2 $v3 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = Const(int, 0) in (fn_10 $v1 $v6 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = Const(int, 0) in let $v6::int = (- $v5 $v1) in let $v7::int = (+ $v3 $v6) in (+ $v1 $v7)",
    "let $v1, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v1)) in let $v3::int = Const(int, 0) in let $v7::int = (fn_10 $v4 $v1 $v3) in (+ $v1 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in $v5",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_7 $v1 $v5 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_7 $v3 $v5 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_16 $v5 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_16 $v5 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_2 $v5 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_2 $v5 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_4 $v1 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v5 $v3) in (+ $v7 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (+ $v5 $v1) in let $v8::int = Const(int, 0) in let $v9::int = (- $v8 $v1) in (+ $v7 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in $v7",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_7 $v1 $v7 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_7 $v3 $v7 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_16 $v7 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_16 $v7 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_4 $v1 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v8, $v9 = rev($v4 = (fn_0 $v9 $v8 $v5)) in let $v7::int = (- $v5 $v3) in (fn_2 $v8 $v7)",
    "let $v1, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v1)) in let $v3::int = Const(int, 0) in let $v6, $v8, $v9 = rev($v5 = (fn_0 $v9 $v8 $v6)) in let $v11::int = (fn_10 $v8 $v1 $v3) in (+ $v1 $v11)",
    "let $v1, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v1)) in let $v3::int = Const(int, 0) in let $v6, $v8, $v9 = rev($v5 = (fn_0 $v9 $v8 $v6)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in (- $v1 $v11)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4, $v3 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (+ $v3 $v9) in (+ $v1 $v11)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_7 $v1 $v9 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_7 $v5 $v9 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_16 $v9 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_16 $v9 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_2 $v9 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_2 $v9 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_2 $v9 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v3) in (+ $v11 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_4 $v3 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v5) in (+ $v11 $v5)",
    "Const(bool, true)",
    "(is-square 0)",
    "(is-square 1)",
    "(gt? 1 0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (is-square (- $v1 $v1))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (empty? (repeat $v1 (- $v1 $v1)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (is-square $v4)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 0))) in (is-square $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in (is-square $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (gt? $v4 0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (cons $v1 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4::list(int) = (fn_1 $v1) in (concat $v4 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 2) in let $v4::list(int) = (repeat $v1 $v3) in (concat $v4 $v2)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (fn_0 $v2 $v1 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_13 $inp0 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v1 $v3) in (cons $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::list(int) = (fn_0 $v4 $v3 $v1) in (cons $v1 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v5::int = (fn_7 $v1 $v3 $v1) in let $v6::list(int) = (repeat $v1 $v5) in (concat $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v1 $v6) in (concat $v7 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (cons $v3 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::list(int) = (fn_1 $v3) in (concat $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v1 $v3 $v1) in (cons $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v3 $v1) in (cons $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in (cons $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in (cons $v6 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_13 $inp0 $v1 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (+ $v1 $v3) in (fn_13 $inp0 $v5 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (+ $v3 $v1) in (fn_13 $inp0 $v5 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (cons $v5 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_0 $v2 $v1 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in (cons $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v3 $v5 $v3) in (cons $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_16 $v5 $v1) in (cons $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_16 $v5 $v3) in (cons $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_2 $v5 $v1) in (cons $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_4 $v3 $v5) in (cons $v8 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in (fn_0 $v2 $v1 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (cons $v7 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_0 $v2 $v1 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v1) in (cons $v10 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_13 $inp0 $v3 $v7)",
    "let $v1, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v1)) in let $v3::int = Const(int, 0) in let $v6, $v8, $v9 = rev($v5 = (fn_0 $v9 $v8 $v6)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in let $v12::int = (- $v1 $v11) in (cons $v12 $inp0)",
    "let $v1::int = Const(int, 0) in let $v2, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v2)) in let $v6, $v8, $v9 = rev($v5 = (fn_0 $v9 $v8 $v6)) in let $v11::int = (fn_10 $v8 $v6 $v1) in let $v12::int = (+ $v11 $v6) in (cons $v12 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v1) in let $v12::list(int) = (fn_1 $v10) in (concat $v12 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v12::list(int) = (fn_1 $v10) in (concat $v12 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (fn_13 $v11 $v3 $v7) in (concat $v12 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_13 $inp0 $v1 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_13 $inp0 $v3 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in (fn_0 $v2 $v1 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in (fn_0 $v2 $v1 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_16 $v9 $v7) in (fn_13 $inp0 $v1 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in let $v14::int = (fn_16 $v12 $v1) in (cons $v14 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_4 $v5 $v9) in let $v14::int = (fn_16 $v12 $v1) in (cons $v14 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12, $v11 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v11) in let $v14::int = (+ $v13 $v11) in let $v16::list(int) = (fn_1 $v14) in (concat $v16 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12, $v11 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v12) in let $v14::int = (+ $v13 $v12) in let $v16::list(int) = (fn_1 $v14) in (concat $v16 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_16 $v9 $v7) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in (fn_0 $v2 $v1 $v14)",
    "let $v1::int = Const(int, 0) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $v1 $inp0)",
    "let $v1::int = 0 in (cons $v1 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 0 in let $v3::list(int) = (fn_1 $v1) in (concat $v3 $inp0)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in (cons $v1 $inp0)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v3::list(int) = (fn_1 $v1) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $v2 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1::int = Const(int, 2) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = Const(int, -1) in let $v3::int = 1 in let $v4::int = (- $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v2 $v1) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v4::int = (fn_10 $v1 $v2 $v1) in (cons $v4 $inp0)",
    "let $v1::int = Const(int, -3) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $v1 $inp0)",
    "let $v1::int = Const(int, 4) in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in (fn_0 $v3 $v2 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -4) in let $v4::int = (+ $v3 $v1) in let $v5::int = (- $v1 $v4) in (cons $v5 $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 4) in let $v5::int = (fn_2 $v3 $v1) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in (fn_13 $inp0 $v2 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = Const(int, -4) in let $v6::int = (+ $v5 $v3) in let $v7::int = (- $v3 $v6) in (cons $v7 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = Const(int, -4) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v6 $v3) in (cons $v7 $inp0)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = Const(int, 4) in let $v7::int = (fn_2 $v5 $v3) in (cons $v7 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v2)) in let $v7::list(int) = (fn_0 $v5 $v4 $v2) in (cons $v1 $v7)",
    "let $v1::int = Const(int, 5) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -4) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = Const(int, -6) in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, -5) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in (cons $v4 $inp0)",
    "(range $inp0)",
    "let $v2::int = Const(int, 0) in let $v4::int = (fn_2 $inp0 $v2) in (range $v4)",
    "let $v1::int = (+ $inp0 $inp0) in let $v3::int = (fn_4 $v1 $inp0) in (range $v3)",
    "let $v1::int = (+ $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (+ $v1 $v3) in (range $v4)",
    "let $v1::int = (- $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v4::int = (fn_10 $inp0 $v2 $v1) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $inp0 $inp0) in let $v4::int = (+ $v2 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v4::int = (fn_16 $inp0 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v4::int = (fn_7 $v2 $inp0 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v4::int = (fn_4 $v2 $inp0) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (- $inp0 $v2) in let $v4::int = (+ $v3 $v2) in (range $v4)",
    "(cdr $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (cdr (concat (repeat $v4 $v4) $v2))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (cons $v1 $v4)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4::list(int) = (fn_1 $v1) in (concat $v4 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in (cons $v6 $v4)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v3 $v1 $v3) in (cons $v6 $v4)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v3 $v1) in (cons $v6 $v4)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_13 $v4 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v1 $v3) in (cons $v6 $v4)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v8::list(int) = (fn_1 $v6) in (concat $v8 $v4)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v3 $v1 $v3) in let $v8::list(int) = (fn_1 $v6) in (concat $v8 $v4)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v3 $v1) in let $v8::list(int) = (fn_1 $v6) in (concat $v8 $v4)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_0 $v6 $v3 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::list(int) = (fn_1 $v3) in let $v9::list(int) = (concat $v6 $v8) in (cons $v1 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v8, $v9 = rev($v2 = (fn_0 $v9 $v8 $v3)) in let $v7::list(int) = (fn_9 $v3 $v1) in (concat $v7 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in (fn_0 $v6 $v3 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (fn_0 $v8 $v3 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v3 $v1) in (fn_0 $v8 $v6 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v1 $v3) in (fn_0 $v8 $v3 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v10, $v11 = rev($v2 = (fn_0 $v11 $v10 $v3)) in let $v6, $v5 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v11, $v12 = rev($v2 = (fn_0 $v12 $v11 $v3)) in let $v6, $v5 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v10::list(int) = (cons $v1 $v9) in (concat $v10 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v10, $v11 = rev($v2 = (fn_0 $v11 $v10 $v3)) in let $v5::int = Const(int, 0) in let $v7, $v6 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v6) in let $v9::list(int) = (repeat $v3 $v8) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v7 $v3) in let $v11::int = (fn_10 $v7 $v3 $v5) in let $v13::int = (fn_10 $v11 $v7 $v3) in let $v15::list(int) = (fn_0 $v8 $v13 $v10) in (cons $v1 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v1 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_10 $v9 $v3 $v7) in let $v14::int = (fn_10 $v12 $v9 $v3) in let $v16::list(int) = (fn_0 $v10 $v14 $v6) in (cons $v1 $v16)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_10 $v9 $v3 $v7) in let $v14::int = (fn_10 $v12 $v9 $v3) in (fn_17 $v1 $v3 (lam (fn_0 $v10 $v14 $0)))",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_10 $v9 $v3 $v7) in let $v14::int = (fn_10 $v12 $v9 $v3) in let $v16::list(int) = (fn_0 $v10 $v14 $v6) in (cons $v1 $v16)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_10 $v9 $v3 $v7) in let $v14::int = (fn_10 $v12 $v9 $v3) in let $v16::list(int) = (fn_0 $v10 $v14 $v6) in (cons $v1 $v16)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_4 $v9 $v3) in let $v13::int = (fn_10 $v9 $v3 $v7) in let $v15::int = (fn_10 $v13 $v9 $v3) in let $v17::list(int) = (fn_0 $v10 $v15 $v12) in (cons $v6 $v17)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v7::int = (fn_7 $v1 $v3 $v1) in let $v8, $v10, $v11 = rev($v4 = (fn_0 $v11 $v10 $v8)) in let $v13::int = (fn_10 $v10 $v3 $v8) in let $v15::int = (fn_10 $v13 $v10 $v3) in let $v17::list(int) = (fn_0 $v11 $v15 $v7) in (cons $v6 $v17)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (+ $v1 $v3) in let $v7::int = (fn_2 $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_10 $v11 $v3 $v9) in let $v16::int = (fn_10 $v14 $v11 $v3) in let $v18::list(int) = (fn_0 $v12 $v16 $v8) in (cons $v1 $v18)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (+ $v1 $v3) in let $v7::int = (fn_2 $v5 $v3) in let $v8::int = (- $v7 $v1) in let $v9, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_10 $v11 $v3 $v9) in let $v16::int = (fn_10 $v14 $v11 $v3) in let $v18::list(int) = (fn_0 $v12 $v16 $v8) in (cons $v1 $v18)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v8::int = (fn_2 $v3 $v1) in let $v9, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_10 $v11 $v3 $v9) in let $v16::int = (fn_10 $v14 $v11 $v3) in let $v18::list(int) = (fn_0 $v12 $v16 $v8) in (cons $v6 $v18)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::list(int) = (fn_0 $v10 $v7 $v5) in (fn_0 $v12 $v3 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_4 $v1 $v3) in let $v9, $v11, $v12 = rev($v8 = (fn_0 $v12 $v11 $v9)) in let $v14::list(int) = (fn_0 $v12 $v9 $v7) in (fn_0 $v14 $v6 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v1 $v3) in let $v9, $v11, $v12 = rev($v8 = (fn_0 $v12 $v11 $v9)) in let $v14::list(int) = (fn_0 $v12 $v9 $v7) in (fn_0 $v14 $v3 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v8, $v9 = rev($v2 = (fn_0 $v9 $v8 $v3)) in let $v6::int = (fn_2 $v1 $v3) in let $v7::int = (fn_4 $v1 $v3) in let $v10, $v12, $v13 = rev($v9 = (fn_0 $v13 $v12 $v10)) in let $v15::list(int) = (fn_0 $v13 $v10 $v8) in (fn_0 $v15 $v7 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v8, $v9 = rev($v2 = (fn_0 $v9 $v8 $v3)) in let $v5::int = (- $v3 $v1) in let $v6::int = (fn_2 $v1 $v3) in let $v7::int = (+ $v6 $v5) in let $v10, $v12, $v13 = rev($v9 = (fn_0 $v13 $v12 $v10)) in let $v15::list(int) = (fn_0 $v13 $v10 $v8) in (fn_0 $v15 $v7 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_10 $v1 $v5 $v3) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v11, $v13, $v14 = rev($v6 = (fn_0 $v14 $v13 $v11)) in let $v16::list(int) = (fn_0 $v14 $v11 $v5) in (fn_0 $v16 $v10 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_10 $v1 $v5 $v3) in let $v9::int = (- $v8 $v1) in let $v11::int = (fn_2 $v9 $v1) in let $v12::int = (- $v3 $v11) in let $v13, $v15, $v16 = rev($v6 = (fn_0 $v16 $v15 $v13)) in let $v18::list(int) = (fn_0 $v16 $v13 $v12) in (fn_0 $v18 $v3 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v1 $v3) in let $v10::int = (fn_10 $v1 $v7 $v3) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v13)) in let $v18::list(int) = (fn_0 $v16 $v13 $v7) in (fn_0 $v18 $v12 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_10 $v1 $v5 $v3) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v12::int = (fn_2 $v9 $v1) in let $v13::int = (- $v3 $v12) in let $v14, $v16, $v17 = rev($v6 = (fn_0 $v17 $v16 $v14)) in let $v19::list(int) = (fn_0 $v17 $v14 $v13) in (fn_0 $v19 $v10 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v1 $v3) in let $v10::int = (fn_10 $v1 $v7 $v3) in let $v11::int = (- $v10 $v1) in let $v13::int = (fn_2 $v11 $v1) in let $v14::int = (- $v3 $v13) in let $v15, $v17, $v18 = rev($v8 = (fn_0 $v18 $v17 $v15)) in let $v20::list(int) = (fn_0 $v18 $v15 $v14) in (fn_0 $v20 $v3 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (repeat $v3 $v4)) in (repeat $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (repeat $v3 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (repeat $v3 $v4)) in let $v6::int = (fn_2 $v3 $v1) in (repeat $v6 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v4) in let $v6::int = (+ $v5 $v4) in (repeat $v3 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in (repeat $v6 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (cons $v3 $v4)) in let $v6, $v5 = rev($v2 = (repeat $v5 $v6)) in let $v8::int = (fn_16 $v3 $v6) in (repeat $v8 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (cons $v3 $v4)) in let $v6, $v5 = rev($v2 = (repeat $v5 $v6)) in let $v7::int = (- $v1 $v6) in let $v8::int = (+ $v7 $v6) in (repeat $v3 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -1) in let $v6::int = (- $v3 $v5) in let $v8, $v7 = rev($v2 = (repeat $v7 $v8)) in let $v9::int = (- $v6 $v8) in (repeat $v9 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (repeat $v3 $v4)) in let $v6, $v5 = rev($v2 = (cons $v5 $v6)) in let $v8::int = (fn_7 $v4 $v5 $v4) in (repeat $v8 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v2 = (repeat $v3 $v4)) in let $v6::int = (fn_2 $v3 $v1) in let $v8::int = (fn_2 $v6 $v1) in (repeat $v8 $v1)",
    "(fn_8 $inp0)",
    "(fn_15 $inp0)",
    "let $v1::list(int) = (fn_8 $inp0) in (concat $v1 $inp0)",
    "(fn_11 $inp0)",
    "let $v2::list(int) = (fn_15 $inp0) in (concat $inp0 $v2)",
    "let $v2::list(int) = (fn_15 $inp0) in (concat $v2 $inp0)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $inp0 $v2)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v2 $inp0)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in let $v5, $v4 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v4 $v5) in let $v9::list(int) = (fn_5 $v6 $v1) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in let $v5, $v4 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v5 $v4) in let $v9::list(int) = (fn_5 $v6 $v1) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v3, $v2 = rev($inp0 = (cons $v2 $v3)) in let $v5, $v4 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = Const(int, -1) in let $v7::int = (* $v5 $v6) in let $v10::list(int) = (fn_5 $v7 $v1) in let $v11::list(int) = (concat $v10 $v3) in (concat $inp0 $v11)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::int = Const(int, -1) in let $v4, $v3 = rev($inp0 = (cons $v3 $v4)) in let $v6, $v5 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (* $v2 $v6) in let $v10::list(int) = (fn_5 $v7 $v1) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::int = Const(int, 0) in let $v4, $v3 = rev($inp0 = (cons $v3 $v4)) in let $v6, $v5 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (- $v2 $v6) in let $v10::list(int) = (fn_5 $v7 $v1) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::list(int) = (fn_15 $inp0) in (concat $v1 $v2)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::list(int) = (fn_15 $inp0) in (concat $v2 $v1)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v1 $v2)",
    "let $v2::list(int) = (fn_11 $inp0) in (concat $inp0 $v2)",
    "let $v3::list(int) = (fn_11 $inp0) in (concat $inp0 $v3)",
    "let $v2::list(int) = (fn_15 $inp0) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v2::list(int) = (fn_15 $inp0) in let $v3::list(int) = (concat $inp0 $v2) in (concat $v3 $inp0)",
    "let $v2::list(int) = (fn_15 $inp0) in let $v3::list(int) = (concat $v2 $inp0) in (concat $inp0 $v3)",
    "let $v2::list(int) = (fn_15 $inp0) in let $v3::list(int) = (concat $v2 $inp0) in (concat $v3 $inp0)",
    "let $v1::list(int) = (fn_8 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (fn_1 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in (cons $v1 $v4)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in (repeat $v1 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -1) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v4 $v1) in (repeat $v1 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in (cons $v1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v3) in let $v6::int = Const(int, -1) in let $v7::int = (- $v5 $v6) in (repeat $v1 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_9 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_3 $v1 $v3)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4::list(int) = (fn_1 $v1) in (fn_5 $v5 $v4)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4::list(int) = (fn_1 $v1) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (fn_5 $v5 $v4)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in (fn_9 $v6 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in (fn_9 $v6 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_12 $v1 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in (fn_3 $v1 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_6 $v1 $v3 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_4 $v3 $v1) in (fn_6 $v6 $v3 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v3 $v1) in (fn_6 $v1 $v6 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v1 $v3) in (fn_6 $v6 $v3 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in let $v11::list(int) = (fn_3 $v3 $v8) in (cons $v1 $v11)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_17 $v1 $v5 (lam (fn_3 $v3 $0)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v11::list(int) = (fn_12 $v1 $v5 $v3) in (cons $v1 $v11)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in (fn_6 $v10 $v3 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v5 $v7) in let $v10::int = (+ $v9 $v7) in let $v13::list(int) = (fn_3 $v3 $v10) in (cons $v1 $v13)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v8, $v9 = rev($v2 = (fn_0 $v9 $v8 $v3)) in let $v6::int = (fn_4 $v3 $v1) in let $v7::int = (fn_2 $v3 $v1) in (fn_6 $v6 $v7 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v1 $v7) in let $v11, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v11)) in let $v16::int = (fn_4 $v13 $v11) in let $v19::list(int) = (fn_3 $v10 $v16) in let $v21::list(int) = (fn_0 $v19 $v5 $v3) in (cons $v1 $v21)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v9)) in let $v11::int = (- $v9 $v9) in let $v12::int = (- $v11 $v1) in let $v13::int = (+ $v7 $v12) in let $v14::int = (+ $v13 $v1) in let $v18::int = (fn_4 $v15 $v9) in let $v21::list(int) = (fn_3 $v14 $v18) in let $v23::list(int) = (fn_0 $v21 $v5 $v3) in (cons $v1 $v23)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v1 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = (+ $v7 $v10) in let $v12::int = (+ $v11 $v1) in let $v13, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v13)) in let $v18::int = (fn_4 $v15 $v13) in let $v21::list(int) = (fn_3 $v12 $v18) in let $v23::list(int) = (fn_0 $v21 $v5 $v3) in (cons $v1 $v23)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v12::int = (fn_4 $v1 $v7) in let $v13, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v13)) in let $v18::int = (fn_4 $v15 $v13) in let $v21::list(int) = (fn_3 $v12 $v18) in let $v23::list(int) = (fn_0 $v21 $v5 $v3) in (fn_13 $v23 $v7 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_10 $v7 $v1 $v3) in let $v12::int = (fn_7 $v3 $v10 $v1) in let $v13, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v13)) in let $v18::int = (fn_4 $v15 $v13) in let $v21::list(int) = (fn_3 $v12 $v18) in let $v23::list(int) = (fn_0 $v21 $v5 $v3) in (cons $v1 $v23)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_4 $v1 $v9) in let $v13, $v15, $v16 = rev($v10 = (fn_0 $v16 $v15 $v13)) in let $v18::int = (fn_4 $v15 $v13) in let $v21::list(int) = (fn_3 $v12 $v18) in let $v23::list(int) = (fn_0 $v21 $v7 $v3) in (cons $v6 $v23)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v1 $v3) in let $v10::int = (- $v9 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13::int = (+ $v12 $v1) in let $v14, $v16, $v17 = rev($v8 = (fn_0 $v17 $v16 $v14)) in let $v19::int = (fn_4 $v16 $v14) in let $v22::list(int) = (fn_3 $v13 $v19) in let $v24::list(int) = (fn_0 $v22 $v5 $v3) in (cons $v1 $v24)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v1 $v7) in let $v11::int = (- $v3 $v9) in let $v13::int = (fn_7 $v3 $v11 $v1) in let $v14, $v16, $v17 = rev($v8 = (fn_0 $v17 $v16 $v14)) in let $v19::int = (fn_4 $v16 $v14) in let $v22::list(int) = (fn_3 $v13 $v19) in let $v24::list(int) = (fn_0 $v22 $v5 $v3) in (fn_13 $v24 $v7 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v1 $v3) in let $v6::int = Const(int, 0) in let $v8::int = (fn_10 $v3 $v6 $v5) in let $v9, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_4 $v1 $v11) in let $v15, $v17, $v18 = rev($v12 = (fn_0 $v18 $v17 $v15)) in let $v20::int = (fn_4 $v17 $v15) in let $v23::list(int) = (fn_3 $v14 $v20) in let $v25::list(int) = (fn_0 $v23 $v9 $v3) in (cons $v8 $v25)",
    "let $v1, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v1)) in let $v6::int = (- $v1 $v4) in let $v7::int = (fn_7 $v6 $v1 $v1) in let $v8::int = (- $v7 $v4) in let $v9, $v11, $v12 = rev($v5 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_4 $v1 $v11) in let $v15, $v17, $v18 = rev($v12 = (fn_0 $v18 $v17 $v15)) in let $v20::int = (fn_4 $v17 $v15) in let $v23::list(int) = (fn_3 $v14 $v20) in let $v25::list(int) = (fn_0 $v23 $v9 $v4) in (cons $v8 $v25)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_1 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::list(int) = Const(list(int), Any[]) in (cons $v3 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = 1 in (repeat $v3 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v1 $v3 $v1) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v3 $v1) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v1 $v3 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v3 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_9 $v5 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in (fn_9 $v8 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_4 $v5 $v3) in (fn_9 $v5 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = Const(int, -1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = Const(int, 1) in let $v9::int = (fn_2 $v7 $v5) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_7 $v1 $v3 $v1) in (fn_9 $v7 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_16 $v3 $v1) in (fn_9 $v7 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in (fn_3 $v3 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_2 $v5 $v1) in let $v10::int = (fn_4 $v1 $v8) in (fn_9 $v10 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_4 $v5 $v3) in let $v9::int = Const(int, -1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v3) in let $v12::list(int) = (repeat $v5 $v11) in (cons $v8 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_6 $v3 $v5 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_4 $v5 $v3) in (fn_6 $v8 $v5 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in (fn_6 $v6 $v7 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in (fn_6 $v6 $v7 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in (fn_6 $v6 $v7 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_4 $v9 $v3) in (fn_6 $v12 $v5 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v5)) in let $v8::int = (fn_4 $v5 $v3) in let $v10::list(int) = (fn_1 $v8) in let $v15::list(int) = (fn_9 $v11 $v5) in (concat $v10 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in let $v8::list(int) = (fn_1 $v6) in let $v9, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v9)) in let $v15::list(int) = (fn_9 $v11 $v9) in (concat $v8 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v8::list(int) = (fn_1 $v6) in let $v9, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v9)) in let $v15::list(int) = (fn_9 $v11 $v9) in (concat $v8 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v7, $v6 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v7) in let $v9, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v9)) in (fn_6 $v8 $v9 $v11)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v1) in let $v17::list(int) = (fn_12 $v1 $v12 $v7) in (fn_0 $v17 $v5 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_16 $v5 $v1) in let $v9, $v11, $v12 = rev($v6 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_2 $v11 $v1) in let $v19::list(int) = (fn_12 $v1 $v14 $v9) in (fn_0 $v19 $v8 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v11, $v12 = rev($v6 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_2 $v11 $v1) in let $v19::list(int) = (fn_12 $v1 $v14 $v9) in (fn_0 $v19 $v8 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_4 $v3 $v5) in let $v9, $v11, $v12 = rev($v6 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_2 $v11 $v1) in let $v19::list(int) = (fn_12 $v1 $v14 $v9) in (fn_0 $v19 $v8 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v1 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v6 $v15) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v1 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v15 $v6) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v6 $v15) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v15 $v6) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v6 $v15) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v15 $v6) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v6 $v15) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v1 $v9) in let $v14::int = (fn_7 $v1 $v7 $v12) in let $v15, $v19, $v20 = rev($v10 = (fn_0 $v20 $v19 $v15)) in let $v18::int = (fn_7 $v3 $v15 $v6) in let $v24::list(int) = (fn_6 $v9 $v18 $v19) in (fn_0 $v24 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in let $v7, $v15, $v16 = rev($v4 = (fn_0 $v16 $v15 $v7)) in let $v9::int = Const(int, 0) in let $v11::int = (fn_10 $v1 $v9 $v7) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v17, $v21, $v22 = rev($v16 = (fn_0 $v22 $v21 $v17)) in let $v20::int = (fn_7 $v3 $v6 $v17) in let $v26::list(int) = (fn_6 $v15 $v20 $v21) in (fn_0 $v26 $v14 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v3 $v1) in let $v7, $v15, $v16 = rev($v4 = (fn_0 $v16 $v15 $v7)) in let $v9::int = Const(int, 0) in let $v11::int = (fn_10 $v1 $v9 $v7) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v17, $v21, $v22 = rev($v16 = (fn_0 $v22 $v21 $v17)) in let $v20::int = (fn_7 $v3 $v17 $v6) in let $v26::list(int) = (fn_6 $v15 $v20 $v21) in (fn_0 $v26 $v14 $v6)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v5 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in (fn_1 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v3 $v5 $v3) in (fn_1 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_16 $v5 $v1) in (fn_1 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_2 $v5 $v1) in (fn_1 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_4 $v1 $v5) in (fn_1 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in (fn_1 $v8)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_16 $v5 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v9::list(int) = Const(list(int), Any[]) in (fn_13 $v9 $v1 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_9 $v7 $v5)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_7 $v1 $v5 $v1) in (fn_9 $v9 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_16 $v5 $v1) in (fn_9 $v9 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_16 $v5 $v3) in (fn_9 $v9 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_2 $v5 $v1) in (fn_9 $v9 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_4 $v1 $v5) in (fn_9 $v9 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_4 $v3 $v5) in (fn_3 $v8 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_7 $v1 $v5 $v1) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_16 $v5 $v1) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_16 $v5 $v3) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in let $v9, $v15, $v16 = rev($v6 = (fn_0 $v16 $v15 $v9)) in let $v12::int = (fn_10 $v9 $v5 $v8) in let $v14::int = (fn_16 $v12 $v1) in let $v19::list(int) = (fn_3 $v14 $v15) in (cons $v8 $v19)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_16 $v5 $v1) in let $v9, $v15, $v16 = rev($v6 = (fn_0 $v16 $v15 $v9)) in let $v12::int = (fn_10 $v9 $v5 $v8) in let $v14::int = (fn_16 $v12 $v1) in let $v19::list(int) = (fn_3 $v14 $v15) in (cons $v8 $v19)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v15, $v16 = rev($v6 = (fn_0 $v16 $v15 $v9)) in let $v12::int = (fn_10 $v9 $v5 $v8) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v19::list(int) = (fn_3 $v14 $v15) in (cons $v8 $v19)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v7 $v3) in let $v9, $v15, $v16 = rev($v6 = (fn_0 $v16 $v15 $v9)) in let $v12::int = (fn_10 $v9 $v5 $v8) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v19::list(int) = (fn_3 $v14 $v15) in (cons $v8 $v19)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_7 $v1 $v5 $v1) in let $v9, $v16, $v17 = rev($v6 = (fn_0 $v17 $v16 $v9)) in let $v11::int = (fn_7 $v9 $v5 $v1) in let $v13::int = (fn_2 $v11 $v1) in let $v15::int = (fn_10 $v8 $v13 $v1) in let $v20::list(int) = (fn_3 $v15 $v16) in (cons $v8 $v20)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_16 $v5 $v1) in let $v9, $v16, $v17 = rev($v6 = (fn_0 $v17 $v16 $v9)) in let $v11::int = (fn_7 $v9 $v1 $v5) in let $v13::int = (fn_2 $v11 $v1) in let $v15::int = (fn_10 $v8 $v13 $v1) in let $v20::list(int) = (fn_3 $v15 $v16) in (cons $v8 $v20)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v6, $v7 = rev($v2 = (fn_0 $v7 $v6 $v4)) in let $v8::int = (- $v3 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v17, $v18 = rev($v7 = (fn_0 $v18 $v17 $v11)) in let $v14::int = (fn_10 $v11 $v6 $v10) in let $v16::int = (fn_16 $v14 $v1) in let $v21::list(int) = (fn_3 $v16 $v17) in (cons $v10 $v21)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v10, $v17, $v18 = rev($v6 = (fn_0 $v18 $v17 $v10)) in let $v12::int = (fn_7 $v10 $v5 $v1) in let $v14::int = (fn_2 $v12 $v1) in let $v16::int = (fn_10 $v8 $v14 $v1) in let $v21::list(int) = (fn_3 $v16 $v17) in (cons $v8 $v21)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v10, $v17, $v18 = rev($v6 = (fn_0 $v18 $v17 $v10)) in let $v12::int = (fn_7 $v10 $v1 $v5) in let $v14::int = (fn_2 $v12 $v1) in let $v16::int = (fn_10 $v8 $v14 $v1) in let $v21::list(int) = (fn_3 $v16 $v17) in (cons $v8 $v21)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v6, $v7 = rev($v2 = (fn_0 $v7 $v6 $v3)) in let $v5::int = (- $v3 $v3) in let $v8::int = (- $v5 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v17, $v18 = rev($v7 = (fn_0 $v18 $v17 $v11)) in let $v14::int = (fn_10 $v11 $v6 $v10) in let $v16::int = (fn_16 $v14 $v1) in let $v21::list(int) = (fn_3 $v16 $v17) in (cons $v10 $v21)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in (fn_1 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v7 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = 1 in (repeat $v7 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v1 $v1) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v3 $v3) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v1) in (fn_1 $v10)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v3) in (fn_1 $v10)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v1 $v7) in (fn_1 $v10)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v1) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_4 $v1 $v7) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v3) in (fn_9 $v12 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_16 $v9 $v1) in (fn_3 $v7 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_12 $v3 $v9 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in (fn_3 $v7 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v3) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (cons $v7 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v3) in let $v13::int = (- $v3 $v3) in let $v14::list(int) = (range $v13) in (fn_0 $v14 $v12 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v11, $v12 = rev($v6 = (fn_0 $v12 $v11 $v7)) in let $v10::int = (fn_4 $v1 $v7) in let $v14::int = (fn_2 $v11 $v3) in (fn_9 $v14 $v10)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v11, $v12 = rev($v6 = (fn_0 $v12 $v11 $v7)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v14::int = (fn_2 $v11 $v3) in (fn_9 $v14 $v10)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v11, $v12 = rev($v6 = (fn_0 $v12 $v11 $v7)) in let $v10::int = (fn_2 $v7 $v3) in let $v14::int = (fn_16 $v11 $v1) in (fn_3 $v10 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v11, $v12 = rev($v6 = (fn_0 $v12 $v11 $v7)) in let $v10::int = (fn_2 $v7 $v3) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v13 $v1) in (fn_3 $v10 $v14)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_4 $v7 $v9) in (fn_6 $v7 $v12 $v13)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_4 $v7 $v9) in let $v15::int = Const(int, 1) in let $v17::int = (fn_2 $v15 $v3) in let $v18::list(int) = (repeat $v13 $v17) in (fn_0 $v18 $v12 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_7 $v3 $v7 $v3) in let $v11, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v11)) in let $v14::int = (fn_4 $v7 $v11) in (fn_6 $v10 $v14 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_16 $v7 $v3) in let $v11, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v11)) in let $v14::int = (fn_4 $v7 $v11) in (fn_6 $v10 $v14 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v3) in let $v11, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v11)) in let $v14::int = (fn_4 $v7 $v11) in (fn_6 $v10 $v14 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v5) in let $v11, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v11)) in let $v13::int = (- $v11 $v10) in let $v14::int = (+ $v7 $v13) in (fn_6 $v10 $v14 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v5) in let $v11, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v11)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v10 $v13) in (fn_6 $v10 $v14 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v10::int = (fn_2 $v7 $v5) in let $v11, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v11)) in let $v14::int = (fn_4 $v7 $v11) in (fn_6 $v10 $v14 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v11, $v15, $v16 = rev($v8 = (fn_0 $v16 $v15 $v11)) in let $v14::int = (fn_4 $v7 $v11) in (fn_6 $v10 $v14 $v15)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9::int = (+ $v7 $v3) in let $v10::int = (- $v3 $v9) in let $v12, $v11 = rev($v3 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (* $v10 $v11) in let $v14, $v18, $v19 = rev($v8 = (fn_0 $v19 $v18 $v14)) in let $v17::int = (fn_4 $v7 $v14) in (fn_6 $v13 $v17 $v18)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in (fn_1 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v1) in (fn_1 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in (fn_1 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_4 $v3 $v9) in (fn_1 $v12)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = Const(int, 1) in let $v13::int = (fn_7 $v3 $v11 $v3) in (repeat $v9 $v13)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12::int = (fn_2 $v9 $v1) in let $v13::list(int) = Const(list(int), Any[]) in (cons $v12 $v13)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v13::list(int) = Const(list(int), Any[]) in (fn_13 $v13 $v1 $v9)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v11::int = Const(int, 2) in let $v13, $v12 = rev($v1 = (rev_fix_param (* $v12 $v13) $v13 (lam Const(int, -1)))) in let $v14::int = (+ $v11 $v13) in (repeat $v9 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12, $v11 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v13 $v3) in (repeat $v9 $v14)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7, $v9, $v10 = rev($v6 = (fn_0 $v10 $v9 $v7)) in let $v12, $v11 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v1) in (repeat $v9 $v14)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v11, $v12 = rev($v8 = (fn_0 $v12 $v11 $v9)) in (fn_9 $v11 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v11, $v12 = rev($v8 = (fn_0 $v12 $v11 $v9)) in let $v14::int = (fn_2 $v11 $v7) in (fn_9 $v14 $v9)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_7 $v1 $v9 $v1) in (fn_9 $v13 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_7 $v7 $v9 $v7) in (fn_9 $v13 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_16 $v9 $v1) in (fn_9 $v13 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_2 $v9 $v3) in (fn_9 $v13 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_7 $v1 $v9 $v1) in let $v16::int = (fn_2 $v13 $v7) in (fn_9 $v16 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_7 $v7 $v9 $v7) in let $v16::int = (fn_2 $v13 $v7) in (fn_9 $v16 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_16 $v9 $v1) in let $v16::int = (fn_2 $v13 $v7) in (fn_9 $v16 $v12)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v7, $v8 = rev($v4 = (fn_0 $v8 $v7 $v5)) in let $v9, $v13, $v14 = rev($v8 = (fn_0 $v14 $v13 $v9)) in let $v12::int = (fn_2 $v9 $v3) in let $v16::int = (fn_2 $v13 $v7) in (fn_9 $v16 $v12)",
    "(cdr $inp0)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v1 $v2)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v3 $v2)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam (+ $0 $0)))) in let $v6, $v5 = rev($v1 = (rev_fix_param (+ $v5 $v6) $v5 (lam 1))) in (cdr (concat (repeat $v4 $v5) $v2))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam 1))) in (cdr (concat (repeat $v3 $v3) (cons $v6 $v2)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v4, $v3 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in let $v6, $v5 = rev($v1 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v3 $v3) (cons $v5 $v2)))",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in (fn_1 $v1)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v3 $v1 $v3) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v3 $v1) in (fn_1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v1 $v3) in (fn_1 $v6)",
    "let $v1, $v4, $v5 = rev($inp0 = (fn_0 $v5 $v4 $v1)) in let $v3::int = Const(int, 1) in let $v6::int = (- $v3 $v4) in let $v7::int = (+ $v6 $v4) in (repeat $v1 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v3 $v1 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_9 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in (fn_3 $v1 $v3)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4::list(int) = (fn_1 $v1) in (fn_5 $v5 $v4)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4::list(int) = (fn_1 $v1) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v1 $v3) in (fn_9 $v3 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = Const(int, -1) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v6 $v1) in let $v8::list(int) = (repeat $v3 $v7) in (cons $v1 $v8)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v1 $v3) in (fn_3 $v1 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_2 $v1 $v3) in (fn_3 $v6 $v3)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6, $v5 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, 2) in let $v8::int = (+ $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v5, $v6 = rev($inp0 = (fn_0 $v6 $v5 $v1)) in let $v4::list(int) = (fn_1 $v1) in let $v7::int = Const(int, -1) in let $v8::int = (- $v1 $v7) in let $v9::int = (- $v8 $v1) in let $v10::list(int) = (repeat $v5 $v9) in (concat $v4 $v10)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in (fn_6 $v1 $v3 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_4 $v5 $v1) in (fn_6 $v8 $v3 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in (fn_6 $v8 $v3 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_2 $v1 $v5) in (fn_6 $v8 $v3 $v5)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_16 $v1 $v3) in (fn_6 $v6 $v3 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_7 $v3 $v1 $v3) in (fn_6 $v6 $v3 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_4 $v3 $v1) in (fn_6 $v6 $v3 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (fn_6 $v6 $v3 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v7, $v8 = rev($v2 = (fn_0 $v8 $v7 $v3)) in let $v6::int = (fn_2 $v1 $v3) in (fn_6 $v6 $v3 $v7)",
    "let $v2, $v1 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v5, $v6 = rev($v2 = (fn_0 $v6 $v5 $v3)) in let $v8::int = (fn_4 $v1 $v5) in let $v11::list(int) = (fn_3 $v3 $v8) in (cons $v1 $v11)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v9, $v10 = rev($v4 = (fn_0 $v10 $v9 $v5)) in let $v8::int = (fn_2 $v5 $v1) in let $v13::list(int) = (fn_3 $v8 $v9) in (fn_0 $v13 $v3 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v5)) in let $v8::int = (fn_2 $v3 $v5) in let $v10::int = (fn_2 $v5 $v1) in let $v15::list(int) = (fn_3 $v10 $v11) in (fn_0 $v15 $v8 $v1)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v7, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v7)) in let $v10::int = (fn_2 $v7 $v1) in let $v15::list(int) = (fn_3 $v10 $v11) in (fn_0 $v15 $v3 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_7 $v3 $v1 $v3) in let $v7, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v7)) in let $v10::int = (fn_2 $v7 $v1) in let $v15::list(int) = (fn_3 $v10 $v11) in (fn_0 $v15 $v3 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v3 $v1) in let $v7, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v7)) in let $v10::int = (fn_2 $v7 $v1) in let $v15::list(int) = (fn_3 $v10 $v11) in (fn_0 $v15 $v3 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v11, $v12 = rev($v4 = (fn_0 $v12 $v11 $v7)) in let $v10::int = (fn_2 $v7 $v1) in let $v15::list(int) = (fn_3 $v10 $v11) in (fn_0 $v15 $v3 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5, $v13, $v14 = rev($v4 = (fn_0 $v14 $v13 $v5)) in let $v8::int = (fn_2 $v3 $v5) in let $v10::int = (fn_10 $v1 $v8 $v3) in let $v12::int = (fn_2 $v5 $v1) in let $v17::list(int) = (fn_3 $v12 $v13) in (fn_0 $v17 $v8 $v10)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_16 $v1 $v3) in let $v7, $v13, $v14 = rev($v4 = (fn_0 $v14 $v13 $v7)) in let $v10::int = (fn_2 $v3 $v7) in let $v12::int = (fn_2 $v7 $v1) in let $v17::list(int) = (fn_3 $v12 $v13) in (fn_0 $v17 $v10 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v6::int = (fn_4 $v3 $v1) in let $v7, $v13, $v14 = rev($v4 = (fn_0 $v14 $v13 $v7)) in let $v10::int = (fn_2 $v3 $v7) in let $v12::int = (fn_2 $v7 $v1) in let $v17::list(int) = (fn_3 $v12 $v13) in (fn_0 $v17 $v10 $v6)",
    "let $v1, $v3, $v4 = rev($inp0 = (fn_0 $v4 $v3 $v1)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v13, $v14 = rev($v4 = (fn_0 $v14 $v13 $v7)) in let $v10::int = (fn_2 $v3 $v7) in let $v12::int = (fn_2 $v7 $v1) in let $v17::list(int) = (fn_3 $v12 $v13) in (fn_0 $v17 $v10 $v6)"
  ],
  "rewritten_dreamcoder": null,
  "abstractions": [
    {
      "body": "(cons #2 (cons #1 #0))",
      "dreamcoder": "#(lambda (lambda (lambda (cons $0 (cons $1 $2)))))",
      "arity": 3,
      "name": "fn_0",
      "utility": 16360,
      "final_cost": 75884,
      "compression_ratio": 1.2182805334457856,
      "cumulative_compression_ratio": 1.2182805334457856,
      "num_uses": 1304,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_0 $v9 $v3 $v1": "(cons $v1 $v10)"
        },
        {
          "fn_0 $v9 $v3 $v1": "(cons $v1 $v10)"
        },
        {
          "fn_0 $v10 $v3 $v1": "(cons $v1 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v1": "(cons $v1 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v1": "(cons $v1 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v1": "(cons $v1 $v11)"
        },
        {
          "fn_0 $v10 $v6 $v1": "(cons $v1 $v11)"
        },
        {
          "fn_0 $v12 $v3 $v1": "(cons $v1 $v13)"
        },
        {
          "fn_0 $v12 $v3 $v1": "(cons $v1 $v13)"
        },
        {
          "fn_0 $v13 $v3 $v1": "(cons $v1 $v14)"
        },
        {
          "fn_0 $v14 $v10 $v1": "(cons $v1 $v15)"
        },
        {
          "fn_0 $v14 $v6 $v1": "(cons $v1 $v15)"
        },
        {
          "fn_0 $v15 $v6 $v1": "(cons $v1 $v16)"
        },
        {
          "fn_0 $v15 $v6 $v1": "(cons $v1 $v16)"
        },
        {
          "fn_0 $v15 $v6 $v1": "(cons $v1 $v16)"
        },
        {
          "fn_0 $v15 $v6 $v1": "(cons $v1 $v16)"
        },
        {
          "fn_0 $v15 $v8 $v1": "(cons $v1 $v16)"
        },
        {
          "fn_0 $v16 $v10 $v1": "(cons $v1 $v17)"
        },
        {
          "fn_0 $v17 $v8 $v1": "(cons $v1 $v18)"
        },
        {
          "fn_0 $v17 $v8 $v1": "(cons $v1 $v18)"
        },
        {
          "fn_0 $v18 $v3 $v1": "(cons $v1 $v19)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v5 $v4 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v5 $v4 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v5 $v4 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v5 $v4 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v6 $v5 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v6 $v5 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v6 $v5 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v6 $v5 $v1": "(cons $v1 $v2)"
        },
        {
          "fn_0 $v19 $v10 $v1": "(cons $v1 $v20)"
        },
        {
          "fn_0 $v20 $v3 $v1": "(cons $v1 $v21)"
        },
        {
          "fn_0 $v22 $v3 $v1": "(cons $v1 $v23)"
        },
        {
          "fn_0 $v22 $v3 $v1": "(cons $v1 $v23)"
        },
        {
          "fn_0 $v22 $v3 $v1": "(cons $v1 $v23)"
        },
        {
          "fn_0 $v23 $v3 $v1": "(cons $v1 $v24)"
        },
        {
          "fn_0 $v2 $v1 $v1": "(cons $v1 $v3)"
        },
        {
          "fn_0 $v3 $v2 $v1": "(cons $v1 $v4)"
        },
        {
          "fn_0 $v4 $v3 $v1": "(cons $v1 $v5)"
        },
        {
          "fn_0 $v5 $v1 $v1": "(cons $v1 $v6)"
        },
        {
          "fn_0 $v5 $v3 $v1": "(cons $v1 $v6)"
        },
        {
          "fn_0 $v6 $v2 $v1": "(cons $v1 $v7)"
        },
        {
          "fn_0 $v6 $v3 $v1": "(cons $v1 $v7)"
        },
        {
          "fn_0 $v7 $v6 $v1": "(cons $v1 $v8)"
        },
        {
          "fn_0 $v7 $v6 $v1": "(cons $v1 $v8)"
        },
        {
          "fn_0 $v7 $v6 $v1": "(cons $v1 $v8)"
        },
        {
          "fn_0 $v8 $v3 $v1": "(cons $v1 $v9)"
        },
        {
          "fn_0 $v8 $v6 $v1": "(cons $v1 $v9)"
        },
        {
          "fn_0 $v13 $v12 $v10": "(cons $v10 $v11)"
        },
        {
          "fn_0 $v18 $v17 $v10": "(cons $v10 $v11)"
        },
        {
          "fn_0 $v12 $v3 $v10": "(cons $v10 $v13)"
        },
        {
          "fn_0 $v13 $v11 $v10": "(cons $v10 $v14)"
        },
        {
          "fn_0 $v13 $v11 $v10": "(cons $v10 $v14)"
        },
        {
          "fn_0 $v8 $v13 $v10": "(cons $v10 $v14)"
        },
        {
          "fn_0 $v15 $v14 $v10": "(cons $v10 $v16)"
        },
        {
          "fn_0 $v15 $v14 $v10": "(cons $v10 $v16)"
        },
        {
          "fn_0 $v15 $v5 $v10": "(cons $v10 $v16)"
        },
        {
          "fn_0 $v16 $v12 $v10": "(cons $v10 $v17)"
        },
        {
          "fn_0 $v17 $v16 $v10": "(cons $v10 $v18)"
        },
        {
          "fn_0 $v17 $v8 $v10": "(cons $v10 $v18)"
        },
        {
          "fn_0 $v18 $v13 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v10": "(cons $v10 $v19)"
        },
        {
          "fn_0 $v20 $v16 $v10": "(cons $v10 $v21)"
        },
        {
          "fn_0 $v20 $v16 $v10": "(cons $v10 $v21)"
        },
        {
          "fn_0 $v22 $v3 $v10": "(cons $v10 $v23)"
        },
        {
          "fn_0 $v23 $v3 $v10": "(cons $v10 $v24)"
        },
        {
          "fn_0 $v14 $v13 $v11": "(cons $v11 $v12)"
        },
        {
          "fn_0 $v16 $v15 $v11": "(cons $v11 $v12)"
        },
        {
          "fn_0 $v16 $v15 $v11": "(cons $v11 $v12)"
        },
        {
          "fn_0 $v18 $v17 $v11": "(cons $v11 $v12)"
        },
        {
          "fn_0 $v2 $v1 $v12": "(cons $v12 $v13)"
        },
        {
          "fn_0 $v2 $v1 $v12": "(cons $v12 $v13)"
        },
        {
          "fn_0 $v14 $v5 $v12": "(cons $v12 $v15)"
        },
        {
          "fn_0 $v10 $v15 $v12": "(cons $v12 $v16)"
        },
        {
          "fn_0 $v15 $v13 $v12": "(cons $v12 $v16)"
        },
        {
          "fn_0 $v15 $v13 $v12": "(cons $v12 $v16)"
        },
        {
          "fn_0 $v16 $v13 $v12": "(cons $v12 $v17)"
        },
        {
          "fn_0 $v17 $v7 $v12": "(cons $v12 $v18)"
        },
        {
          "fn_0 $v19 $v18 $v12": "(cons $v12 $v20)"
        },
        {
          "fn_0 $v19 $v18 $v12": "(cons $v12 $v20)"
        },
        {
          "fn_0 $v19 $v18 $v12": "(cons $v12 $v20)"
        },
        {
          "fn_0 $v19 $v18 $v12": "(cons $v12 $v20)"
        },
        {
          "fn_0 $v16 $v15 $v13": "(cons $v13 $v14)"
        },
        {
          "fn_0 $v17 $v14 $v13": "(cons $v13 $v18)"
        },
        {
          "fn_0 $v20 $v19 $v13": "(cons $v13 $v21)"
        },
        {
          "fn_0 $v20 $v19 $v13": "(cons $v13 $v21)"
        },
        {
          "fn_0 $v21 $v17 $v13": "(cons $v13 $v22)"
        },
        {
          "fn_0 $v17 $v16 $v14": "(cons $v14 $v15)"
        },
        {
          "fn_0 $v19 $v18 $v14": "(cons $v14 $v15)"
        },
        {
          "fn_0 $v2 $v1 $v14": "(cons $v14 $v15)"
        },
        {
          "fn_0 $v17 $v15 $v14": "(cons $v14 $v18)"
        },
        {
          "fn_0 $v17 $v15 $v14": "(cons $v14 $v18)"
        },
        {
          "fn_0 $v17 $v15 $v14": "(cons $v14 $v18)"
        },
        {
          "fn_0 $v17 $v15 $v14": "(cons $v14 $v18)"
        },
        {
          "fn_0 $v18 $v15 $v14": "(cons $v14 $v19)"
        },
        {
          "fn_0 $v19 $v18 $v14": "(cons $v14 $v20)"
        },
        {
          "fn_0 $v21 $v20 $v14": "(cons $v14 $v22)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v23 $v9 $v14": "(cons $v14 $v24)"
        },
        {
          "fn_0 $v25 $v15 $v14": "(cons $v14 $v26)"
        },
        {
          "fn_0 $v25 $v15 $v14": "(cons $v14 $v26)"
        },
        {
          "fn_0 $v18 $v17 $v15": "(cons $v15 $v16)"
        },
        {
          "fn_0 $v18 $v17 $v15": "(cons $v15 $v16)"
        },
        {
          "fn_0 $v20 $v19 $v15": "(cons $v15 $v16)"
        },
        {
          "fn_0 $v18 $v16 $v15": "(cons $v15 $v19)"
        },
        {
          "fn_0 $v18 $v16 $v15": "(cons $v15 $v19)"
        },
        {
          "fn_0 $v24 $v20 $v15": "(cons $v15 $v25)"
        },
        {
          "fn_0 $v24 $v20 $v15": "(cons $v15 $v25)"
        },
        {
          "fn_0 $v19 $v17 $v16": "(cons $v16 $v20)"
        },
        {
          "fn_0 $v19 $v17 $v16": "(cons $v16 $v20)"
        },
        {
          "fn_0 $v19 $v17 $v16": "(cons $v16 $v20)"
        },
        {
          "fn_0 $v19 $v17 $v16": "(cons $v16 $v20)"
        },
        {
          "fn_0 $v22 $v21 $v17": "(cons $v17 $v18)"
        },
        {
          "fn_0 $v5 $v4 $v2": "(cons $v2 $v3)"
        },
        {
          "fn_0 $v5 $v4 $v2": "(cons $v2 $v3)"
        },
        {
          "fn_0 $v5 $v4 $v2": "(cons $v2 $v6)"
        },
        {
          "fn_0 $v9 $v8 $v3": "(cons $v3 $v10)"
        },
        {
          "fn_0 $v9 $v8 $v3": "(cons $v3 $v10)"
        },
        {
          "fn_0 $v9 $v8 $v3": "(cons $v3 $v10)"
        },
        {
          "fn_0 $v9 $v8 $v3": "(cons $v3 $v10)"
        },
        {
          "fn_0 $v10 $v5 $v3": "(cons $v3 $v11)"
        },
        {
          "fn_0 $v11 $v10 $v3": "(cons $v3 $v12)"
        },
        {
          "fn_0 $v11 $v5 $v3": "(cons $v3 $v12)"
        },
        {
          "fn_0 $v12 $v8 $v3": "(cons $v3 $v13)"
        },
        {
          "fn_0 $v13 $v7 $v3": "(cons $v3 $v14)"
        },
        {
          "fn_0 $v14 $v10 $v3": "(cons $v3 $v15)"
        },
        {
          "fn_0 $v17 $v12 $v3": "(cons $v3 $v18)"
        },
        {
          "fn_0 $v17 $v5 $v3": "(cons $v3 $v18)"
        },
        {
          "fn_0 $v19 $v14 $v3": "(cons $v3 $v20)"
        },
        {
          "fn_0 $v19 $v5 $v3": "(cons $v3 $v20)"
        },
        {
          "fn_0 $v19 $v8 $v3": "(cons $v3 $v20)"
        },
        {
          "fn_0 $v19 $v8 $v3": "(cons $v3 $v20)"
        },
        {
          "fn_0 $v19 $v8 $v3": "(cons $v3 $v20)"
        },
        {
          "fn_0 $v21 $v5 $v3": "(cons $v3 $v22)"
        },
        {
          "fn_0 $v21 $v5 $v3": "(cons $v3 $v22)"
        },
        {
          "fn_0 $v21 $v5 $v3": "(cons $v3 $v22)"
        },
        {
          "fn_0 $v21 $v5 $v3": "(cons $v3 $v22)"
        },
        {
          "fn_0 $v21 $v7 $v3": "(cons $v3 $v22)"
        },
        {
          "fn_0 $v22 $v5 $v3": "(cons $v3 $v23)"
        },
        {
          "fn_0 $v22 $v5 $v3": "(cons $v3 $v23)"
        },
        {
          "fn_0 $v23 $v9 $v3": "(cons $v3 $v24)"
        },
        {
          "fn_0 $v10 $v9 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v10 $v9 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v11 $v10 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v12 $v11 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v6 $v5 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v7 $v6 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v8 $v7 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v9 $v8 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v9 $v8 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v9 $v8 $v3": "(cons $v3 $v4)"
        },
        {
          "fn_0 $v23 $v9 $v4": "(cons $v4 $v24)"
        },
        {
          "fn_0 $v10 $v9 $v4": "(cons $v4 $v5)"
        },
        {
          "fn_0 $v7 $v6 $v4": "(cons $v4 $v5)"
        },
        {
          "fn_0 $v7 $v6 $v4": "(cons $v4 $v5)"
        },
        {
          "fn_0 $v10 $v7 $v5": "(cons $v5 $v11)"
        },
        {
          "fn_0 $v14 $v11 $v5": "(cons $v5 $v15)"
        },
        {
          "fn_0 $v16 $v7 $v5": "(cons $v5 $v17)"
        },
        {
          "fn_0 $v18 $v10 $v5": "(cons $v5 $v19)"
        },
        {
          "fn_0 $v20 $v12 $v5": "(cons $v5 $v21)"
        },
        {
          "fn_0 $v20 $v12 $v5": "(cons $v5 $v21)"
        },
        {
          "fn_0 $v20 $v12 $v5": "(cons $v5 $v21)"
        },
        {
          "fn_0 $v20 $v14 $v5": "(cons $v5 $v21)"
        },
        {
          "fn_0 $v21 $v13 $v5": "(cons $v5 $v22)"
        },
        {
          "fn_0 $v21 $v13 $v5": "(cons $v5 $v22)"
        },
        {
          "fn_0 $v10 $v9 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v10 $v9 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v10 $v9 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v10 $v9 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v11 $v10 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v12 $v11 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v12 $v11 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v14 $v13 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v14 $v13 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v15 $v14 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v8 $v7 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v9 $v8 $v5": "(cons $v5 $v6)"
        },
        {
          "fn_0 $v2 $v1 $v5": "(cons $v5 $v7)"
        },
        {
          "fn_0 $v10 $v3 $v6": "(cons $v6 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v6": "(cons $v6 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v6": "(cons $v6 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v6": "(cons $v6 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v6": "(cons $v6 $v11)"
        },
        {
          "fn_0 $v11 $v7 $v6": "(cons $v6 $v12)"
        },
        {
          "fn_0 $v12 $v7 $v6": "(cons $v6 $v13)"
        },
        {
          "fn_0 $v12 $v7 $v6": "(cons $v6 $v13)"
        },
        {
          "fn_0 $v12 $v7 $v6": "(cons $v6 $v13)"
        },
        {
          "fn_0 $v13 $v7 $v6": "(cons $v6 $v14)"
        },
        {
          "fn_0 $v10 $v14 $v6": "(cons $v6 $v15)"
        },
        {
          "fn_0 $v10 $v14 $v6": "(cons $v6 $v15)"
        },
        {
          "fn_0 $v10 $v14 $v6": "(cons $v6 $v15)"
        },
        {
          "fn_0 $v10 $v14 $v6": "(cons $v6 $v15)"
        },
        {
          "fn_0 $v14 $v3 $v6": "(cons $v6 $v15)"
        },
        {
          "fn_0 $v15 $v3 $v6": "(cons $v6 $v16)"
        },
        {
          "fn_0 $v15 $v3 $v6": "(cons $v6 $v16)"
        },
        {
          "fn_0 $v15 $v3 $v6": "(cons $v6 $v16)"
        },
        {
          "fn_0 $v15 $v3 $v6": "(cons $v6 $v16)"
        },
        {
          "fn_0 $v15 $v7 $v6": "(cons $v6 $v16)"
        },
        {
          "fn_0 $v15 $v7 $v6": "(cons $v6 $v16)"
        },
        {
          "fn_0 $v16 $v12 $v6": "(cons $v6 $v17)"
        },
        {
          "fn_0 $v16 $v7 $v6": "(cons $v6 $v17)"
        },
        {
          "fn_0 $v17 $v10 $v6": "(cons $v6 $v18)"
        },
        {
          "fn_0 $v17 $v10 $v6": "(cons $v6 $v18)"
        },
        {
          "fn_0 $v17 $v10 $v6": "(cons $v6 $v18)"
        },
        {
          "fn_0 $v17 $v8 $v6": "(cons $v6 $v18)"
        },
        {
          "fn_0 $v18 $v12 $v6": "(cons $v6 $v19)"
        },
        {
          "fn_0 $v20 $v3 $v6": "(cons $v6 $v21)"
        },
        {
          "fn_0 $v22 $v3 $v6": "(cons $v6 $v23)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v24 $v14 $v6": "(cons $v6 $v25)"
        },
        {
          "fn_0 $v26 $v14 $v6": "(cons $v6 $v27)"
        },
        {
          "fn_0 $v26 $v14 $v6": "(cons $v6 $v27)"
        },
        {
          "fn_0 $v12 $v11 $v6": "(cons $v6 $v7)"
        },
        {
          "fn_0 $v9 $v8 $v6": "(cons $v6 $v7)"
        },
        {
          "fn_0 $v7 $v3 $v6": "(cons $v6 $v8)"
        },
        {
          "fn_0 $v8 $v3 $v6": "(cons $v6 $v9)"
        },
        {
          "fn_0 $v8 $v3 $v6": "(cons $v6 $v9)"
        },
        {
          "fn_0 $v12 $v9 $v7": "(cons $v7 $v13)"
        },
        {
          "fn_0 $v13 $v12 $v7": "(cons $v7 $v14)"
        },
        {
          "fn_0 $v13 $v12 $v7": "(cons $v7 $v14)"
        },
        {
          "fn_0 $v13 $v12 $v7": "(cons $v7 $v14)"
        },
        {
          "fn_0 $v14 $v12 $v7": "(cons $v7 $v15)"
        },
        {
          "fn_0 $v14 $v8 $v7": "(cons $v7 $v15)"
        },
        {
          "fn_0 $v14 $v8 $v7": "(cons $v7 $v15)"
        },
        {
          "fn_0 $v11 $v15 $v7": "(cons $v7 $v16)"
        },
        {
          "fn_0 $v15 $v14 $v7": "(cons $v7 $v16)"
        },
        {
          "fn_0 $v16 $v12 $v7": "(cons $v7 $v17)"
        },
        {
          "fn_0 $v16 $v13 $v7": "(cons $v7 $v17)"
        },
        {
          "fn_0 $v18 $v12 $v7": "(cons $v7 $v19)"
        },
        {
          "fn_0 $v20 $v12 $v7": "(cons $v7 $v21)"
        },
        {
          "fn_0 $v10 $v9 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v10 $v9 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v10 $v9 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v10 $v9 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v10 $v9 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v10 $v9 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v12 $v11 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v12 $v11 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v12 $v11 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v14 $v13 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v14 $v13 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v15 $v14 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v15 $v14 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v16 $v15 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v16 $v15 $v7": "(cons $v7 $v8)"
        },
        {
          "fn_0 $v2 $v1 $v7": "(cons $v7 $v9)"
        },
        {
          "fn_0 $v10 $v3 $v8": "(cons $v8 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v8": "(cons $v8 $v11)"
        },
        {
          "fn_0 $v10 $v3 $v8": "(cons $v8 $v11)"
        },
        {
          "fn_0 $v11 $v9 $v8": "(cons $v8 $v12)"
        },
        {
          "fn_0 $v11 $v9 $v8": "(cons $v8 $v12)"
        },
        {
          "fn_0 $v12 $v5 $v8": "(cons $v8 $v13)"
        },
        {
          "fn_0 $v13 $v10 $v8": "(cons $v8 $v14)"
        },
        {
          "fn_0 $v14 $v10 $v8": "(cons $v8 $v15)"
        },
        {
          "fn_0 $v14 $v9 $v8": "(cons $v8 $v15)"
        },
        {
          "fn_0 $v12 $v16 $v8": "(cons $v8 $v17)"
        },
        {
          "fn_0 $v12 $v16 $v8": "(cons $v8 $v17)"
        },
        {
          "fn_0 $v12 $v16 $v8": "(cons $v8 $v17)"
        },
        {
          "fn_0 $v16 $v12 $v8": "(cons $v8 $v17)"
        },
        {
          "fn_0 $v18 $v14 $v8": "(cons $v8 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v8": "(cons $v8 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v8": "(cons $v8 $v19)"
        },
        {
          "fn_0 $v18 $v14 $v8": "(cons $v8 $v19)"
        },
        {
          "fn_0 $v18 $v9 $v8": "(cons $v8 $v19)"
        },
        {
          "fn_0 $v18 $v9 $v8": "(cons $v8 $v19)"
        },
        {
          "fn_0 $v18 $v9 $v8": "(cons $v8 $v19)"
        },
        {
          "fn_0 $v19 $v15 $v8": "(cons $v8 $v20)"
        },
        {
          "fn_0 $v19 $v15 $v8": "(cons $v8 $v20)"
        },
        {
          "fn_0 $v20 $v16 $v8": "(cons $v8 $v21)"
        },
        {
          "fn_0 $v20 $v16 $v8": "(cons $v8 $v21)"
        },
        {
          "fn_0 $v24 $v3 $v8": "(cons $v8 $v25)"
        },
        {
          "fn_0 $v24 $v4 $v8": "(cons $v8 $v25)"
        },
        {
          "fn_0 $v11 $v10 $v8": "(cons $v8 $v9)"
        },
        {
          "fn_0 $v11 $v10 $v8": "(cons $v8 $v9)"
        },
        {
          "fn_0 $v2 $v1 $v8": "(cons $v8 $v9)"
        },
        {
          "fn_0 $v6 $v3 $v8": "(cons $v8 $v9)"
        },
        {
          "fn_0 $v12 $v11 $v9": "(cons $v9 $v10)"
        },
        {
          "fn_0 $v12 $v11 $v9": "(cons $v9 $v10)"
        },
        {
          "fn_0 $v14 $v13 $v9": "(cons $v9 $v10)"
        },
        {
          "fn_0 $v14 $v13 $v9": "(cons $v9 $v10)"
        },
        {
          "fn_0 $v16 $v15 $v9": "(cons $v9 $v10)"
        },
        {
          "fn_0 $v16 $v15 $v9": "(cons $v9 $v10)"
        },
        {
          "fn_0 $v17 $v16 $v9": "(cons $v9 $v10)"
        },
        {
          "fn_0 $v17 $v16 $v9": "(cons $v9 $v18)"
        },
        {
          "fn_0 $v22 $v14 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        },
        {
          "fn_0 $v22 $v18 $v9": "(cons $v9 $v23)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(repeat #0 Const(int, 1))",
      "dreamcoder": "#(lambda (repeat $0 Const(int, 1)))",
      "arity": 1,
      "name": "fn_1",
      "utility": 3434,
      "final_cost": 72248,
      "compression_ratio": 1.0503266526409036,
      "cumulative_compression_ratio": 1.2795925146716864,
      "num_uses": 160,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_1 $v1": "(repeat $v1 $v2)"
        },
        {
          "fn_1 $v1": "(repeat $v1 $v2)"
        },
        {
          "fn_1 $v1": "(repeat $v1 $v3)"
        },
        {
          "fn_1 $v10": "(repeat $v10 $v11)"
        },
        {
          "fn_1 $v10": "(repeat $v10 $v11)"
        },
        {
          "fn_1 $v10": "(repeat $v10 $v11)"
        },
        {
          "fn_1 $v10": "(repeat $v10 $v11)"
        },
        {
          "fn_1 $v10": "(repeat $v10 $v11)"
        },
        {
          "fn_1 $v10": "(repeat $v10 $v11)"
        },
        {
          "fn_1 $v10": "(repeat $v10 $v11)"
        },
        {
          "fn_1 $v11": "(repeat $v11 $v13)"
        },
        {
          "fn_1 $v12": "(repeat $v12 $v13)"
        },
        {
          "fn_1 $v12": "(repeat $v12 $v13)"
        },
        {
          "fn_1 $v12": "(repeat $v12 $v13)"
        },
        {
          "fn_1 $v12": "(repeat $v12 $v13)"
        },
        {
          "fn_1 $v12": "(repeat $v12 $v13)"
        },
        {
          "fn_1 $v13": "(repeat $v13 $v15)"
        },
        {
          "fn_1 $v14": "(repeat $v14 $v15)"
        },
        {
          "fn_1 $v14": "(repeat $v14 $v15)"
        },
        {
          "fn_1 $v14": "(repeat $v14 $v15)"
        },
        {
          "fn_1 $v14": "(repeat $v14 $v15)"
        },
        {
          "fn_1 $v15": "(repeat $v15 $v17)"
        },
        {
          "fn_1 $v16": "(repeat $v16 $v17)"
        },
        {
          "fn_1 $v18": "(repeat $v18 $v20)"
        },
        {
          "fn_1 $v19": "(repeat $v19 $v21)"
        },
        {
          "fn_1 $v21": "(repeat $v21 $v23)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v4)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v4)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v4)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v4)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v4)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v4)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v5)"
        },
        {
          "fn_1 $v3": "(repeat $v3 $v7)"
        },
        {
          "fn_1 $v4": "(repeat $v4 $v5)"
        },
        {
          "fn_1 $v4": "(repeat $v4 $v5)"
        },
        {
          "fn_1 $v5": "(repeat $v5 $v1)"
        },
        {
          "fn_1 $v5": "(repeat $v5 $v11)"
        },
        {
          "fn_1 $v5": "(repeat $v5 $v2)"
        },
        {
          "fn_1 $v5": "(repeat $v5 $v7)"
        },
        {
          "fn_1 $v5": "(repeat $v5 $v9)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v6": "(repeat $v6 $v7)"
        },
        {
          "fn_1 $v7": "(repeat $v7 $v13)"
        },
        {
          "fn_1 $v7": "(repeat $v7 $v8)"
        },
        {
          "fn_1 $v7": "(repeat $v7 $v8)"
        },
        {
          "fn_1 $v7": "(repeat $v7 $v8)"
        },
        {
          "fn_1 $v7": "(repeat $v7 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v10)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v8": "(repeat $v8 $v9)"
        },
        {
          "fn_1 $v9": "(repeat $v9 $v11)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(- #1 (- #1 #0))",
      "dreamcoder": "#(lambda (lambda (- $0 (- $0 $1))))",
      "arity": 2,
      "name": "fn_2",
      "utility": 1917,
      "final_cost": 70127,
      "compression_ratio": 1.0302451266987038,
      "cumulative_compression_ratio": 1.3182939524006445,
      "num_uses": 138,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_2 $v9 $v1": "(- $v1 $v10)"
        },
        {
          "fn_2 $v5 $v1": "(- $v1 $v11)"
        },
        {
          "fn_2 $v7 $v1": "(- $v1 $v11)"
        },
        {
          "fn_2 $v9 $v1": "(- $v1 $v11)"
        },
        {
          "fn_2 $v9 $v1": "(- $v1 $v11)"
        },
        {
          "fn_2 $v11 $v1": "(- $v1 $v12)"
        },
        {
          "fn_2 $v11 $v1": "(- $v1 $v12)"
        },
        {
          "fn_2 $v11 $v1": "(- $v1 $v12)"
        },
        {
          "fn_2 $v11 $v1": "(- $v1 $v12)"
        },
        {
          "fn_2 $v11 $v1": "(- $v1 $v13)"
        },
        {
          "fn_2 $v12 $v1": "(- $v1 $v13)"
        },
        {
          "fn_2 $v12 $v1": "(- $v1 $v13)"
        },
        {
          "fn_2 $v12 $v1": "(- $v1 $v13)"
        },
        {
          "fn_2 $v13 $v1": "(- $v1 $v14)"
        },
        {
          "fn_2 $v14 $v1": "(- $v1 $v15)"
        },
        {
          "fn_2 $inp0 $v2": "(- $v1 $v3)"
        },
        {
          "fn_2 $v2 $v1": "(- $v1 $v3)"
        },
        {
          "fn_2 $v2 $v1": "(- $v1 $v4)"
        },
        {
          "fn_2 $v3 $v1": "(- $v1 $v4)"
        },
        {
          "fn_2 $v3 $v1": "(- $v1 $v4)"
        },
        {
          "fn_2 $v3 $v1": "(- $v1 $v5)"
        },
        {
          "fn_2 $v3 $v2": "(- $v1 $v5)"
        },
        {
          "fn_2 $v3 $v2": "(- $v1 $v5)"
        },
        {
          "fn_2 $v5 $v1": "(- $v1 $v6)"
        },
        {
          "fn_2 $v5 $v1": "(- $v1 $v6)"
        },
        {
          "fn_2 $v3 $v1": "(- $v1 $v7)"
        },
        {
          "fn_2 $v5 $v1": "(- $v1 $v7)"
        },
        {
          "fn_2 $v6 $v1": "(- $v1 $v7)"
        },
        {
          "fn_2 $v5 $v1": "(- $v1 $v9)"
        },
        {
          "fn_2 $v7 $v1": "(- $v1 $v9)"
        },
        {
          "fn_2 $v9 $v3": "(- $v3 $v11)"
        },
        {
          "fn_2 $v11 $v3": "(- $v3 $v13)"
        },
        {
          "fn_2 $v15 $v3": "(- $v3 $v16)"
        },
        {
          "fn_2 $v1 $v3": "(- $v3 $v5)"
        },
        {
          "fn_2 $v5 $v3": "(- $v3 $v6)"
        },
        {
          "fn_2 $v5 $v3": "(- $v3 $v6)"
        },
        {
          "fn_2 $v5 $v3": "(- $v3 $v7)"
        },
        {
          "fn_2 $v7 $v3": "(- $v3 $v9)"
        },
        {
          "fn_2 $v9 $v4": "(- $v4 $v11)"
        },
        {
          "fn_2 $v9 $v5": "(- $v5 $v11)"
        },
        {
          "fn_2 $v11 $v5": "(- $v5 $v12)"
        },
        {
          "fn_2 $v13 $v5": "(- $v5 $v14)"
        },
        {
          "fn_2 $v3 $v5": "(- $v5 $v6)"
        },
        {
          "fn_2 $v1 $v5": "(- $v5 $v7)"
        },
        {
          "fn_2 $v3 $v5": "(- $v5 $v7)"
        },
        {
          "fn_2 $v7 $v5": "(- $v5 $v8)"
        },
        {
          "fn_2 $v7 $v5": "(- $v5 $v9)"
        },
        {
          "fn_2 $v8 $v7": "(- $v7 $v10)"
        },
        {
          "fn_2 $v11 $v7": "(- $v7 $v13)"
        },
        {
          "fn_2 $v13 $v7": "(- $v7 $v15)"
        },
        {
          "fn_2 $v3 $v7": "(- $v7 $v9)"
        },
        {
          "fn_2 $v1 $v9": "(- $v9 $v11)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_0 Const(list(int), Any[]) #1 #0)",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(int), Any[]) $0 $1)))",
      "arity": 2,
      "name": "fn_3",
      "utility": 1211,
      "final_cost": 68713,
      "compression_ratio": 1.02057834761981,
      "cumulative_compression_ratio": 1.3454222636182382,
      "num_uses": 52,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_3 $v3 $v10": "(fn_0 $v11 $v10 $v3)"
        },
        {
          "fn_3 $v8 $v9": "(fn_0 $v11 $v9 $v8)"
        },
        {
          "fn_3 $v8 $v9": "(fn_0 $v11 $v9 $v8)"
        },
        {
          "fn_3 $v10 $v11": "(fn_0 $v13 $v11 $v10)"
        },
        {
          "fn_3 $v10 $v11": "(fn_0 $v13 $v11 $v10)"
        },
        {
          "fn_3 $v7 $v12": "(fn_0 $v13 $v12 $v7)"
        },
        {
          "fn_3 $v7 $v12": "(fn_0 $v13 $v12 $v7)"
        },
        {
          "fn_3 $v7 $v12": "(fn_0 $v13 $v12 $v7)"
        },
        {
          "fn_3 $v12 $v13": "(fn_0 $v15 $v13 $v12)"
        },
        {
          "fn_3 $v12 $v13": "(fn_0 $v15 $v13 $v12)"
        },
        {
          "fn_3 $v10 $v14": "(fn_0 $v15 $v14 $v10)"
        },
        {
          "fn_3 $v10 $v14": "(fn_0 $v15 $v14 $v10)"
        },
        {
          "fn_3 $v7 $v14": "(fn_0 $v15 $v14 $v7)"
        },
        {
          "fn_3 $v14 $v15": "(fn_0 $v17 $v15 $v14)"
        },
        {
          "fn_3 $v14 $v15": "(fn_0 $v17 $v15 $v14)"
        },
        {
          "fn_3 $v14 $v15": "(fn_0 $v17 $v15 $v14)"
        },
        {
          "fn_3 $v14 $v15": "(fn_0 $v17 $v15 $v14)"
        },
        {
          "fn_3 $v10 $v16": "(fn_0 $v17 $v16 $v10)"
        },
        {
          "fn_3 $v9 $v16": "(fn_0 $v17 $v16 $v9)"
        },
        {
          "fn_3 $v15 $v16": "(fn_0 $v18 $v16 $v15)"
        },
        {
          "fn_3 $v15 $v16": "(fn_0 $v18 $v16 $v15)"
        },
        {
          "fn_3 $v16 $v17": "(fn_0 $v19 $v17 $v16)"
        },
        {
          "fn_3 $v16 $v17": "(fn_0 $v19 $v17 $v16)"
        },
        {
          "fn_3 $v16 $v17": "(fn_0 $v19 $v17 $v16)"
        },
        {
          "fn_3 $v16 $v17": "(fn_0 $v19 $v17 $v16)"
        },
        {
          "fn_3 $v12 $v18": "(fn_0 $v19 $v18 $v12)"
        },
        {
          "fn_3 $v12 $v18": "(fn_0 $v19 $v18 $v12)"
        },
        {
          "fn_3 $v12 $v18": "(fn_0 $v19 $v18 $v12)"
        },
        {
          "fn_3 $v12 $v18": "(fn_0 $v19 $v18 $v12)"
        },
        {
          "fn_3 $v14 $v18": "(fn_0 $v19 $v18 $v14)"
        },
        {
          "fn_3 $v13 $v19": "(fn_0 $v20 $v19 $v13)"
        },
        {
          "fn_3 $v13 $v19": "(fn_0 $v20 $v19 $v13)"
        },
        {
          "fn_3 $v14 $v20": "(fn_0 $v21 $v20 $v14)"
        },
        {
          "fn_3 $v1 $v3": "(fn_0 $v5 $v3 $v1)"
        },
        {
          "fn_3 $v6 $v3": "(fn_0 $v7 $v3 $v6)"
        },
        {
          "fn_3 $v1 $v6": "(fn_0 $v7 $v6 $v1)"
        },
        {
          "fn_3 $v1 $v6": "(fn_0 $v7 $v6 $v1)"
        },
        {
          "fn_3 $v1 $v6": "(fn_0 $v7 $v6 $v1)"
        },
        {
          "fn_3 $v3 $v8": "(fn_0 $v9 $v8 $v3)"
        },
        {
          "fn_3 $v3 $v8": "(fn_0 $v9 $v8 $v3)"
        },
        {
          "fn_3 $v3 $v8": "(fn_0 $v9 $v8 $v3)"
        },
        {
          "fn_3 $v3 $v8": "(fn_0 $v9 $v8 $v3)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(+ #0 (- #1 #0))",
      "dreamcoder": "#(lambda (lambda (+ $1 (- $0 $1))))",
      "arity": 2,
      "name": "fn_4",
      "utility": 1008,
      "final_cost": 67501,
      "compression_ratio": 1.0179552895512658,
      "cumulative_compression_ratio": 1.3695797099302232,
      "num_uses": 79,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_4 $inp0 $v1": "(+ $inp0 $v2)"
        },
        {
          "fn_4 $v1 $v10": "(+ $v1 $v11)"
        },
        {
          "fn_4 $v1 $v7": "(+ $v1 $v11)"
        },
        {
          "fn_4 $v1 $v9": "(+ $v1 $v11)"
        },
        {
          "fn_4 $v1 $v11": "(+ $v1 $v13)"
        },
        {
          "fn_4 $v1 $inp0": "(+ $v1 $v2)"
        },
        {
          "fn_4 $v1 $v3": "(+ $v1 $v5)"
        },
        {
          "fn_4 $v1 $v5": "(+ $v1 $v7)"
        },
        {
          "fn_4 $v1 $v7": "(+ $v1 $v9)"
        },
        {
          "fn_4 $v1 $v8": "(+ $v1 $v9)"
        },
        {
          "fn_4 $v13 $v11": "(+ $v13 $v15)"
        },
        {
          "fn_4 $v15 $v13": "(+ $v15 $v17)"
        },
        {
          "fn_4 $v15 $v9": "(+ $v15 $v17)"
        },
        {
          "fn_4 $v16 $v14": "(+ $v16 $v18)"
        },
        {
          "fn_4 $v17 $v15": "(+ $v17 $v19)"
        },
        {
          "fn_4 $v2 $inp0": "(+ $v2 $v3)"
        },
        {
          "fn_4 $v3 $v9": "(+ $v3 $v11)"
        },
        {
          "fn_4 $v3 $v1": "(+ $v3 $v4)"
        },
        {
          "fn_4 $v3 $v1": "(+ $v3 $v5)"
        },
        {
          "fn_4 $v3 $v5": "(+ $v3 $v7)"
        },
        {
          "fn_4 $v3 $v7": "(+ $v3 $v8)"
        },
        {
          "fn_4 $v5 $v9": "(+ $v5 $v11)"
        },
        {
          "fn_4 $v5 $v1": "(+ $v5 $v7)"
        },
        {
          "fn_4 $v5 $v3": "(+ $v5 $v7)"
        },
        {
          "fn_4 $v5 $v7": "(+ $v5 $v9)"
        },
        {
          "fn_4 $v7 $v9": "(+ $v7 $v11)"
        },
        {
          "fn_4 $v7 $v11": "(+ $v7 $v13)"
        },
        {
          "fn_4 $v7 $v14": "(+ $v7 $v16)"
        },
        {
          "fn_4 $v7 $v3": "(+ $v7 $v9)"
        },
        {
          "fn_4 $v9 $v3": "(+ $v9 $v11)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(concat #1 (fn_1 #0))",
      "dreamcoder": "#(lambda (lambda (concat $0 (#(lambda (repeat $0 Const(int, 1))) $1))))",
      "arity": 2,
      "name": "fn_5",
      "utility": 807,
      "final_cost": 66491,
      "compression_ratio": 1.0151900257177664,
      "cumulative_compression_ratio": 1.3903836609465943,
      "num_uses": 38,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_5 $v8 $inp0": "(concat $inp0 $v10)"
        },
        {
          "fn_5 $v8 $inp0": "(concat $inp0 $v10)"
        },
        {
          "fn_5 $v8 $inp0": "(concat $inp0 $v10)"
        },
        {
          "fn_5 $v10 $inp0": "(concat $inp0 $v12)"
        },
        {
          "fn_5 $v10 $inp0": "(concat $inp0 $v12)"
        },
        {
          "fn_5 $v10 $inp0": "(concat $inp0 $v12)"
        },
        {
          "fn_5 $v10 $inp0": "(concat $inp0 $v12)"
        },
        {
          "fn_5 $v9 $inp0": "(concat $inp0 $v12)"
        },
        {
          "fn_5 $v12 $inp0": "(concat $inp0 $v14)"
        },
        {
          "fn_5 $v12 $inp0": "(concat $inp0 $v14)"
        },
        {
          "fn_5 $v1 $inp0": "(concat $inp0 $v3)"
        },
        {
          "fn_5 $v1 $inp0": "(concat $inp0 $v3)"
        },
        {
          "fn_5 $v1 $inp0": "(concat $inp0 $v4)"
        },
        {
          "fn_5 $v3 $inp0": "(concat $inp0 $v5)"
        },
        {
          "fn_5 $v3 $inp0": "(concat $inp0 $v5)"
        },
        {
          "fn_5 $v3 $inp0": "(concat $inp0 $v5)"
        },
        {
          "fn_5 $v3 $inp0": "(concat $inp0 $v5)"
        },
        {
          "fn_5 $v3 $inp0": "(concat $inp0 $v5)"
        },
        {
          "fn_5 $v3 $inp0": "(concat $inp0 $v5)"
        },
        {
          "fn_5 $v3 $inp0": "(concat $inp0 $v6)"
        },
        {
          "fn_5 $v4 $inp0": "(concat $inp0 $v6)"
        },
        {
          "fn_5 $v4 $inp0": "(concat $inp0 $v6)"
        },
        {
          "fn_5 $v5 $inp0": "(concat $inp0 $v6)"
        },
        {
          "fn_5 $v5 $inp0": "(concat $inp0 $v6)"
        },
        {
          "fn_5 $v5 $inp0": "(concat $inp0 $v8)"
        },
        {
          "fn_5 $v6 $inp0": "(concat $inp0 $v8)"
        },
        {
          "fn_5 $v6 $inp0": "(concat $inp0 $v8)"
        },
        {
          "fn_5 $v6 $v1": "(concat $v1 $v8)"
        },
        {
          "fn_5 $v6 $v1": "(concat $v1 $v8)"
        },
        {
          "fn_5 $v7 $v1": "(concat $v1 $v9)"
        },
        {
          "fn_5 $v7 $v1": "(concat $v1 $v9)"
        },
        {
          "fn_5 $v7 $v1": "(concat $v1 $v9)"
        },
        {
          "fn_5 $v1 $v2": "(concat $v2 $v4)"
        },
        {
          "fn_5 $v5 $v2": "(concat $v2 $v8)"
        },
        {
          "fn_5 $v5 $v4": "(concat $v4 $v8)"
        },
        {
          "fn_5 $v5 $v4": "(concat $v4 $v8)"
        },
        {
          "fn_5 $v5 $v4": "(concat $v4 $v8)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_0 (fn_1 #2) #1 #0)",
      "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) (#(lambda (repeat $0 Const(int, 1))) $0) $1 $2))))",
      "arity": 3,
      "name": "fn_6",
      "utility": 806,
      "final_cost": 65481,
      "compression_ratio": 1.0154243215589256,
      "cumulative_compression_ratio": 1.4118293856233106,
      "num_uses": 41,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_6 $v6 $v3 $v7": "(fn_0 $v10 $v3 $v6)"
        },
        {
          "fn_6 $v6 $v3 $v7": "(fn_0 $v10 $v3 $v6)"
        },
        {
          "fn_6 $v6 $v3 $v7": "(fn_0 $v10 $v3 $v6)"
        },
        {
          "fn_6 $v6 $v3 $v7": "(fn_0 $v10 $v3 $v6)"
        },
        {
          "fn_6 $v6 $v3 $v7": "(fn_0 $v10 $v3 $v6)"
        },
        {
          "fn_6 $v8 $v3 $v5": "(fn_0 $v10 $v3 $v8)"
        },
        {
          "fn_6 $v8 $v3 $v5": "(fn_0 $v10 $v3 $v8)"
        },
        {
          "fn_6 $v8 $v3 $v5": "(fn_0 $v10 $v3 $v8)"
        },
        {
          "fn_6 $v3 $v5 $v7": "(fn_0 $v10 $v5 $v3)"
        },
        {
          "fn_6 $v1 $v6 $v7": "(fn_0 $v10 $v6 $v1)"
        },
        {
          "fn_6 $v6 $v7 $v8": "(fn_0 $v11 $v7 $v6)"
        },
        {
          "fn_6 $v10 $v3 $v5": "(fn_0 $v12 $v3 $v10)"
        },
        {
          "fn_6 $v8 $v5 $v9": "(fn_0 $v12 $v5 $v8)"
        },
        {
          "fn_6 $v6 $v7 $v9": "(fn_0 $v12 $v7 $v6)"
        },
        {
          "fn_6 $v6 $v7 $v9": "(fn_0 $v12 $v7 $v6)"
        },
        {
          "fn_6 $v6 $v7 $v9": "(fn_0 $v12 $v7 $v6)"
        },
        {
          "fn_6 $v12 $v5 $v7": "(fn_0 $v14 $v5 $v12)"
        },
        {
          "fn_6 $v8 $v9 $v11": "(fn_0 $v14 $v9 $v8)"
        },
        {
          "fn_6 $v7 $v12 $v13": "(fn_0 $v16 $v12 $v7)"
        },
        {
          "fn_6 $v10 $v14 $v15": "(fn_0 $v18 $v14 $v10)"
        },
        {
          "fn_6 $v10 $v14 $v15": "(fn_0 $v18 $v14 $v10)"
        },
        {
          "fn_6 $v10 $v14 $v15": "(fn_0 $v18 $v14 $v10)"
        },
        {
          "fn_6 $v10 $v14 $v15": "(fn_0 $v18 $v14 $v10)"
        },
        {
          "fn_6 $v10 $v14 $v15": "(fn_0 $v18 $v14 $v10)"
        },
        {
          "fn_6 $v10 $v14 $v15": "(fn_0 $v18 $v14 $v10)"
        },
        {
          "fn_6 $v10 $v14 $v15": "(fn_0 $v18 $v14 $v10)"
        },
        {
          "fn_6 $v13 $v17 $v18": "(fn_0 $v21 $v17 $v13)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v9 $v18 $v19": "(fn_0 $v22 $v18 $v9)"
        },
        {
          "fn_6 $v15 $v20 $v21": "(fn_0 $v24 $v20 $v15)"
        },
        {
          "fn_6 $v15 $v20 $v21": "(fn_0 $v24 $v20 $v15)"
        },
        {
          "fn_6 $v1 $v3 $v5": "(fn_0 $v8 $v3 $v1)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(- (+ #2 #1) #0)",
      "dreamcoder": "#(lambda (lambda (lambda (- (+ $0 $1) $2))))",
      "arity": 3,
      "name": "fn_7",
      "utility": 604,
      "final_cost": 64673,
      "compression_ratio": 1.0124936217586937,
      "cumulative_compression_ratio": 1.429468247955097,
      "num_uses": 133,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_7 $v1 $v1 $v9": "(- $v11 $v1)"
        },
        {
          "fn_7 $v1 $v9 $v1": "(- $v11 $v1)"
        },
        {
          "fn_7 $v3 $v10 $v1": "(- $v11 $v3)"
        },
        {
          "fn_7 $v3 $v3 $v9": "(- $v11 $v3)"
        },
        {
          "fn_7 $v5 $v5 $v9": "(- $v11 $v5)"
        },
        {
          "fn_7 $v5 $v9 $v5": "(- $v11 $v5)"
        },
        {
          "fn_7 $v7 $v7 $v9": "(- $v11 $v7)"
        },
        {
          "fn_7 $v7 $v9 $v7": "(- $v11 $v7)"
        },
        {
          "fn_7 $v3 $v11 $v1": "(- $v12 $v3)"
        },
        {
          "fn_7 $v3 $v11 $v3": "(- $v12 $v3)"
        },
        {
          "fn_7 $v1 $v1 $v11": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v12": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v12": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v12": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v12": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v12": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v12": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v7 $v12": "(- $v13 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v14": "(- $v15 $v1)"
        },
        {
          "fn_7 $v1 $v1 $v14": "(- $v15 $v1)"
        },
        {
          "fn_7 $v3 $v15 $v6": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v15 $v6": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v15 $v6": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v15 $v6": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v6 $v15": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v6 $v15": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v6 $v15": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v6 $v15": "(- $v17 $v3)"
        },
        {
          "fn_7 $v3 $v17 $v6": "(- $v19 $v3)"
        },
        {
          "fn_7 $v3 $v6 $v17": "(- $v19 $v3)"
        },
        {
          "fn_7 $v2 $inp0 $v2": "(- $v3 $v2)"
        },
        {
          "fn_7 $v2 $v2 $inp0": "(- $v3 $v2)"
        },
        {
          "fn_7 $v6 $v1 $v1": "(- $v3 $v6)"
        },
        {
          "fn_7 $v1 $v3 $v1": "(- $v4 $v1)"
        },
        {
          "fn_7 $v3 $v3 $v1": "(- $v4 $v3)"
        },
        {
          "fn_7 $v5 $v2 $v1": "(- $v4 $v5)"
        },
        {
          "fn_7 $v5 $v3 $v1": "(- $v4 $v5)"
        },
        {
          "fn_7 $v1 $v1 $v3": "(- $v5 $v1)"
        },
        {
          "fn_7 $v1 $v3 $v1": "(- $v5 $v1)"
        },
        {
          "fn_7 $v3 $v1 $v3": "(- $v5 $v3)"
        },
        {
          "fn_7 $v3 $v3 $v1": "(- $v5 $v3)"
        },
        {
          "fn_7 $v1 $v1 $v5": "(- $v7 $v1)"
        },
        {
          "fn_7 $v1 $v5 $v1": "(- $v7 $v1)"
        },
        {
          "fn_7 $v3 $v3 $v5": "(- $v7 $v3)"
        },
        {
          "fn_7 $v3 $v5 $v3": "(- $v7 $v3)"
        },
        {
          "fn_7 $v4 $v5 $v4": "(- $v7 $v4)"
        },
        {
          "fn_7 $v6 $v6 $v3": "(- $v7 $v6)"
        },
        {
          "fn_7 $v9 $v1 $v5": "(- $v7 $v9)"
        },
        {
          "fn_7 $v9 $v5 $v1": "(- $v7 $v9)"
        },
        {
          "fn_7 $v11 $v1 $v7": "(- $v8 $v11)"
        },
        {
          "fn_7 $v11 $v3 $v7": "(- $v8 $v11)"
        },
        {
          "fn_7 $v1 $v1 $v7": "(- $v9 $v1)"
        },
        {
          "fn_7 $v1 $v7 $v1": "(- $v9 $v1)"
        },
        {
          "fn_7 $v10 $v1 $v5": "(- $v9 $v10)"
        },
        {
          "fn_7 $v10 $v5 $v1": "(- $v9 $v10)"
        },
        {
          "fn_7 $v3 $v3 $v7": "(- $v9 $v3)"
        },
        {
          "fn_7 $v3 $v7 $v3": "(- $v9 $v3)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(concat #0 #0)",
      "dreamcoder": "#(lambda (concat $0 $0))",
      "arity": 1,
      "name": "fn_8",
      "utility": 504,
      "final_cost": 64067,
      "compression_ratio": 1.009458847768742,
      "cumulative_compression_ratio": 1.442989370502755,
      "num_uses": 30,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_8 $inp0": "(concat $inp0 $inp0)"
        },
        {
          "fn_8 $v1": "(concat $v1 $v1)"
        },
        {
          "fn_8 $v2": "(concat $v1 $v2)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(cons #1 (fn_1 #0))",
      "dreamcoder": "#(lambda (lambda (cons $0 (#(lambda (repeat $0 Const(int, 1))) $1))))",
      "arity": 2,
      "name": "fn_9",
      "utility": 403,
      "final_cost": 63461,
      "compression_ratio": 1.009549171932368,
      "cumulative_compression_ratio": 1.456768724098265,
      "num_uses": 34,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_9 $v3 $v1": "(cons $v1 $v6)"
        },
        {
          "fn_9 $v6 $v1": "(cons $v1 $v8)"
        },
        {
          "fn_9 $v6 $v1": "(cons $v1 $v8)"
        },
        {
          "fn_9 $v14 $v10": "(cons $v10 $v16)"
        },
        {
          "fn_9 $v14 $v10": "(cons $v10 $v16)"
        },
        {
          "fn_9 $v13 $v12": "(cons $v12 $v16)"
        },
        {
          "fn_9 $v13 $v12": "(cons $v12 $v16)"
        },
        {
          "fn_9 $v13 $v12": "(cons $v12 $v16)"
        },
        {
          "fn_9 $v13 $v12": "(cons $v12 $v16)"
        },
        {
          "fn_9 $v16 $v12": "(cons $v12 $v18)"
        },
        {
          "fn_9 $v16 $v12": "(cons $v12 $v18)"
        },
        {
          "fn_9 $v16 $v12": "(cons $v12 $v18)"
        },
        {
          "fn_9 $v16 $v12": "(cons $v12 $v18)"
        },
        {
          "fn_9 $v8 $v3": "(cons $v3 $v10)"
        },
        {
          "fn_9 $v10 $v3": "(cons $v3 $v12)"
        },
        {
          "fn_9 $v5 $v3": "(cons $v3 $v8)"
        },
        {
          "fn_9 $v7 $v5": "(cons $v5 $v10)"
        },
        {
          "fn_9 $v11 $v5": "(cons $v5 $v14)"
        },
        {
          "fn_9 $v7 $v6": "(cons $v6 $v10)"
        },
        {
          "fn_9 $v7 $v6": "(cons $v6 $v10)"
        },
        {
          "fn_9 $v3 $v6": "(cons $v6 $v8)"
        },
        {
          "fn_9 $v12 $v7": "(cons $v7 $v14)"
        },
        {
          "fn_9 $v5 $v8": "(cons $v8 $v10)"
        },
        {
          "fn_9 $v9 $v8": "(cons $v8 $v12)"
        },
        {
          "fn_9 $v9 $v8": "(cons $v8 $v12)"
        },
        {
          "fn_9 $v9 $v8": "(cons $v8 $v12)"
        },
        {
          "fn_9 $v9 $v8": "(cons $v8 $v12)"
        },
        {
          "fn_9 $v9 $v8": "(cons $v8 $v12)"
        },
        {
          "fn_9 $v11 $v9": "(cons $v9 $v14)"
        },
        {
          "fn_9 $v14 $v9": "(cons $v9 $v16)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(- #2 (- #1 #0))",
      "dreamcoder": "#(lambda (lambda (lambda (- $0 (- $1 $2)))))",
      "arity": 3,
      "name": "fn_10",
      "utility": 402,
      "final_cost": 62855,
      "compression_ratio": 1.0096412377694695,
      "cumulative_compression_ratio": 1.470813777742423,
      "num_uses": 70,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_10 $inp0 $v1 $inp0": "(- $inp0 $v2)"
        },
        {
          "fn_10 $v8 $v6 $v1": "(- $v1 $v10)"
        },
        {
          "fn_10 $v8 $v13 $v1": "(- $v1 $v14)"
        },
        {
          "fn_10 $v8 $v13 $v1": "(- $v1 $v14)"
        },
        {
          "fn_10 $v8 $v14 $v1": "(- $v1 $v15)"
        },
        {
          "fn_10 $v8 $v14 $v1": "(- $v1 $v15)"
        },
        {
          "fn_10 $inp0 $v2 $v1": "(- $v1 $v3)"
        },
        {
          "fn_10 $v1 $v2 $v1": "(- $v1 $v3)"
        },
        {
          "fn_10 $v1 $v3 $v1": "(- $v1 $v5)"
        },
        {
          "fn_10 $v3 $v2 $v1": "(- $v1 $v5)"
        },
        {
          "fn_10 $v3 $v2 $v1": "(- $v1 $v5)"
        },
        {
          "fn_10 $v2 $v4 $v1": "(- $v1 $v6)"
        },
        {
          "fn_10 $v6 $v3 $v1": "(- $v1 $v7)"
        },
        {
          "fn_10 $v6 $v5 $v1": "(- $v1 $v7)"
        },
        {
          "fn_10 $v11 $v6 $v10": "(- $v10 $v13)"
        },
        {
          "fn_10 $v11 $v6 $v10": "(- $v10 $v13)"
        },
        {
          "fn_10 $v12 $v8 $v10": "(- $v10 $v13)"
        },
        {
          "fn_10 $v13 $v9 $v11": "(- $v11 $v14)"
        },
        {
          "fn_10 $v8 $v1 $v3": "(- $v3 $v10)"
        },
        {
          "fn_10 $v11 $v7 $v3": "(- $v3 $v12)"
        },
        {
          "fn_10 $v12 $v9 $v3": "(- $v3 $v13)"
        },
        {
          "fn_10 $v13 $v10 $v3": "(- $v3 $v14)"
        },
        {
          "fn_10 $v13 $v9 $v3": "(- $v3 $v14)"
        },
        {
          "fn_10 $v14 $v11 $v3": "(- $v3 $v15)"
        },
        {
          "fn_10 $v1 $v4 $v3": "(- $v3 $v6)"
        },
        {
          "fn_10 $v4 $v1 $v3": "(- $v3 $v6)"
        },
        {
          "fn_10 $v1 $v5 $v3": "(- $v3 $v7)"
        },
        {
          "fn_10 $v1 $v7 $v3": "(- $v3 $v9)"
        },
        {
          "fn_10 $v1 $v8 $v3": "(- $v3 $v9)"
        },
        {
          "fn_10 $v7 $v1 $v3": "(- $v3 $v9)"
        },
        {
          "fn_10 $v1 $v3 $v5": "(- $v5 $v6)"
        },
        {
          "fn_10 $v1 $v3 $v5": "(- $v5 $v6)"
        },
        {
          "fn_10 $v1 $v6 $v5": "(- $v5 $v7)"
        },
        {
          "fn_10 $v3 $v6 $v5": "(- $v5 $v7)"
        },
        {
          "fn_10 $v7 $v3 $v5": "(- $v5 $v9)"
        },
        {
          "fn_10 $v1 $v9 $v7": "(- $v7 $v10)"
        },
        {
          "fn_10 $v9 $v3 $v7": "(- $v7 $v11)"
        },
        {
          "fn_10 $v9 $v5 $v7": "(- $v7 $v11)"
        },
        {
          "fn_10 $v9 $v5 $v8": "(- $v8 $v11)"
        },
        {
          "fn_10 $v9 $v5 $v8": "(- $v8 $v11)"
        },
        {
          "fn_10 $v9 $v5 $v8": "(- $v8 $v11)"
        },
        {
          "fn_10 $v9 $v5 $v8": "(- $v8 $v11)"
        },
        {
          "fn_10 $v10 $v3 $v8": "(- $v8 $v12)"
        },
        {
          "fn_10 $v11 $v7 $v9": "(- $v9 $v12)"
        },
        {
          "fn_10 $v11 $v3 $v9": "(- $v9 $v13)"
        },
        {
          "fn_10 $v11 $v7 $v9": "(- $v9 $v13)"
        },
        {
          "fn_10 $v3 $v1 $v9": "(- $v9 $v9)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_8 (fn_8 #0))",
      "dreamcoder": "#(lambda (#(lambda (concat $0 $0)) (#(lambda (concat $0 $0)) $0)))",
      "arity": 1,
      "name": "fn_11",
      "utility": 202,
      "final_cost": 62451,
      "compression_ratio": 1.0064690717522538,
      "cumulative_compression_ratio": 1.4803285776048423,
      "num_uses": 3,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_11 $inp0": "(fn_8 $v1)"
        },
        {
          "fn_11 $inp0": "(fn_8 $v2)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_3 #2 (fn_2 #1 #0))",
      "dreamcoder": "#(lambda (lambda (lambda (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(int), Any[]) $0 $1))) $0 (#(lambda (lambda (- $0 (- $0 $1)))) $1 $2)))))",
      "arity": 3,
      "name": "fn_12",
      "utility": 200,
      "final_cost": 62047,
      "compression_ratio": 1.0065111931277901,
      "cumulative_compression_ratio": 1.4899672828662143,
      "num_uses": 7,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_12 $v1 $v3 $v1": "(fn_3 $v1 $v6)"
        },
        {
          "fn_12 $v1 $v5 $v3": "(fn_3 $v3 $v8)"
        },
        {
          "fn_12 $v3 $v9 $v7": "(fn_3 $v7 $v12)"
        },
        {
          "fn_12 $v1 $v12 $v7": "(fn_3 $v7 $v14)"
        },
        {
          "fn_12 $v1 $v14 $v9": "(fn_3 $v9 $v16)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(cons (+ (- #2 #1) #1) #0)",
      "dreamcoder": "#(lambda (lambda (lambda (cons (+ (- $0 $1) $1) $2))))",
      "arity": 3,
      "name": "fn_13",
      "utility": 199,
      "final_cost": 61542,
      "compression_ratio": 1.0082057781677554,
      "cumulative_compression_ratio": 1.5021936238666276,
      "num_uses": 21,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_13 $inp0 $v3 $v7": "(cons $v10 $inp0)"
        },
        {
          "fn_13 $v11 $v3 $v7": "(cons $v10 $v11)"
        },
        {
          "fn_13 $v23 $v7 $v1": "(cons $v10 $v23)"
        },
        {
          "fn_13 $v24 $v7 $v1": "(cons $v10 $v24)"
        },
        {
          "fn_13 $v8 $v1 $v7": "(cons $v10 $v8)"
        },
        {
          "fn_13 $inp0 $v1 $v9": "(cons $v12 $inp0)"
        },
        {
          "fn_13 $inp0 $v3 $v9": "(cons $v12 $inp0)"
        },
        {
          "fn_13 $v13 $v1 $v9": "(cons $v12 $v13)"
        },
        {
          "fn_13 $inp0 $v1 $v12": "(cons $v14 $inp0)"
        },
        {
          "fn_13 $inp0 $v2 $v1": "(cons $v5 $inp0)"
        },
        {
          "fn_13 $inp0 $v1 $v3": "(cons $v6 $inp0)"
        },
        {
          "fn_13 $inp0 $v3 $v1": "(cons $v6 $inp0)"
        },
        {
          "fn_13 $v4 $v3 $v1": "(cons $v6 $v4)"
        },
        {
          "fn_13 $inp0 $v5 $v3": "(cons $v7 $inp0)"
        },
        {
          "fn_13 $inp0 $v5 $v3": "(cons $v7 $inp0)"
        },
        {
          "fn_13 $v19 $v1 $v5": "(cons $v8 $v19)"
        },
        {
          "fn_13 $v19 $v3 $v5": "(cons $v8 $v19)"
        },
        {
          "fn_13 $v21 $v1 $v5": "(cons $v8 $v21)"
        },
        {
          "fn_13 $v21 $v1 $v5": "(cons $v8 $v21)"
        },
        {
          "fn_13 $v9 $v1 $v5": "(cons $v8 $v9)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(cdr (cdr #0))",
      "dreamcoder": "#(lambda (cdr (cdr $0)))",
      "arity": 1,
      "name": "fn_14",
      "utility": 101,
      "final_cost": 61239,
      "compression_ratio": 1.0049478273649146,
      "cumulative_compression_ratio": 1.509626218586195,
      "num_uses": 7,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_14 $inp0": "(cdr (cdr $inp0))"
        },
        {
          "fn_14 $v2": "(cdr (cdr $v2))"
        },
        {
          "fn_14 $v4": "(cdr (cdr $v4))"
        },
        {
          "fn_14 $v6": "(cdr (cdr $v6))"
        },
        {
          "fn_14 (cdr $v2)": "(cdr (cdr (cdr $v2)))"
        },
        {
          "fn_14 (cdr $v4)": "(cdr (cdr (cdr $v4)))"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(concat #0 (fn_8 #0))",
      "dreamcoder": "#(lambda (concat $0 (#(lambda (concat $0 $0)) $0)))",
      "arity": 1,
      "name": "fn_15",
      "utility": 100,
      "final_cost": 60936,
      "compression_ratio": 1.004972430090587,
      "cumulative_compression_ratio": 1.517132729421032,
      "num_uses": 9,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_15 $inp0": "(concat $inp0 $v1)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_7 #1 #1 #0)",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (- (+ $0 $1) $2)))) $0 $0 $1)))",
      "arity": 2,
      "name": "fn_16",
      "utility": 99,
      "final_cost": 60734,
      "compression_ratio": 1.0033259788586295,
      "cumulative_compression_ratio": 1.522178680804821,
      "num_uses": 55,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_16 $v11 $v1": "(fn_7 $v1 $v1 $v11)"
        },
        {
          "fn_16 $v12 $v1": "(fn_7 $v1 $v1 $v12)"
        },
        {
          "fn_16 $v12 $v1": "(fn_7 $v1 $v1 $v12)"
        },
        {
          "fn_16 $v12 $v1": "(fn_7 $v1 $v1 $v12)"
        },
        {
          "fn_16 $v12 $v1": "(fn_7 $v1 $v1 $v12)"
        },
        {
          "fn_16 $v14 $v1": "(fn_7 $v1 $v1 $v14)"
        },
        {
          "fn_16 $v14 $v1": "(fn_7 $v1 $v1 $v14)"
        },
        {
          "fn_16 $v3 $v1": "(fn_7 $v1 $v1 $v3)"
        },
        {
          "fn_16 $v5 $v1": "(fn_7 $v1 $v1 $v5)"
        },
        {
          "fn_16 $v7 $v1": "(fn_7 $v1 $v1 $v7)"
        },
        {
          "fn_16 $v9 $v1": "(fn_7 $v1 $v1 $v9)"
        },
        {
          "fn_16 $inp0 $v2": "(fn_7 $v2 $v2 $inp0)"
        },
        {
          "fn_16 $v1 $v3": "(fn_7 $v3 $v3 $v1)"
        },
        {
          "fn_16 $v1 $v3": "(fn_7 $v3 $v3 $v1)"
        },
        {
          "fn_16 $v5 $v3": "(fn_7 $v3 $v3 $v5)"
        },
        {
          "fn_16 $v7 $v3": "(fn_7 $v3 $v3 $v7)"
        },
        {
          "fn_16 $v9 $v3": "(fn_7 $v3 $v3 $v9)"
        },
        {
          "fn_16 $v9 $v5": "(fn_7 $v5 $v5 $v9)"
        },
        {
          "fn_16 $v3 $v6": "(fn_7 $v6 $v6 $v3)"
        },
        {
          "fn_16 $v9 $v7": "(fn_7 $v7 $v7 $v9)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(cons #0 (#2 (fn_16 #1 #0)))",
      "dreamcoder": "#(lambda (lambda (lambda (cons $2 ($0 (#(lambda (lambda (#(lambda (lambda (lambda (- (+ $0 $1) $2)))) $0 $0 $1))) $1 $2))))))",
      "arity": 3,
      "name": "fn_17",
      "utility": 97,
      "final_cost": 60432,
      "compression_ratio": 1.0049973523960816,
      "cumulative_compression_ratio": 1.5297855440826051,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_17 $v1 $v5 (fn_3 $v3)": "(cons $v1 $v11)"
        },
        {
          "fn_17 $v1 $v3 (fn_0 $v10 $v14)": "(cons $v1 $v16)"
        }
      ],
      "dc_comparison_millis": null
    }
  ]
}
