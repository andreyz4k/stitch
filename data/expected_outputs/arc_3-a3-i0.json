{
  "original_cost": 39268,
  "final_cost": 32602,
  "compression_ratio": 1.2044659836819827,
  "num_abstractions": 8,
  "original": [
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v2 = (dreamcoder_abstraction_0 $v3)) in let $v4 = (dreamcoder_abstraction_5 $v3) in let $v5 = (rows $v4) in (dreamcoder_abstraction_5 $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v5 $v4 $v2)) in let $v7 = (dreamcoder_abstraction_3 $v5 $v2 $v4) in (dreamcoder_abstraction_0 $v7)",
    "let $v1 = Const(list(list(color)), Any[Any[0, 0, 0]]) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = (dreamcoder_abstraction_3 $v1 $v3 $v6) in (dreamcoder_abstraction_0 $v7)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v6 $v5 $v3)) in let $v7 = Const(list(list(color)), Any[]) in let $v9 = (dreamcoder_abstraction_3 $v7 $v5 $v3) in (dreamcoder_abstraction_2 $v9 $v1)",
    "let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v4, $v6, $v7 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = Const(list(list(color)), Any[]) in let $v10 = (dreamcoder_abstraction_3 $v8 $v4 $v2) in (dreamcoder_abstraction_2 $v10 $v6)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v6 $v5 $v3)) in let $v7 = empty in let $v9 = (dreamcoder_abstraction_3 $v7 $v5 $v3) in (dreamcoder_abstraction_2 $v9 $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v5 $v4 $v2)) in let $v6 = Const(list(list(color)), Any[]) in let $v8 = (dreamcoder_abstraction_3 $v6 $v4 $v2) in let $v9 = (concat $v5 $v8) in (rows_to_grid $v9)",
    "let $v1 = Const(list(list(color)), Vector{Any}[[0, 0, 0]]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v6 $v5 $v3)) in let $v7 = Const(list(list(color)), Any[]) in let $v9 = (dreamcoder_abstraction_3 $v7 $v5 $v3) in let $v10 = (concat $v1 $v9) in (rows_to_grid $v10)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v6 $v5 $v3)) in let $v7 = empty_set in let $v8 = (collect $v7) in let $v10 = (dreamcoder_abstraction_3 $v8 $v5 $v3) in (dreamcoder_abstraction_2 $v10 $v1)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6 = (dreamcoder_abstraction_3 $v3 $v5 $v2) in let $v7 = (cons $v4 $v6) in (rows_to_grid $v7)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6 = Const(list(list(color)), Any[]) in let $v7 = (dreamcoder_abstraction_3 $v6 $v5 $v2) in let $v8 = (cons $v4 $v7) in (rows_to_grid $v8)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in $v2",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3, $v2 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = Const(int, 3) in let $v5 = (rev_list_elements $v2 $v4) in (dreamcoder_abstraction_0 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5 = (dreamcoder_abstraction_3 $v2 $v3 $v4) in (dreamcoder_abstraction_0 $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (rows $v4)) in let $v5 = (tuple2 $v2 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in (dreamcoder_abstraction_1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in $v2",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Any[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = empty in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = empty in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3, $v4, $v5 = rev($v2 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = (tuple2 $v1 $v8) in let $v10 = (tuple2_second $v9) in let $v11 = Const(list(color), Any[]) in let $v12 = (cons $v10 $v11) in let $v13, $v14 = rev($inp0 = (dreamcoder_abstraction_2 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v22 = (tuple2_second $v21) in let $v23 = (tuple2_second $v21) in let $v24 = (tuple2 $v22 $v23) in let $v25 = (tuple2_second $v24) in let $v26 = (dreamcoder_abstraction_3 $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v30 = rev($inp0 = (dreamcoder_abstraction_0 $v30)) in let $v31, $v32, $v33 = rev($v30 = (dreamcoder_abstraction_3 $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (dreamcoder_abstraction_3 $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (dreamcoder_abstraction_3 $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (dreamcoder_abstraction_3 $v40 $v41 $v42)) in let $v43 = rev($v39 = (tuple2_second $v43)) in let $v44 = (tuple2 $v41 $v43) in let $v45 = (tuple2_first $v44) in let $v46 = Const(color, 0) in let $v47 = (dreamcoder_abstraction_3 $v29 $v45 $v46) in let $v48, $v49, $v50 = rev($v33 = (dreamcoder_abstraction_3 $v48 $v49 $v50)) in let $v51, $v52, $v53 = rev($v48 = (dreamcoder_abstraction_3 $v51 $v52 $v53)) in let $v54, $v55, $v56 = rev($v51 = (dreamcoder_abstraction_3 $v54 $v55 $v56)) in let $v57, $v58, $v59 = rev($v54 = (dreamcoder_abstraction_3 $v57 $v58 $v59)) in let $v60 = Const(list(color), Any[]) in let $v61 = (cons $v58 $v60) in let $v62, $v63, $v64 = rev($v32 = (dreamcoder_abstraction_3 $v62 $v63 $v64)) in let $v65, $v66, $v67 = rev($v62 = (dreamcoder_abstraction_3 $v65 $v66 $v67)) in let $v68 = (dreamcoder_abstraction_3 $v61 $v66 $v50) in let $v69 = (dreamcoder_abstraction_3 $v28 $v47 $v68) in (dreamcoder_abstraction_0 $v69)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3, $v4, $v5 = rev($v2 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = (tuple2 $v1 $v8) in let $v10 = (tuple2_second $v9) in let $v11 = Const(list(color), Any[]) in let $v12 = (cons $v10 $v11) in let $v13, $v14 = rev($inp0 = (dreamcoder_abstraction_2 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v22 = (tuple2_second $v21) in let $v23 = (tuple2_second $v21) in let $v24 = (tuple2 $v22 $v23) in let $v25 = (tuple2_second $v24) in let $v26 = (dreamcoder_abstraction_3 $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v30 = rev($inp0 = (dreamcoder_abstraction_0 $v30)) in let $v31, $v32, $v33 = rev($v30 = (dreamcoder_abstraction_3 $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (dreamcoder_abstraction_3 $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (dreamcoder_abstraction_3 $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (dreamcoder_abstraction_3 $v40 $v41 $v42)) in let $v43 = Const(color, 0) in let $v44 = (dreamcoder_abstraction_3 $v29 $v41 $v43) in let $v45, $v46, $v47 = rev($v33 = (dreamcoder_abstraction_3 $v45 $v46 $v47)) in let $v48, $v49, $v50 = rev($v45 = (dreamcoder_abstraction_3 $v48 $v49 $v50)) in let $v51, $v52, $v53 = rev($v48 = (dreamcoder_abstraction_3 $v51 $v52 $v53)) in let $v54, $v55, $v56 = rev($v51 = (dreamcoder_abstraction_3 $v54 $v55 $v56)) in let $v57 = Const(list(color), Any[]) in let $v58 = (cons $v55 $v57) in let $v59, $v60, $v61 = rev($v32 = (dreamcoder_abstraction_3 $v59 $v60 $v61)) in let $v62, $v63, $v64 = rev($v59 = (dreamcoder_abstraction_3 $v62 $v63 $v64)) in let $v65 = rev($v60 = (tuple2_first $v65)) in let $v66 = (tuple2 $v65 $v50) in let $v67 = (tuple2_second $v66) in let $v68 = (dreamcoder_abstraction_3 $v58 $v63 $v67) in let $v69 = (dreamcoder_abstraction_3 $v28 $v44 $v68) in (dreamcoder_abstraction_0 $v69)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3, $v4, $v5 = rev($v2 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = (tuple2 $v1 $v8) in let $v10 = (tuple2_second $v9) in let $v11 = Const(list(color), Any[]) in let $v12 = (cons $v10 $v11) in let $v13, $v14 = rev($inp0 = (dreamcoder_abstraction_2 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v22 = (tuple2_second $v21) in let $v23 = (tuple2_second $v21) in let $v24 = (tuple2 $v22 $v23) in let $v25 = (tuple2_second $v24) in let $v26 = (dreamcoder_abstraction_3 $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v30 = rev($inp0 = (dreamcoder_abstraction_0 $v30)) in let $v31, $v32, $v33 = rev($v30 = (dreamcoder_abstraction_3 $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (dreamcoder_abstraction_3 $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (dreamcoder_abstraction_3 $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (dreamcoder_abstraction_3 $v40 $v41 $v42)) in let $v43, $v44, $v45 = rev($v36 = (dreamcoder_abstraction_3 $v43 $v44 $v45)) in let $v46 = (tuple2 $v41 $v43) in let $v47 = (tuple2_first $v46) in let $v48 = Const(color, 0) in let $v49 = (dreamcoder_abstraction_3 $v29 $v47 $v48) in let $v50, $v51, $v52 = rev($v33 = (dreamcoder_abstraction_3 $v50 $v51 $v52)) in let $v53, $v54, $v55 = rev($v50 = (dreamcoder_abstraction_3 $v53 $v54 $v55)) in let $v56, $v57, $v58 = rev($v53 = (dreamcoder_abstraction_3 $v56 $v57 $v58)) in let $v59, $v60, $v61 = rev($v56 = (dreamcoder_abstraction_3 $v59 $v60 $v61)) in let $v62 = Const(list(color), Any[]) in let $v63 = (cons $v60 $v62) in let $v64, $v65, $v66 = rev($v32 = (dreamcoder_abstraction_3 $v64 $v65 $v66)) in let $v67, $v68, $v69 = rev($v64 = (dreamcoder_abstraction_3 $v67 $v68 $v69)) in let $v70 = (dreamcoder_abstraction_3 $v63 $v68 $v52) in let $v71 = (dreamcoder_abstraction_3 $v28 $v49 $v70) in (dreamcoder_abstraction_0 $v71)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in (dreamcoder_abstraction_1 $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_0 $v1) in let $v3 = (columns $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3, $v4 = rev($v2 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5 = (cons $v4 $v3) in (dreamcoder_abstraction_0 $v5)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in let $v6 = (dreamcoder_abstraction_0 $v4) in let $v7 = (columns $v6) in (rows_to_grid $v7)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4, $v5 = rev($v3 = (dreamcoder_abstraction_2 $v4 $v5)) in let $v6 = (cons $v5 $v4) in (dreamcoder_abstraction_4 $v1 $v6)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in let $v4 = (dreamcoder_abstraction_0 $v3) in let $v5 = (columns $v4) in let $v6 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v5 $v6)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in $v2",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3 = (dreamcoder_abstraction_1 $v1) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3 = (cons $v2 $v1) in (dreamcoder_abstraction_0 $v3)",
    "let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v4 = (cons $v2 $v3) in (dreamcoder_abstraction_0 $v4)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v3, $v2 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (rows_to_grid $v4)) in (dreamcoder_abstraction_0 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (tuple2 $v2 $v2) in (tuple2_first $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v1 = (columns $v3)) in let $v4 = (tuple2 $v2 $v3) in (tuple2_first $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_5 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (dreamcoder_abstraction_5 $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_4 $v1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (dreamcoder_abstraction_5 $v2)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3 = (concat $v1 $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_0 $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_5 $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in (dreamcoder_abstraction_5 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = (reverse $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v2 = rev($v1 = (cons $v2 $v3)) in let $v4, $v6, $v7 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = rev($v1 = (reverse $v8)) in let $v10 = (dreamcoder_abstraction_3 $v8 $v6 $v4) in (dreamcoder_abstraction_2 $v10 $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = rev($v6 = (tuple2_second $v7)) in let $v8 = (tuple2_second $v7) in let $v9 = (dreamcoder_abstraction_3 $v1 $v5 $v8) in (dreamcoder_abstraction_2 $v9 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v2 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v2 = (reverse $v4)) in let $v5 = (reverse $v4) in let $v6, $v8, $v9 = rev($v3 = (dreamcoder_abstraction_3 $v9 $v8 $v6)) in let $v10 = rev($v1 = (reverse $v10)) in let $v12 = (dreamcoder_abstraction_3 $v10 $v8 $v6) in (dreamcoder_abstraction_2 $v12 $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10 = (dreamcoder_abstraction_3 $v7 $v8 $v9) in let $v11 = (dreamcoder_abstraction_3 $v1 $v5 $v10) in (dreamcoder_abstraction_2 $v11 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v2 = rev($v1 = (cons $v2 $v3)) in let $v4, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v8 $v7 $v4)) in let $v6 = Const(int, 6) in let $v9 = (tuple2 $v6 $v7) in let $v10 = (tuple2_second $v9) in let $v11 = rev($v1 = (reverse $v11)) in let $v13 = (dreamcoder_abstraction_3 $v11 $v10 $v4) in (dreamcoder_abstraction_2 $v13 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v2 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v3 = (rows $v4)) in let $v5 = (tuple2 $v4 $v2) in let $v6 = (tuple2_second $v5) in let $v7, $v9, $v10 = rev($v3 = (dreamcoder_abstraction_3 $v10 $v9 $v7)) in let $v11 = rev($v1 = (reverse $v11)) in let $v13 = (dreamcoder_abstraction_3 $v11 $v9 $v7) in (dreamcoder_abstraction_2 $v13 $v6)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10 = rev($v8 = (tuple2_second $v10)) in let $v11 = (tuple2_second $v10) in let $v12 = (dreamcoder_abstraction_3 $v7 $v11 $v9) in let $v13 = (dreamcoder_abstraction_3 $v1 $v5 $v12) in (dreamcoder_abstraction_2 $v13 $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v5, $v4 = rev($v3 = (cons $v4 $v5)) in let $v6 = (tuple2 $v2 $v4) in let $v7 = (tuple2_second $v6) in let $v8, $v10, $v11 = rev($v5 = (dreamcoder_abstraction_3 $v11 $v10 $v8)) in let $v12 = rev($v3 = (reverse $v12)) in let $v14 = (dreamcoder_abstraction_3 $v12 $v10 $v8) in (dreamcoder_abstraction_2 $v14 $v7)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v5, $v4 = rev($v3 = (cons $v4 $v5)) in let $v6 = (tuple2 $v2 $v4) in let $v7 = (tuple2_second $v6) in let $v8, $v10, $v11 = rev($v5 = (dreamcoder_abstraction_3 $v11 $v10 $v8)) in let $v12 = rev($v3 = (reverse $v12)) in let $v14 = (dreamcoder_abstraction_3 $v12 $v10 $v8) in (dreamcoder_abstraction_2 $v14 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v2 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = (tuple2_first $v4) in let $v6, $v9, $v10 = rev($v3 = (dreamcoder_abstraction_3 $v10 $v9 $v6)) in let $v8 = Const(int, 6) in let $v11 = (tuple2 $v8 $v9) in let $v12 = (tuple2_second $v11) in let $v13 = rev($v1 = (reverse $v13)) in let $v15 = (dreamcoder_abstraction_3 $v13 $v12 $v6) in (dreamcoder_abstraction_2 $v15 $v5)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = rev($inp0 = (dreamcoder_abstraction_0 $v9)) in let $v10, $v11, $v12 = rev($v9 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in (dreamcoder_abstraction_2 $v20 $v12)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in (dreamcoder_abstraction_2 $v23 $v4)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = rev($inp0 = (dreamcoder_abstraction_0 $v9)) in let $v10, $v11, $v12 = rev($v9 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in let $v21, $v22 = rev($v9 = (cons $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (dreamcoder_abstraction_3 $v23 $v24 $v25)) in let $v26, $v27 = rev($v12 = (cons $v26 $v27)) in let $v28 = (cons $v25 $v27) in (dreamcoder_abstraction_2 $v20 $v28)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, -6) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, -6) in let $v30 = (tuple2 $v29 $v28) in let $v31 = (tuple2_second $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, 14) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, 14) in let $v30 = (tuple2 $v29 $v28) in let $v31 = (tuple2_second $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(list(list(color)), Vector{Any}[]) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = rev($inp0 = (dreamcoder_abstraction_0 $v9)) in let $v10, $v11, $v12 = rev($v9 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in let $v21 = rev($v2 = (tuple2_first $v21)) in let $v22, $v23, $v24 = rev($v12 = (dreamcoder_abstraction_3 $v22 $v23 $v24)) in let $v25 = rev($v24 = (tuple2_second $v25)) in let $v26 = (tuple2 $v21 $v25) in let $v27 = (tuple2_second $v26) in let $v28 = (tuple2_second $v27) in let $v29 = rev($v12 = (tuple2_second $v29)) in let $v30 = (tuple2_second $v29) in let $v31 = (tuple2 $v28 $v30) in let $v32 = (tuple2_second $v31) in (dreamcoder_abstraction_2 $v20 $v32)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = rev($inp0 = (dreamcoder_abstraction_0 $v9)) in let $v10, $v11, $v12 = rev($v9 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in let $v21 = rev($v10 = (tuple2_first $v21)) in let $v22, $v23, $v24 = rev($v12 = (dreamcoder_abstraction_3 $v22 $v23 $v24)) in let $v25 = rev($v24 = (tuple2_second $v25)) in let $v26 = (tuple2 $v21 $v25) in let $v27 = (tuple2_second $v26) in let $v28 = (tuple2_second $v27) in let $v29 = rev($v12 = (tuple2_second $v29)) in let $v30 = (tuple2_second $v29) in let $v31 = (tuple2 $v28 $v30) in let $v32 = (tuple2_second $v31) in (dreamcoder_abstraction_2 $v20 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v2 = (dreamcoder_abstraction_0 $v3)) in let $v4 = (dreamcoder_abstraction_5 $v3) in let $v5 = (rows $v4) in (dreamcoder_abstraction_5 $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v2 = (dreamcoder_abstraction_0 $v3)) in let $v4 = (dreamcoder_abstraction_4 $v3 $v3) in let $v5 = (rows $v4) in (dreamcoder_abstraction_5 $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v2 = (dreamcoder_abstraction_0 $v3)) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v2 = (rows_to_grid $v3)) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v2 = (dreamcoder_abstraction_1 $v3)) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in (dreamcoder_abstraction_1 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = (columns_to_grid $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_1 $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in (dreamcoder_abstraction_4 $v1 $v4)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (dreamcoder_abstraction_4 $v1 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_5 $v1)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_4 $v1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (dreamcoder_abstraction_5 $v2)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3 = rev($v2 = (tuple2_second $v3)) in let $v4 = (tuple2_second $v3) in (dreamcoder_abstraction_5 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (rows_to_grid $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_5 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_0 $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_5 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = (reverse $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($inp0 = (dreamcoder_abstraction_1 $v3)) in (dreamcoder_abstraction_4 $v2 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (reverse $v1) in (dreamcoder_abstraction_4 $v2 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2, $v3 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = Const(int, 3) in let $v5 = (rev_list_elements $v2 $v4) in (dreamcoder_abstraction_5 $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = (dreamcoder_abstraction_3 $v1 $v3 $v6) in (dreamcoder_abstraction_2 $v7 $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v4, $v3 = rev($v2 = (cons $v3 $v4)) in let $v5, $v7, $v8 = rev($v1 = (dreamcoder_abstraction_3 $v8 $v7 $v5)) in let $v10 = (dreamcoder_abstraction_3 $v1 $v5 $v7) in (dreamcoder_abstraction_2 $v10 $v3)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($inp0 = (tuple2_first $v3)) in let $v5, $v4 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = rev($v4 = (tuple2_first $v6)) in let $v7 = rev($v6 = (tuple2_first $v7)) in let $v9, $v8 = rev($v7 = (tuple2 $v8 $v9)) in let $v11, $v10 = rev($v8 = (tuple2 $v10 $v11)) in let $v12 = rev($v10 = (rows_to_grid $v12)) in let $v13 = (concat $v2 $v12) in (rows_to_grid $v13)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v4, $v3 = rev($v2 = (cons $v3 $v4)) in let $v5 = rev($v3 = (reverse $v5)) in let $v6 = (reverse $v5) in let $v7, $v9, $v10 = rev($v1 = (dreamcoder_abstraction_3 $v10 $v9 $v7)) in let $v12 = (dreamcoder_abstraction_3 $v1 $v7 $v9) in (dreamcoder_abstraction_2 $v12 $v6)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v3, $v2 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = rev($v4 = (tuple2_first $v5)) in let $v7, $v6 = rev($v5 = (tuple2 $v6 $v7)) in let $v9, $v8 = rev($v6 = (tuple2 $v8 $v9)) in let $v10 = rev($v8 = (rows_to_grid $v10)) in let $v11 = (reverse $v10) in let $v12 = (concat $v11 $v10) in (rows_to_grid $v12)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = (dreamcoder_abstraction_3 $v4 $v5 $v6) in let $v8, $v9, $v10 = rev($v2 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (dreamcoder_abstraction_3 $v1 $v7 $v10) in (dreamcoder_abstraction_2 $v11 $v9)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v4, $v3 = rev($v2 = (cons $v3 $v4)) in let $v5, $v7, $v8 = rev($v1 = (dreamcoder_abstraction_3 $v8 $v7 $v5)) in let $v10, $v9 = rev($v5 = (cons $v9 $v10)) in let $v11 = (cons $v9 $v10) in let $v13 = (dreamcoder_abstraction_3 $v1 $v11 $v7) in (dreamcoder_abstraction_2 $v13 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v4, $v3 = rev($v2 = (cons $v3 $v4)) in let $v6, $v5 = rev($v3 = (cons $v5 $v6)) in let $v7 = (cons $v5 $v6) in let $v8, $v10, $v11 = rev($v1 = (dreamcoder_abstraction_3 $v11 $v10 $v8)) in let $v13 = (dreamcoder_abstraction_3 $v1 $v8 $v10) in (dreamcoder_abstraction_2 $v13 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($v3 = (cons $v7 $v8)) in let $v9 = (cons $v6 $v8) in let $v10, $v11, $v12 = rev($v2 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13 = (dreamcoder_abstraction_3 $v1 $v9 $v12) in (dreamcoder_abstraction_2 $v13 $v11)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = rev($v6 = (tuple2_first $v7)) in let $v8 = (tuple2_first $v7) in let $v9 = (dreamcoder_abstraction_3 $v4 $v5 $v8) in let $v10, $v11, $v12 = rev($v2 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13 = (dreamcoder_abstraction_3 $v1 $v9 $v12) in (dreamcoder_abstraction_2 $v13 $v11)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8 = (dreamcoder_abstraction_3 $v2 $v6 $v7) in let $v9 = Const(list(color), Any[]) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11, $v12, $v13 = rev($v10 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14, $v15, $v16 = rev($v12 = (dreamcoder_abstraction_3 $v14 $v15 $v16)) in let $v17, $v18, $v19 = rev($v5 = (dreamcoder_abstraction_3 $v17 $v18 $v19)) in let $v20 = (dreamcoder_abstraction_3 $v9 $v15 $v19) in let $v21 = (dreamcoder_abstraction_3 $v1 $v8 $v20) in (dreamcoder_abstraction_0 $v21)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8 = (dreamcoder_abstraction_3 $v2 $v6 $v7) in let $v9 = Const(list(color), Any[]) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11, $v12, $v13 = rev($v10 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14, $v15, $v16 = rev($v12 = (dreamcoder_abstraction_3 $v14 $v15 $v16)) in let $v17, $v18, $v19 = rev($v5 = (dreamcoder_abstraction_3 $v17 $v18 $v19)) in let $v20 = (tuple2 $v19 $v6) in let $v21 = (tuple2_first $v20) in let $v22 = (dreamcoder_abstraction_3 $v9 $v15 $v21) in let $v23 = (dreamcoder_abstraction_3 $v1 $v8 $v22) in (dreamcoder_abstraction_0 $v23)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (tuple2 $v10 $v6) in let $v12 = (tuple2_second $v11) in let $v13 = (dreamcoder_abstraction_3 $v2 $v12 $v7) in let $v14 = Const(list(color), Any[]) in let $v15 = rev($inp0 = (rows_to_grid $v15)) in let $v16, $v17, $v18 = rev($v15 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v14 $v20 $v10) in let $v23 = (dreamcoder_abstraction_3 $v1 $v13 $v22) in (dreamcoder_abstraction_0 $v23)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (tuple2 $v8 $v6) in let $v12 = (tuple2_second $v11) in let $v13 = (dreamcoder_abstraction_3 $v2 $v12 $v7) in let $v14 = Const(list(color), Any[]) in let $v15 = rev($inp0 = (rows_to_grid $v15)) in let $v16, $v17, $v18 = rev($v15 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v14 $v20 $v10) in let $v23 = (dreamcoder_abstraction_3 $v1 $v13 $v22) in (dreamcoder_abstraction_0 $v23)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (tuple2 $v9 $v6) in let $v12 = (tuple2_second $v11) in let $v13 = (dreamcoder_abstraction_3 $v2 $v12 $v7) in let $v14 = Const(list(color), Any[]) in let $v15 = rev($inp0 = (rows_to_grid $v15)) in let $v16, $v17, $v18 = rev($v15 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v14 $v20 $v10) in let $v23 = (dreamcoder_abstraction_3 $v1 $v13 $v22) in (dreamcoder_abstraction_0 $v23)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v3 = Const(list(color), Any[]) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (dreamcoder_abstraction_3 $v3 $v10 $v15) in let $v17, $v18 = rev($inp0 = (dreamcoder_abstraction_2 $v17 $v18)) in let $v19, $v20, $v21 = rev($v18 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = rev($v20 = (tuple2_second $v22)) in let $v23 = (tuple2_second $v22) in let $v24 = (dreamcoder_abstraction_3 $v3 $v9 $v23) in let $v25 = (dreamcoder_abstraction_3 $v2 $v16 $v24) in (dreamcoder_abstraction_4 $v1 $v25)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v3 = Const(list(color), Any[]) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (dreamcoder_abstraction_3 $v3 $v10 $v15) in let $v17 = Const(list(color), Any[]) in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (dreamcoder_abstraction_3 $v17 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v3 = Const(list(color), Any[]) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (dreamcoder_abstraction_3 $v3 $v10 $v15) in let $v17 = empty in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (dreamcoder_abstraction_3 $v17 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v3 = empty in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (dreamcoder_abstraction_3 $v3 $v10 $v15) in let $v17 = Const(list(color), Any[]) in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (dreamcoder_abstraction_3 $v17 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = empty in let $v3 = Const(list(color), Any[]) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (dreamcoder_abstraction_3 $v3 $v10 $v15) in let $v17 = Const(list(color), Any[]) in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (dreamcoder_abstraction_3 $v17 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (dreamcoder_abstraction_1 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (rows_to_grid $v1) in let $v3 = (rows $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_0 $v1) in let $v3 = (rows $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3, $v2 = rev($v1 = (cons $v2 $v3)) in let $v4 = (cons $v2 $v3) in (dreamcoder_abstraction_1 $v4)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (reverse $v1) in (dreamcoder_abstraction_4 $v2 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in (dreamcoder_abstraction_4 $v3 $v2)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3 = (reverse $v2) in let $v4 = (concat $v1 $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in let $v4 = (concat $v1 $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in let $v5 = (concat $v4 $v4) in (dreamcoder_abstraction_1 $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($inp0 = (columns_to_grid $v3)) in let $v4 = rev($v3 = (reverse $v4)) in (dreamcoder_abstraction_4 $v2 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in (dreamcoder_abstraction_1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_1 $v2)",
    "let $v1 = (rows $inp0) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = empty in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = empty in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v15 $v18 $v9) in (dreamcoder_abstraction_0 $v19)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = Const(color, 0) in let $v20 = (tuple2 $v9 $v19) in let $v21 = (tuple2_first $v20) in let $v22 = (dreamcoder_abstraction_3 $v15 $v18 $v21) in (dreamcoder_abstraction_0 $v22)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = (dreamcoder_abstraction_3 $v19 $v22 $v9) in (dreamcoder_abstraction_0 $v23)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = rev($v3 = (tuple2_second $v19)) in let $v20, $v21 = rev($v19 = (tuple2 $v20 $v21)) in let $v22 = (tuple2 $v9 $v21) in let $v23 = (tuple2_first $v22) in let $v24 = (dreamcoder_abstraction_3 $v15 $v18 $v23) in (dreamcoder_abstraction_0 $v24)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = Const(color, 0) in let $v24 = (tuple2 $v9 $v23) in let $v25 = (tuple2_first $v24) in let $v26 = (dreamcoder_abstraction_3 $v19 $v22 $v25) in (dreamcoder_abstraction_0 $v26)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16 = rev($inp0 = (dreamcoder_abstraction_1 $v16)) in let $v17, $v18, $v19 = rev($v16 = (dreamcoder_abstraction_3 $v17 $v18 $v19)) in let $v20, $v21, $v22 = rev($v18 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($inp0 = (rows_to_grid $v23)) in let $v24, $v25, $v26 = rev($v23 = (dreamcoder_abstraction_3 $v24 $v25 $v26)) in let $v27, $v28 = rev($v25 = (cons $v27 $v28)) in let $v29 = (cons $v21 $v28) in let $v30 = (dreamcoder_abstraction_3 $v15 $v29 $v9) in (dreamcoder_abstraction_0 $v30)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v3 = (tuple2_second $v23)) in let $v24, $v25 = rev($v23 = (tuple2 $v24 $v25)) in let $v26 = (tuple2 $v9 $v25) in let $v27 = (tuple2_first $v26) in let $v28 = (dreamcoder_abstraction_3 $v19 $v22 $v27) in (dreamcoder_abstraction_0 $v28)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($inp0 = (dreamcoder_abstraction_2 $v7 $v8)) in let $v9, $v10 = rev($v8 = (rev_list_elements $v9 $v10)) in let $v11 = rev($v10 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v5 $v12) in let $v14 = rev($inp0 = (tuple2_second $v14)) in let $v15, $v16 = rev($v14 = (tuple2 $v15 $v16)) in let $v17, $v18 = rev($v16 = (dreamcoder_abstraction_2 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = rev($inp0 = (dreamcoder_abstraction_0 $v22)) in let $v23 = rev($v22 = (rows $v23)) in let $v24, $v25 = rev($v23 = (dreamcoder_abstraction_2 $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = (cons $v20 $v26) in let $v30 = (cons $v13 $v29) in let $v31 = rev($v8 = (tuple2_first $v31)) in let $v32 = (tuple2_first $v31) in (dreamcoder_abstraction_2 $v30 $v32)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($inp0 = (dreamcoder_abstraction_2 $v7 $v8)) in let $v9, $v10 = rev($v8 = (rev_list_elements $v9 $v10)) in let $v11 = rev($v10 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v5 $v12) in let $v14 = rev($inp0 = (tuple2_second $v14)) in let $v15, $v16 = rev($v14 = (tuple2 $v15 $v16)) in let $v17, $v18 = rev($v16 = (dreamcoder_abstraction_2 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = rev($inp0 = (dreamcoder_abstraction_0 $v22)) in let $v23 = rev($v22 = (rows $v23)) in let $v24, $v25 = rev($v23 = (dreamcoder_abstraction_2 $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = (cons $v20 $v26) in let $v30 = (cons $v13 $v29) in let $v31 = rev($v8 = (tuple2_second $v31)) in let $v32 = (tuple2_second $v31) in (dreamcoder_abstraction_2 $v30 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20 = rev($inp0 = (dreamcoder_abstraction_1 $v20)) in let $v21, $v22, $v23 = rev($v20 = (dreamcoder_abstraction_3 $v21 $v22 $v23)) in let $v24, $v25, $v26 = rev($v22 = (dreamcoder_abstraction_3 $v24 $v25 $v26)) in let $v27 = rev($inp0 = (rows_to_grid $v27)) in let $v28, $v29, $v30 = rev($v27 = (dreamcoder_abstraction_3 $v28 $v29 $v30)) in let $v31, $v32 = rev($v29 = (cons $v31 $v32)) in let $v33 = (cons $v25 $v32) in let $v34 = (dreamcoder_abstraction_3 $v19 $v33 $v9) in (dreamcoder_abstraction_0 $v34)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = rev($inp0 = (dreamcoder_abstraction_0 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (dreamcoder_abstraction_3 $v2 $v9 $v17) in let $v19 = (cons $v16 $v8) in let $v20 = (dreamcoder_abstraction_3 $v1 $v18 $v19) in (rows_to_grid $v20)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = empty in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = rev($inp0 = (dreamcoder_abstraction_0 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (dreamcoder_abstraction_3 $v2 $v9 $v17) in let $v19 = (cons $v16 $v8) in let $v20 = (dreamcoder_abstraction_3 $v1 $v18 $v19) in (rows_to_grid $v20)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = Const(list(list(color)), Vector{Any}[]) in let $v13 = (cons $v11 $v12) in let $v14 = rev($inp0 = (rows_to_grid $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = Const(list(color), Any[]) in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = Const(list(list(color)), Vector{Any}[]) in let $v13 = (cons $v11 $v12) in let $v14 = rev($inp0 = (rows_to_grid $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = empty in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty in let $v13 = (cons $v11 $v12) in let $v14 = rev($inp0 = (rows_to_grid $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = Const(list(color), Any[]) in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty in let $v13 = (cons $v11 $v12) in let $v14 = rev($inp0 = (rows_to_grid $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = empty in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty_set in let $v13 = (collect $v12) in let $v14 = (cons $v11 $v13) in let $v15 = rev($inp0 = (rows_to_grid $v15)) in let $v16, $v17, $v18 = rev($v15 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = empty in let $v23 = (cons $v21 $v22) in let $v24 = (cons $v20 $v23) in (dreamcoder_abstraction_2 $v14 $v24)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = rev($inp0 = (dreamcoder_abstraction_0 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (dreamcoder_abstraction_3 $v2 $v9 $v17) in let $v19 = rev($inp0 = (rows_to_grid $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (dreamcoder_abstraction_3 $v23 $v24 $v25)) in let $v26 = (cons $v24 $v8) in let $v27 = (dreamcoder_abstraction_3 $v1 $v18 $v26) in (rows_to_grid $v27)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = Const(list(color), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = rev($inp0 = (dreamcoder_abstraction_0 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (dreamcoder_abstraction_3 $v2 $v9 $v17) in let $v19 = rev($inp0 = (rows_to_grid $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (dreamcoder_abstraction_3 $v23 $v24 $v25)) in let $v26 = rev($v24 = (tuple2_second $v26)) in let $v27 = (tuple2_second $v26) in let $v28 = (cons $v27 $v8) in let $v29 = (dreamcoder_abstraction_3 $v1 $v18 $v28) in (rows_to_grid $v29)",
    "let $v1 = empty_set in let $v2 = (collect $v1) in let $v3 = Const(list(color), Any[]) in let $v4, $v5 = rev($inp0 = (dreamcoder_abstraction_2 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9, $v10, $v11 = rev($v6 = (dreamcoder_abstraction_3 $v9 $v10 $v11)) in let $v12 = rev($inp0 = (dreamcoder_abstraction_0 $v12)) in let $v13, $v14, $v15 = rev($v12 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v15 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v3 $v10 $v18) in let $v20 = rev($inp0 = (rows_to_grid $v20)) in let $v21, $v22, $v23 = rev($v20 = (dreamcoder_abstraction_3 $v21 $v22 $v23)) in let $v24, $v25, $v26 = rev($v22 = (dreamcoder_abstraction_3 $v24 $v25 $v26)) in let $v27 = (cons $v25 $v9) in let $v28 = (dreamcoder_abstraction_3 $v2 $v19 $v27) in (rows_to_grid $v28)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = (concat $v1 $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($inp0 = (tuple2_second $v2)) in let $v4, $v3 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = rev($v4 = (rows_to_grid $v5)) in let $v6 = (reverse $v5) in let $v7 = (concat $v1 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v4, $v3 = rev($v2 = (tuple2 $v3 $v4)) in let $v6, $v5 = rev($v3 = (tuple2 $v5 $v6)) in let $v7 = rev($v5 = (rows_to_grid $v7)) in let $v8 = rev($inp0 = (columns_to_grid $v8)) in let $v9 = rev($v8 = (rows $v9)) in let $v11 = rev($v9 = (dreamcoder_abstraction_1 $v11)) in let $v12 = (concat $v7 $v11) in (rows_to_grid $v12)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (cons $v7 $v8) in let $v10 = (dreamcoder_abstraction_3 $v1 $v5 $v9) in (dreamcoder_abstraction_2 $v10 $v3)",
    "let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v4, $v6, $v7 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = rev($v2 = (tuple2_second $v8)) in let $v9 = (tuple2_second $v8) in let $v10 = Const(list(list(color)), Any[]) in let $v12 = (dreamcoder_abstraction_3 $v10 $v9 $v4) in let $v13 = (cons $v6 $v12) in let $v14 = (concat $v1 $v13) in (rows_to_grid $v14)",
    "let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v4, $v6, $v7 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = rev($v2 = (reverse $v8)) in let $v9 = (reverse $v8) in let $v10 = Const(list(list(color)), Any[]) in let $v12 = (dreamcoder_abstraction_3 $v10 $v9 $v4) in let $v13 = (cons $v6 $v12) in let $v14 = (concat $v1 $v13) in (rows_to_grid $v14)",
    "let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v4, $v6, $v7 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v9, $v8 = rev($v2 = (cons $v8 $v9)) in let $v10 = (cons $v8 $v9) in let $v11 = Const(list(list(color)), Any[]) in let $v13 = (dreamcoder_abstraction_3 $v11 $v10 $v4) in let $v14 = (cons $v6 $v13) in let $v15 = (concat $v1 $v14) in (rows_to_grid $v15)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (cons $v7 $v8) in let $v10 = (dreamcoder_abstraction_3 $v1 $v5 $v9) in let $v11 = rev($v3 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in (dreamcoder_abstraction_2 $v10 $v12)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10 = Const(list(color), Any[1]) in let $v11 = (cons $v8 $v10) in let $v12 = (cons $v9 $v11) in let $v13 = (dreamcoder_abstraction_3 $v1 $v5 $v12) in (dreamcoder_abstraction_2 $v13 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = Const(list(color), Any[1]) in let $v8, $v9, $v10 = rev($v3 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13 = (dreamcoder_abstraction_3 $v7 $v10 $v11) in let $v14 = (dreamcoder_abstraction_3 $v1 $v5 $v13) in (dreamcoder_abstraction_2 $v14 $v3)"
  ],
  "rewritten": [
    "let $v3 = rev($inp0 = (fn_7 $v3)) in (fn_8 $v3)",
    "let $v5, $v4, $v2 = rev($inp0 = (fn_11 $v5 $v4 $v2)) in (fn_6 $v5 $v2 $v4)",
    "let $v1 = Const(list(list(color)), Any[Any[0, 0, 0]]) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in (fn_6 $v1 $v3 $v6)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v6, $v5, $v3 = rev($inp0 = (fn_11 $v6 $v5 $v3)) in let $v7 = Const(list(list(color)), Any[]) in let $v9 = (dreamcoder_abstraction_3 $v7 $v5 $v3) in (dreamcoder_abstraction_2 $v9 $v1)",
    "let $v3, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = Const(list(list(color)), Any[]) in let $v10 = (dreamcoder_abstraction_3 $v8 $v4 $v2) in (dreamcoder_abstraction_2 $v10 $v6)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v6, $v5, $v3 = rev($inp0 = (fn_11 $v6 $v5 $v3)) in let $v7 = empty in let $v9 = (dreamcoder_abstraction_3 $v7 $v5 $v3) in (dreamcoder_abstraction_2 $v9 $v1)",
    "let $v5, $v4, $v2 = rev($inp0 = (fn_11 $v5 $v4 $v2)) in let $v6 = Const(list(list(color)), Any[]) in let $v8 = (dreamcoder_abstraction_3 $v6 $v4 $v2) in let $v9 = (concat $v5 $v8) in (rows_to_grid $v9)",
    "let $v1 = Const(list(list(color)), Vector{Any}[[0, 0, 0]]) in let $v6, $v5, $v3 = rev($inp0 = (fn_11 $v6 $v5 $v3)) in let $v7 = Const(list(list(color)), Any[]) in let $v9 = (dreamcoder_abstraction_3 $v7 $v5 $v3) in let $v10 = (concat $v1 $v9) in (rows_to_grid $v10)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v6, $v5, $v3 = rev($inp0 = (fn_11 $v6 $v5 $v3)) in let $v7 = empty_set in let $v8 = (collect $v7) in let $v10 = (dreamcoder_abstraction_3 $v8 $v5 $v3) in (dreamcoder_abstraction_2 $v10 $v1)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6 = (dreamcoder_abstraction_3 $v3 $v5 $v2) in let $v7 = (cons $v4 $v6) in (rows_to_grid $v7)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6 = Const(list(list(color)), Any[]) in let $v7 = (dreamcoder_abstraction_3 $v6 $v5 $v2) in let $v8 = (cons $v4 $v7) in (rows_to_grid $v8)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in $v2",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = Const(int, 3) in let $v5 = (rev_list_elements $v2 $v4) in (dreamcoder_abstraction_0 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in (fn_6 $v2 $v3 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (rows $v4)) in let $v5 = (tuple2 $v2 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in (dreamcoder_abstraction_1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in $v2",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Any[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = empty in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = empty in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3, $v4, $v5 = rev($v2 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v10 = (fn_9 $v1 $v8) in let $v12 = (fn_12 $v10) in let $v13, $v14 = rev($inp0 = (dreamcoder_abstraction_2 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v25 = (fn_13 $v21 $v21) in let $v26 = (dreamcoder_abstraction_3 $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v31, $v32, $v33 = rev($inp0 = (fn_6 $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (dreamcoder_abstraction_3 $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (dreamcoder_abstraction_3 $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (dreamcoder_abstraction_3 $v40 $v41 $v42)) in let $v43 = rev($v39 = (tuple2_second $v43)) in let $v44 = (tuple2 $v41 $v43) in let $v45 = (tuple2_first $v44) in let $v46 = Const(color, 0) in let $v47 = (dreamcoder_abstraction_3 $v29 $v45 $v46) in let $v48, $v49, $v50 = rev($v33 = (dreamcoder_abstraction_3 $v48 $v49 $v50)) in let $v51, $v52, $v53 = rev($v48 = (dreamcoder_abstraction_3 $v51 $v52 $v53)) in let $v54, $v55, $v56 = rev($v51 = (dreamcoder_abstraction_3 $v54 $v55 $v56)) in let $v57, $v58, $v59 = rev($v54 = (dreamcoder_abstraction_3 $v57 $v58 $v59)) in let $v61 = (fn_12 $v58) in let $v62, $v63, $v64 = rev($v32 = (dreamcoder_abstraction_3 $v62 $v63 $v64)) in let $v65, $v66, $v67 = rev($v62 = (dreamcoder_abstraction_3 $v65 $v66 $v67)) in let $v68 = (dreamcoder_abstraction_3 $v61 $v66 $v50) in (fn_6 $v28 $v47 $v68)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3, $v4, $v5 = rev($v2 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v10 = (fn_9 $v1 $v8) in let $v12 = (fn_12 $v10) in let $v13, $v14 = rev($inp0 = (dreamcoder_abstraction_2 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v25 = (fn_13 $v21 $v21) in let $v26 = (dreamcoder_abstraction_3 $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v31, $v32, $v33 = rev($inp0 = (fn_6 $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (dreamcoder_abstraction_3 $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (dreamcoder_abstraction_3 $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (dreamcoder_abstraction_3 $v40 $v41 $v42)) in let $v43 = Const(color, 0) in let $v44 = (dreamcoder_abstraction_3 $v29 $v41 $v43) in let $v45, $v46, $v47 = rev($v33 = (dreamcoder_abstraction_3 $v45 $v46 $v47)) in let $v48, $v49, $v50 = rev($v45 = (dreamcoder_abstraction_3 $v48 $v49 $v50)) in let $v51, $v52, $v53 = rev($v48 = (dreamcoder_abstraction_3 $v51 $v52 $v53)) in let $v54, $v55, $v56 = rev($v51 = (dreamcoder_abstraction_3 $v54 $v55 $v56)) in let $v58 = (fn_12 $v55) in let $v59, $v60, $v61 = rev($v32 = (dreamcoder_abstraction_3 $v59 $v60 $v61)) in let $v62, $v63, $v64 = rev($v59 = (dreamcoder_abstraction_3 $v62 $v63 $v64)) in let $v65 = rev($v60 = (tuple2_first $v65)) in let $v67 = (fn_9 $v65 $v50) in let $v68 = (dreamcoder_abstraction_3 $v58 $v63 $v67) in (fn_6 $v28 $v44 $v68)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3, $v4, $v5 = rev($v2 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v10 = (fn_9 $v1 $v8) in let $v12 = (fn_12 $v10) in let $v13, $v14 = rev($inp0 = (dreamcoder_abstraction_2 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v25 = (fn_13 $v21 $v21) in let $v26 = (dreamcoder_abstraction_3 $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v31, $v32, $v33 = rev($inp0 = (fn_6 $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (dreamcoder_abstraction_3 $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (dreamcoder_abstraction_3 $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (dreamcoder_abstraction_3 $v40 $v41 $v42)) in let $v43, $v44, $v45 = rev($v36 = (dreamcoder_abstraction_3 $v43 $v44 $v45)) in let $v46 = (tuple2 $v41 $v43) in let $v47 = (tuple2_first $v46) in let $v48 = Const(color, 0) in let $v49 = (dreamcoder_abstraction_3 $v29 $v47 $v48) in let $v50, $v51, $v52 = rev($v33 = (dreamcoder_abstraction_3 $v50 $v51 $v52)) in let $v53, $v54, $v55 = rev($v50 = (dreamcoder_abstraction_3 $v53 $v54 $v55)) in let $v56, $v57, $v58 = rev($v53 = (dreamcoder_abstraction_3 $v56 $v57 $v58)) in let $v59, $v60, $v61 = rev($v56 = (dreamcoder_abstraction_3 $v59 $v60 $v61)) in let $v63 = (fn_12 $v60) in let $v64, $v65, $v66 = rev($v32 = (dreamcoder_abstraction_3 $v64 $v65 $v66)) in let $v67, $v68, $v69 = rev($v64 = (dreamcoder_abstraction_3 $v67 $v68 $v69)) in let $v70 = (dreamcoder_abstraction_3 $v63 $v68 $v52) in (fn_6 $v28 $v49 $v70)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in (dreamcoder_abstraction_1 $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (fn_7 $v1)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3, $v4 = rev($v2 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5 = (cons $v4 $v3) in (dreamcoder_abstraction_0 $v5)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in let $v6 = (dreamcoder_abstraction_0 $v4) in let $v7 = (columns $v6) in (rows_to_grid $v7)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4, $v5 = rev($v3 = (dreamcoder_abstraction_2 $v4 $v5)) in let $v6 = (cons $v5 $v4) in (dreamcoder_abstraction_4 $v1 $v6)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in let $v4 = (dreamcoder_abstraction_0 $v3) in let $v5 = (columns $v4) in let $v6 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v5 $v6)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in $v2",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3 = (dreamcoder_abstraction_1 $v1) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3 = (cons $v2 $v1) in (dreamcoder_abstraction_0 $v3)",
    "let $v3, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v4 = (cons $v2 $v3) in (dreamcoder_abstraction_0 $v4)",
    "let $v2, $v3 = rev($inp0 = (fn_9 $v2 $v3)) in let $v4 = rev($v3 = (rows_to_grid $v4)) in (dreamcoder_abstraction_0 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (tuple2 $v2 $v2) in (tuple2_first $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v1 = (columns $v3)) in let $v4 = (tuple2 $v2 $v3) in (tuple2_first $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_5 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (dreamcoder_abstraction_5 $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_4 $v1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (dreamcoder_abstraction_5 $v2)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3 = (concat $v1 $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_0 $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_5 $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in (dreamcoder_abstraction_5 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = (reverse $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v7, $v6, $v4 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = rev($v1 = (reverse $v8)) in let $v10 = (dreamcoder_abstraction_3 $v8 $v6 $v4) in (dreamcoder_abstraction_2 $v10 $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = rev($v6 = (tuple2_second $v7)) in let $v8 = (tuple2_second $v7) in let $v9 = (dreamcoder_abstraction_3 $v1 $v5 $v8) in (dreamcoder_abstraction_2 $v9 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v2 = (reverse $v4)) in let $v5 = (reverse $v4) in let $v9, $v8, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v9 $v8 $v6)) in let $v10 = rev($v1 = (reverse $v10)) in let $v12 = (dreamcoder_abstraction_3 $v10 $v8 $v6) in (dreamcoder_abstraction_2 $v12 $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10 = (dreamcoder_abstraction_3 $v7 $v8 $v9) in let $v11 = (dreamcoder_abstraction_3 $v1 $v5 $v10) in (dreamcoder_abstraction_2 $v11 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v8, $v7, $v4 = rev($v3 = (dreamcoder_abstraction_3 $v8 $v7 $v4)) in let $v6 = Const(int, 6) in let $v10 = (fn_9 $v6 $v7) in let $v11 = rev($v1 = (reverse $v11)) in let $v13 = (dreamcoder_abstraction_3 $v11 $v10 $v4) in (dreamcoder_abstraction_2 $v13 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v3 = (rows $v4)) in let $v6 = (fn_9 $v4 $v2) in let $v10, $v9, $v7 = rev($v3 = (dreamcoder_abstraction_3 $v10 $v9 $v7)) in let $v11 = rev($v1 = (reverse $v11)) in let $v13 = (dreamcoder_abstraction_3 $v11 $v9 $v7) in (dreamcoder_abstraction_2 $v13 $v6)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10 = rev($v8 = (tuple2_second $v10)) in let $v11 = (tuple2_second $v10) in let $v12 = (dreamcoder_abstraction_3 $v7 $v11 $v9) in let $v13 = (dreamcoder_abstraction_3 $v1 $v5 $v12) in (dreamcoder_abstraction_2 $v13 $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v7 = (fn_9 $v2 $v4) in let $v11, $v10, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v11 $v10 $v8)) in let $v12 = rev($v3 = (reverse $v12)) in let $v14 = (dreamcoder_abstraction_3 $v12 $v10 $v8) in (dreamcoder_abstraction_2 $v14 $v7)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v7 = (fn_9 $v2 $v4) in let $v11, $v10, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v11 $v10 $v8)) in let $v12 = rev($v3 = (reverse $v12)) in let $v14 = (dreamcoder_abstraction_3 $v12 $v10 $v8) in (dreamcoder_abstraction_2 $v14 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = (tuple2_first $v4) in let $v10, $v9, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v10 $v9 $v6)) in let $v8 = Const(int, 6) in let $v12 = (fn_9 $v8 $v9) in let $v13 = rev($v1 = (reverse $v13)) in let $v15 = (dreamcoder_abstraction_3 $v13 $v12 $v6) in (dreamcoder_abstraction_2 $v15 $v5)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v10, $v11, $v12 = rev($inp0 = (fn_6 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in (dreamcoder_abstraction_2 $v20 $v12)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in (dreamcoder_abstraction_2 $v23 $v4)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9 = rev($inp0 = (dreamcoder_abstraction_0 $v9)) in let $v10, $v11, $v12 = rev($v9 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in let $v21, $v22 = rev($v9 = (cons $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (dreamcoder_abstraction_3 $v23 $v24 $v25)) in let $v26, $v27 = rev($v12 = (cons $v26 $v27)) in let $v28 = (cons $v25 $v27) in (dreamcoder_abstraction_2 $v20 $v28)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, -6) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, -6) in let $v31 = (fn_9 $v29 $v28) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, 14) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(int, 14) in let $v31 = (fn_9 $v29 $v28) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3, $v4 = rev($v1 = (dreamcoder_abstraction_3 $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (dreamcoder_abstraction_2 $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (dreamcoder_abstraction_3 $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = Const(list(list(color)), Vector{Any}[]) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (dreamcoder_abstraction_3 $v26 $v27 $v31) in (dreamcoder_abstraction_2 $v23 $v32)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v10, $v11, $v12 = rev($inp0 = (fn_6 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in let $v21 = rev($v2 = (tuple2_first $v21)) in let $v22, $v23, $v24 = rev($v12 = (dreamcoder_abstraction_3 $v22 $v23 $v24)) in let $v25 = rev($v24 = (tuple2_second $v25)) in let $v27 = (fn_9 $v21 $v25) in let $v29 = rev($v12 = (tuple2_second $v29)) in let $v32 = (fn_13 $v27 $v29) in (dreamcoder_abstraction_2 $v20 $v32)",
    "let $v1, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v10, $v11, $v12 = rev($inp0 = (fn_6 $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (dreamcoder_abstraction_3 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (dreamcoder_abstraction_3 $v6 $v18 $v14) in let $v20 = (dreamcoder_abstraction_3 $v19 $v15 $v11) in let $v21 = rev($v10 = (tuple2_first $v21)) in let $v22, $v23, $v24 = rev($v12 = (dreamcoder_abstraction_3 $v22 $v23 $v24)) in let $v25 = rev($v24 = (tuple2_second $v25)) in let $v27 = (fn_9 $v21 $v25) in let $v29 = rev($v12 = (tuple2_second $v29)) in let $v32 = (fn_13 $v27 $v29) in (dreamcoder_abstraction_2 $v20 $v32)",
    "let $v3 = rev($inp0 = (fn_7 $v3)) in (fn_8 $v3)",
    "let $v3 = rev($inp0 = (fn_7 $v3)) in let $v4 = (dreamcoder_abstraction_4 $v3 $v3) in let $v5 = (rows $v4) in (dreamcoder_abstraction_5 $v5)",
    "let $v3 = rev($inp0 = (fn_7 $v3)) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v2 = (rows_to_grid $v3)) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v2 = (dreamcoder_abstraction_1 $v3)) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_0 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in (dreamcoder_abstraction_1 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2 = (columns_to_grid $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_1 $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in (dreamcoder_abstraction_4 $v1 $v4)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (dreamcoder_abstraction_4 $v1 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_5 $v1)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_4 $v1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (dreamcoder_abstraction_5 $v2)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3 = rev($v2 = (tuple2_second $v3)) in let $v4 = (tuple2_second $v3) in (dreamcoder_abstraction_5 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (rows_to_grid $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_5 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_0 $v1) in let $v3 = (rows $v2) in (dreamcoder_abstraction_5 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = (reverse $v2) in (dreamcoder_abstraction_4 $v1 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($inp0 = (dreamcoder_abstraction_1 $v3)) in (dreamcoder_abstraction_4 $v2 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (reverse $v1) in (dreamcoder_abstraction_4 $v2 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2, $v3 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = Const(int, 3) in let $v5 = (rev_list_elements $v2 $v4) in (dreamcoder_abstraction_5 $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = (dreamcoder_abstraction_3 $v1 $v3 $v6) in (dreamcoder_abstraction_2 $v7 $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v8, $v7, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v8 $v7 $v5)) in let $v10 = (dreamcoder_abstraction_3 $v1 $v5 $v7) in (dreamcoder_abstraction_2 $v10 $v3)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = rev($inp0 = (tuple2_first $v3)) in let $v4, $v5 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = rev($v4 = (tuple2_first $v6)) in let $v7 = rev($v6 = (tuple2_first $v7)) in let $v8, $v9 = rev($v7 = (tuple2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (tuple2 $v10 $v11)) in let $v12 = rev($v10 = (rows_to_grid $v12)) in let $v13 = (concat $v2 $v12) in (rows_to_grid $v13)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = rev($v3 = (reverse $v5)) in let $v6 = (reverse $v5) in let $v10, $v9, $v7 = rev($v1 = (dreamcoder_abstraction_3 $v10 $v9 $v7)) in let $v12 = (dreamcoder_abstraction_3 $v1 $v7 $v9) in (dreamcoder_abstraction_2 $v12 $v6)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = rev($v4 = (tuple2_first $v5)) in let $v6, $v7 = rev($v5 = (tuple2 $v6 $v7)) in let $v8, $v9 = rev($v6 = (tuple2 $v8 $v9)) in let $v10 = rev($v8 = (rows_to_grid $v10)) in let $v11 = (reverse $v10) in let $v12 = (concat $v11 $v10) in (rows_to_grid $v12)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = (dreamcoder_abstraction_3 $v4 $v5 $v6) in let $v8, $v9, $v10 = rev($v2 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (dreamcoder_abstraction_3 $v1 $v7 $v10) in (dreamcoder_abstraction_2 $v11 $v9)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v8, $v7, $v5 = rev($v1 = (dreamcoder_abstraction_3 $v8 $v7 $v5)) in let $v9, $v10 = rev($v5 = (cons $v9 $v10)) in let $v11 = (cons $v9 $v10) in let $v13 = (dreamcoder_abstraction_3 $v1 $v11 $v7) in (dreamcoder_abstraction_2 $v13 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (cons $v5 $v6)) in let $v7 = (cons $v5 $v6) in let $v11, $v10, $v8 = rev($v1 = (dreamcoder_abstraction_3 $v11 $v10 $v8)) in let $v13 = (dreamcoder_abstraction_3 $v1 $v8 $v10) in (dreamcoder_abstraction_2 $v13 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($v3 = (cons $v7 $v8)) in let $v9 = (cons $v6 $v8) in let $v10, $v11, $v12 = rev($v2 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13 = (dreamcoder_abstraction_3 $v1 $v9 $v12) in (dreamcoder_abstraction_2 $v13 $v11)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = rev($v6 = (tuple2_first $v7)) in let $v8 = (tuple2_first $v7) in let $v9 = (dreamcoder_abstraction_3 $v4 $v5 $v8) in let $v10, $v11, $v12 = rev($v2 = (dreamcoder_abstraction_3 $v10 $v11 $v12)) in let $v13 = (dreamcoder_abstraction_3 $v1 $v9 $v12) in (dreamcoder_abstraction_2 $v13 $v11)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8 = (fn_10 $v6 $v7) in let $v11, $v12, $v13 = rev($inp0 = (fn_11 $v11 $v12 $v13)) in let $v14, $v15, $v16 = rev($v12 = (dreamcoder_abstraction_3 $v14 $v15 $v16)) in let $v17, $v18, $v19 = rev($v5 = (dreamcoder_abstraction_3 $v17 $v18 $v19)) in let $v20 = (fn_10 $v15 $v19) in (fn_6 $v1 $v8 $v20)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8 = (fn_10 $v6 $v7) in let $v11, $v12, $v13 = rev($inp0 = (fn_11 $v11 $v12 $v13)) in let $v14, $v15, $v16 = rev($v12 = (dreamcoder_abstraction_3 $v14 $v15 $v16)) in let $v17, $v18, $v19 = rev($v5 = (dreamcoder_abstraction_3 $v17 $v18 $v19)) in let $v20 = (tuple2 $v19 $v6) in let $v21 = (tuple2_first $v20) in let $v22 = (fn_10 $v15 $v21) in (fn_6 $v1 $v8 $v22)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v12 = (fn_9 $v10 $v6) in let $v13 = (fn_10 $v12 $v7) in let $v16, $v17, $v18 = rev($inp0 = (fn_11 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (fn_10 $v20 $v10) in (fn_6 $v1 $v13 $v22)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v12 = (fn_9 $v8 $v6) in let $v13 = (fn_10 $v12 $v7) in let $v16, $v17, $v18 = rev($inp0 = (fn_11 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (fn_10 $v20 $v10) in (fn_6 $v1 $v13 $v22)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v12 = (fn_9 $v9 $v6) in let $v13 = (fn_10 $v12 $v7) in let $v16, $v17, $v18 = rev($inp0 = (fn_11 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = (fn_10 $v20 $v10) in (fn_6 $v1 $v13 $v22)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v5, $v6, $v7 = rev($inp0 = (fn_11 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (fn_10 $v10 $v15) in let $v17, $v18 = rev($inp0 = (dreamcoder_abstraction_2 $v17 $v18)) in let $v19, $v20, $v21 = rev($v18 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = rev($v20 = (tuple2_second $v22)) in let $v23 = (tuple2_second $v22) in let $v24 = (fn_10 $v9 $v23) in let $v25 = (dreamcoder_abstraction_3 $v2 $v16 $v24) in (dreamcoder_abstraction_4 $v1 $v25)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v5, $v6, $v7 = rev($inp0 = (fn_11 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (fn_10 $v10 $v15) in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (fn_10 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v5, $v6, $v7 = rev($inp0 = (fn_11 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (fn_10 $v10 $v15) in let $v17 = empty in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (dreamcoder_abstraction_3 $v17 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v3 = empty in let $v5, $v6, $v7 = rev($inp0 = (fn_11 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (dreamcoder_abstraction_3 $v3 $v10 $v15) in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (fn_10 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = empty in let $v5, $v6, $v7 = rev($inp0 = (fn_11 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (dreamcoder_abstraction_3 $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (fn_10 $v10 $v15) in let $v18, $v19 = rev($inp0 = (dreamcoder_abstraction_2 $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (fn_10 $v9 $v24) in let $v26 = (dreamcoder_abstraction_3 $v2 $v16 $v25) in (dreamcoder_abstraction_4 $v1 $v26)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (dreamcoder_abstraction_1 $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (dreamcoder_abstraction_1 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (rows_to_grid $v1) in let $v3 = (rows $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (dreamcoder_abstraction_0 $v1) in let $v3 = (rows $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = (cons $v2 $v3) in (dreamcoder_abstraction_1 $v4)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (reverse $v1) in (dreamcoder_abstraction_4 $v2 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in (dreamcoder_abstraction_4 $v3 $v2)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_1 $v2)) in let $v3 = (reverse $v2) in let $v4 = (concat $v1 $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in let $v4 = (concat $v1 $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v4 = rev($v2 = (dreamcoder_abstraction_1 $v4)) in let $v5 = (concat $v4 $v4) in (dreamcoder_abstraction_1 $v5)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($inp0 = (columns_to_grid $v3)) in let $v4 = rev($v3 = (reverse $v4)) in (dreamcoder_abstraction_4 $v2 $v4)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_1 $v1)) in (dreamcoder_abstraction_0 $v1)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in (dreamcoder_abstraction_1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_1 $v2)",
    "let $v1 = (rows $inp0) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = empty in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v1 = empty in let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in (dreamcoder_abstraction_4 $v1 $v2)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in (fn_6 $v15 $v18 $v9)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = Const(color, 0) in let $v20 = (tuple2 $v9 $v19) in let $v21 = (tuple2_first $v20) in (fn_6 $v15 $v18 $v21)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in (fn_6 $v19 $v22 $v9)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v20, $v21 = rev($v3 = (fn_9 $v20 $v21)) in let $v22 = (tuple2 $v9 $v21) in let $v23 = (tuple2_first $v22) in (fn_6 $v15 $v18 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v23 = Const(color, 0) in let $v24 = (tuple2 $v9 $v23) in let $v25 = (tuple2_first $v24) in (fn_6 $v19 $v22 $v25)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15 = (dreamcoder_abstraction_3 $v5 $v3 $v14) in let $v16 = rev($inp0 = (dreamcoder_abstraction_1 $v16)) in let $v17, $v18, $v19 = rev($v16 = (dreamcoder_abstraction_3 $v17 $v18 $v19)) in let $v20, $v21, $v22 = rev($v18 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v24, $v25, $v26 = rev($inp0 = (fn_11 $v24 $v25 $v26)) in let $v27, $v28 = rev($v25 = (cons $v27 $v28)) in let $v29 = (cons $v21 $v28) in (fn_6 $v15 $v29 $v9)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (dreamcoder_abstraction_3 $v20 $v21 $v22)) in let $v24, $v25 = rev($v3 = (fn_9 $v24 $v25)) in let $v26 = (tuple2 $v9 $v25) in let $v27 = (tuple2_first $v26) in (fn_6 $v19 $v22 $v27)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($inp0 = (dreamcoder_abstraction_2 $v7 $v8)) in let $v9, $v10 = rev($v8 = (rev_list_elements $v9 $v10)) in let $v11 = rev($v10 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v5 $v12) in let $v15, $v16 = rev($inp0 = (fn_9 $v15 $v16)) in let $v17, $v18 = rev($v16 = (dreamcoder_abstraction_2 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = rev($inp0 = (dreamcoder_abstraction_0 $v22)) in let $v23 = rev($v22 = (rows $v23)) in let $v24, $v25 = rev($v23 = (dreamcoder_abstraction_2 $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = (cons $v20 $v26) in let $v30 = (cons $v13 $v29) in let $v31 = rev($v8 = (tuple2_first $v31)) in let $v32 = (tuple2_first $v31) in (dreamcoder_abstraction_2 $v30 $v32)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($inp0 = (dreamcoder_abstraction_2 $v7 $v8)) in let $v9, $v10 = rev($v8 = (rev_list_elements $v9 $v10)) in let $v11 = rev($v10 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v5 $v12) in let $v15, $v16 = rev($inp0 = (fn_9 $v15 $v16)) in let $v17, $v18 = rev($v16 = (dreamcoder_abstraction_2 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = rev($inp0 = (dreamcoder_abstraction_0 $v22)) in let $v23 = rev($v22 = (rows $v23)) in let $v24, $v25 = rev($v23 = (dreamcoder_abstraction_2 $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (dreamcoder_abstraction_3 $v26 $v27 $v28)) in let $v29 = (cons $v20 $v26) in let $v30 = (cons $v13 $v29) in let $v31 = rev($v8 = (tuple2_second $v31)) in let $v32 = (tuple2_second $v31) in (dreamcoder_abstraction_2 $v30 $v32)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (dreamcoder_abstraction_2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (dreamcoder_abstraction_3 $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (dreamcoder_abstraction_3 $v5 $v3 $v18) in let $v20 = rev($inp0 = (dreamcoder_abstraction_1 $v20)) in let $v21, $v22, $v23 = rev($v20 = (dreamcoder_abstraction_3 $v21 $v22 $v23)) in let $v24, $v25, $v26 = rev($v22 = (dreamcoder_abstraction_3 $v24 $v25 $v26)) in let $v28, $v29, $v30 = rev($inp0 = (fn_11 $v28 $v29 $v30)) in let $v31, $v32 = rev($v29 = (cons $v31 $v32)) in let $v33 = (cons $v25 $v32) in (fn_6 $v19 $v33 $v9)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (fn_6 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (fn_10 $v9 $v17) in let $v19 = (cons $v16 $v8) in (fn_11 $v1 $v18 $v19)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = empty in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (fn_6 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (dreamcoder_abstraction_3 $v2 $v9 $v17) in let $v19 = (cons $v16 $v8) in (fn_11 $v1 $v18 $v19)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = Const(list(list(color)), Vector{Any}[]) in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (fn_11 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v22 = (fn_12 $v20) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = Const(list(list(color)), Vector{Any}[]) in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (fn_11 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = empty in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (fn_11 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v22 = (fn_12 $v20) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (fn_11 $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (dreamcoder_abstraction_3 $v18 $v19 $v20)) in let $v21 = empty in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (dreamcoder_abstraction_2 $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (fn_6 $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty_set in let $v13 = (collect $v12) in let $v14 = (cons $v11 $v13) in let $v16, $v17, $v18 = rev($inp0 = (fn_11 $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (dreamcoder_abstraction_3 $v19 $v20 $v21)) in let $v22 = empty in let $v23 = (cons $v21 $v22) in let $v24 = (cons $v20 $v23) in (dreamcoder_abstraction_2 $v14 $v24)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (fn_6 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (fn_10 $v9 $v17) in let $v20, $v21, $v22 = rev($inp0 = (fn_11 $v20 $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (dreamcoder_abstraction_3 $v23 $v24 $v25)) in let $v26 = (cons $v24 $v8) in (fn_11 $v1 $v18 $v26)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (dreamcoder_abstraction_3 $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (fn_6 $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (dreamcoder_abstraction_3 $v15 $v16 $v17)) in let $v18 = (fn_10 $v9 $v17) in let $v20, $v21, $v22 = rev($inp0 = (fn_11 $v20 $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (dreamcoder_abstraction_3 $v23 $v24 $v25)) in let $v26 = rev($v24 = (tuple2_second $v26)) in let $v27 = (tuple2_second $v26) in let $v28 = (cons $v27 $v8) in (fn_11 $v1 $v18 $v28)",
    "let $v1 = empty_set in let $v2 = (collect $v1) in let $v4, $v5 = rev($inp0 = (dreamcoder_abstraction_2 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (dreamcoder_abstraction_3 $v6 $v7 $v8)) in let $v9, $v10, $v11 = rev($v6 = (dreamcoder_abstraction_3 $v9 $v10 $v11)) in let $v13, $v14, $v15 = rev($inp0 = (fn_6 $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v15 = (dreamcoder_abstraction_3 $v16 $v17 $v18)) in let $v19 = (fn_10 $v10 $v18) in let $v21, $v22, $v23 = rev($inp0 = (fn_11 $v21 $v22 $v23)) in let $v24, $v25, $v26 = rev($v22 = (dreamcoder_abstraction_3 $v24 $v25 $v26)) in let $v27 = (cons $v25 $v9) in (fn_11 $v2 $v19 $v27)",
    "let $v2 = rev($inp0 = (dreamcoder_abstraction_0 $v2)) in let $v3 = (concat $v1 $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v4 = rev($inp0 = (fn_9 $v3 $v4)) in let $v5 = rev($v4 = (rows_to_grid $v5)) in let $v6 = (reverse $v5) in let $v7 = (concat $v1 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5, $v6 = rev($v3 = (tuple2 $v5 $v6)) in let $v7 = rev($v5 = (rows_to_grid $v7)) in let $v8 = rev($inp0 = (columns_to_grid $v8)) in let $v9 = rev($v8 = (rows $v9)) in let $v11 = rev($v9 = (dreamcoder_abstraction_1 $v11)) in let $v12 = (concat $v7 $v11) in (rows_to_grid $v12)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (cons $v7 $v8) in let $v10 = (dreamcoder_abstraction_3 $v1 $v5 $v9) in (dreamcoder_abstraction_2 $v10 $v3)",
    "let $v3, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = rev($v2 = (tuple2_second $v8)) in let $v9 = (tuple2_second $v8) in let $v10 = Const(list(list(color)), Any[]) in let $v12 = (dreamcoder_abstraction_3 $v10 $v9 $v4) in let $v13 = (cons $v6 $v12) in let $v14 = (concat $v1 $v13) in (rows_to_grid $v14)",
    "let $v3, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8 = rev($v2 = (reverse $v8)) in let $v9 = (reverse $v8) in let $v10 = Const(list(list(color)), Any[]) in let $v12 = (dreamcoder_abstraction_3 $v10 $v9 $v4) in let $v13 = (cons $v6 $v12) in let $v14 = (concat $v1 $v13) in (rows_to_grid $v14)",
    "let $v3, $v2 = rev($inp0 = (dreamcoder_abstraction_2 $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (dreamcoder_abstraction_3 $v7 $v6 $v4)) in let $v8, $v9 = rev($v2 = (cons $v8 $v9)) in let $v10 = (cons $v8 $v9) in let $v11 = Const(list(list(color)), Any[]) in let $v13 = (dreamcoder_abstraction_3 $v11 $v10 $v4) in let $v14 = (cons $v6 $v13) in let $v15 = (concat $v1 $v14) in (rows_to_grid $v15)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (cons $v7 $v8) in let $v10 = (dreamcoder_abstraction_3 $v1 $v5 $v9) in let $v11 = rev($v3 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in (dreamcoder_abstraction_2 $v10 $v12)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (dreamcoder_abstraction_3 $v7 $v8 $v9)) in let $v10 = Const(list(color), Any[1]) in let $v11 = (cons $v8 $v10) in let $v12 = (cons $v9 $v11) in let $v13 = (dreamcoder_abstraction_3 $v1 $v5 $v12) in (dreamcoder_abstraction_2 $v13 $v3)",
    "let $v1 = rev($inp0 = (dreamcoder_abstraction_0 $v1)) in let $v2, $v3 = rev($inp0 = (dreamcoder_abstraction_2 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (dreamcoder_abstraction_3 $v4 $v5 $v6)) in let $v7 = Const(list(color), Any[1]) in let $v8, $v9, $v10 = rev($v3 = (dreamcoder_abstraction_3 $v8 $v9 $v10)) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13 = (dreamcoder_abstraction_3 $v7 $v10 $v11) in let $v14 = (dreamcoder_abstraction_3 $v1 $v5 $v13) in (dreamcoder_abstraction_2 $v14 $v3)"
  ],
  "rewritten_dreamcoder": [
    "let $v3 = rev($inp0 = (#(lambda (#(lambda (columns_to_grid (reverse $0))) (columns (#(lambda (rows_to_grid (reverse $0))) $0)))) $v3)) in (#(lambda (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) (rows (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $0)))) $v3)",
    "let $v5, $v4, $v2 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v4 $v2)) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v2 $v4)",
    "let $v1 = Const(list(list(color)), Any[Any[0, 0, 0]]) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v3 $v6)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v6, $v5, $v3 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v6 $v5 $v3)) in let $v7 = Const(list(list(color)), Any[]) in let $v9 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v5 $v3) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v9 $v1)",
    "let $v3, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v6 $v4)) in let $v8 = Const(list(list(color)), Any[]) in let $v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v4 $v2) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v10 $v6)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v6, $v5, $v3 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v6 $v5 $v3)) in let $v7 = empty in let $v9 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v5 $v3) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v9 $v1)",
    "let $v5, $v4, $v2 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v4 $v2)) in let $v6 = Const(list(list(color)), Any[]) in let $v8 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v4 $v2) in let $v9 = (concat $v5 $v8) in (rows_to_grid $v9)",
    "let $v1 = Const(list(list(color)), Vector{Any}[[0, 0, 0]]) in let $v6, $v5, $v3 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v6 $v5 $v3)) in let $v7 = Const(list(list(color)), Any[]) in let $v9 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v5 $v3) in let $v10 = (concat $v1 $v9) in (rows_to_grid $v10)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v6, $v5, $v3 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v6 $v5 $v3)) in let $v7 = empty_set in let $v8 = (collect $v7) in let $v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v5 $v3) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v10 $v1)",
    "let $v1, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v5 $v2) in let $v7 = (cons $v4 $v6) in (rows_to_grid $v7)",
    "let $v1, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6 = Const(list(list(color)), Any[]) in let $v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v5 $v2) in let $v8 = (cons $v4 $v7) in (rows_to_grid $v8)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (#(lambda (rows_to_grid (reverse $0))) $v1)",
    "let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in $v2",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (#(lambda (rows_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in (#(lambda (rows_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (#(lambda (columns_to_grid (reverse $0))) $v4)) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = Const(int, 3) in let $v5 = (rev_list_elements $v2 $v4) in (#(lambda (rows_to_grid (reverse $0))) $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3, $v4 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v3 $v4)) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (rows $v4)) in let $v5 = (tuple2 $v2 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (#(lambda (rows_to_grid (reverse $0))) $v1)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in (#(lambda (columns_to_grid (reverse $0))) $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in $v2",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Any[]) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = empty in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = empty in let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in let $v3, $v4, $v5 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v10 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v1 $v8) in let $v12 = (#(lambda (cons $0 Const(list(color), Any[]))) $v10) in let $v13, $v14 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v25 = (#(lambda (lambda (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) (tuple2_second $1) (tuple2_second $0)))) $v21 $v21) in let $v26 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v31, $v32, $v33 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v40 $v41 $v42)) in let $v43 = rev($v39 = (tuple2_second $v43)) in let $v44 = (tuple2 $v41 $v43) in let $v45 = (tuple2_first $v44) in let $v46 = Const(color, 0) in let $v47 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v29 $v45 $v46) in let $v48, $v49, $v50 = rev($v33 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v48 $v49 $v50)) in let $v51, $v52, $v53 = rev($v48 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v51 $v52 $v53)) in let $v54, $v55, $v56 = rev($v51 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v54 $v55 $v56)) in let $v57, $v58, $v59 = rev($v54 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v57 $v58 $v59)) in let $v61 = (#(lambda (cons $0 Const(list(color), Any[]))) $v58) in let $v62, $v63, $v64 = rev($v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v62 $v63 $v64)) in let $v65, $v66, $v67 = rev($v62 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v65 $v66 $v67)) in let $v68 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v61 $v66 $v50) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v28 $v47 $v68)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in let $v3, $v4, $v5 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v10 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v1 $v8) in let $v12 = (#(lambda (cons $0 Const(list(color), Any[]))) $v10) in let $v13, $v14 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v25 = (#(lambda (lambda (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) (tuple2_second $1) (tuple2_second $0)))) $v21 $v21) in let $v26 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v31, $v32, $v33 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v40 $v41 $v42)) in let $v43 = Const(color, 0) in let $v44 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v29 $v41 $v43) in let $v45, $v46, $v47 = rev($v33 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v45 $v46 $v47)) in let $v48, $v49, $v50 = rev($v45 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v48 $v49 $v50)) in let $v51, $v52, $v53 = rev($v48 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v51 $v52 $v53)) in let $v54, $v55, $v56 = rev($v51 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v54 $v55 $v56)) in let $v58 = (#(lambda (cons $0 Const(list(color), Any[]))) $v55) in let $v59, $v60, $v61 = rev($v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v59 $v60 $v61)) in let $v62, $v63, $v64 = rev($v59 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v62 $v63 $v64)) in let $v65 = rev($v60 = (tuple2_first $v65)) in let $v67 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v65 $v50) in let $v68 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v58 $v63 $v67) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v28 $v44 $v68)",
    "let $v1 = Const(list(color), Any[0]) in let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in let $v3, $v4, $v5 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v10 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v1 $v8) in let $v12 = (#(lambda (cons $0 Const(list(color), Any[]))) $v10) in let $v13, $v14 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v18 $v19 $v20)) in let $v21 = rev($v16 = (tuple2_second $v21)) in let $v25 = (#(lambda (lambda (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) (tuple2_second $1) (tuple2_second $0)))) $v21 $v21) in let $v26 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v19 $v25) in let $v27 = Const(list(list(color)), Any[]) in let $v28 = (cons $v26 $v27) in let $v29 = Const(list(color), Any[0]) in let $v31, $v32, $v33 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v31 $v32 $v33)) in let $v34, $v35, $v36 = rev($v31 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v34 $v35 $v36)) in let $v37, $v38, $v39 = rev($v35 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v37 $v38 $v39)) in let $v40, $v41, $v42 = rev($v37 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v40 $v41 $v42)) in let $v43, $v44, $v45 = rev($v36 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v43 $v44 $v45)) in let $v46 = (tuple2 $v41 $v43) in let $v47 = (tuple2_first $v46) in let $v48 = Const(color, 0) in let $v49 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v29 $v47 $v48) in let $v50, $v51, $v52 = rev($v33 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v50 $v51 $v52)) in let $v53, $v54, $v55 = rev($v50 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v53 $v54 $v55)) in let $v56, $v57, $v58 = rev($v53 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v56 $v57 $v58)) in let $v59, $v60, $v61 = rev($v56 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v59 $v60 $v61)) in let $v63 = (#(lambda (cons $0 Const(list(color), Any[]))) $v60) in let $v64, $v65, $v66 = rev($v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v64 $v65 $v66)) in let $v67, $v68, $v69 = rev($v64 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v67 $v68 $v69)) in let $v70 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v63 $v68 $v52) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v28 $v49 $v70)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (#(lambda (rows_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (#(lambda (rows_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (#(lambda (columns_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (#(lambda (columns_to_grid (reverse $0))) $v3)",
    "let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in (#(lambda (columns_to_grid (reverse $0))) $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (#(lambda (#(lambda (columns_to_grid (reverse $0))) (columns (#(lambda (rows_to_grid (reverse $0))) $0)))) $v1)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3, $v4 = rev($v2 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5 = (cons $v4 $v3) in (#(lambda (rows_to_grid (reverse $0))) $v5)",
    "let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in let $v6 = (#(lambda (rows_to_grid (reverse $0))) $v4) in let $v7 = (columns $v6) in (rows_to_grid $v7)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4, $v5 = rev($v3 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v4 $v5)) in let $v6 = (cons $v5 $v4) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v6)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in let $v4 = (#(lambda (rows_to_grid (reverse $0))) $v3) in let $v5 = (columns $v4) in let $v6 = Const(list(list(color)), Vector{Any}[]) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v5 $v6)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (#(lambda (rows_to_grid (reverse $0))) $v1)",
    "let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in $v2",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3 = (#(lambda (columns_to_grid (reverse $0))) $v1) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v1 $v2)) in let $v3 = (cons $v2 $v1) in (#(lambda (rows_to_grid (reverse $0))) $v3)",
    "let $v3, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v2)) in let $v4 = (cons $v2 $v3) in (#(lambda (rows_to_grid (reverse $0))) $v4)",
    "let $v2, $v3 = rev($inp0 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v2 $v3)) in let $v4 = rev($v3 = (rows_to_grid $v4)) in (#(lambda (rows_to_grid (reverse $0))) $v4)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (tuple2 $v2 $v2) in (tuple2_first $v3)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v1 = (columns $v3)) in let $v4 = (tuple2 $v2 $v3) in (tuple2_first $v4)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v1)",
    "let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v2)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v2)",
    "let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in let $v3 = (concat $v1 $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (#(lambda (rows_to_grid (reverse $0))) $v1) in let $v3 = (rows $v2) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (#(lambda (columns_to_grid (reverse $0))) $v4)) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v4)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (columns $v2) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (rows $v2) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = (reverse $v2) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v7, $v6, $v4 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v6 $v4)) in let $v8 = rev($v1 = (reverse $v8)) in let $v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v6 $v4) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v10 $v2)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7 = rev($v6 = (tuple2_second $v7)) in let $v8 = (tuple2_second $v7) in let $v9 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v8) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v9 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v2 = (reverse $v4)) in let $v5 = (reverse $v4) in let $v9, $v8, $v6 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v9 $v8 $v6)) in let $v10 = rev($v1 = (reverse $v10)) in let $v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v8 $v6) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v12 $v5)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9) in let $v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v10) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v11 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v8, $v7, $v4 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v7 $v4)) in let $v6 = Const(int, 6) in let $v10 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v6 $v7) in let $v11 = rev($v1 = (reverse $v11)) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v10 $v4) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v3 = (rows $v4)) in let $v6 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v4 $v2) in let $v10, $v9, $v7 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v9 $v7)) in let $v11 = rev($v1 = (reverse $v11)) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v9 $v7) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v6)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10 = rev($v8 = (tuple2_second $v10)) in let $v11 = (tuple2_second $v10) in let $v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v11 $v9) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v12) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v3)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v7 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v2 $v4) in let $v11, $v10, $v8 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v10 $v8)) in let $v12 = rev($v3 = (reverse $v12)) in let $v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v10 $v8) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v14 $v7)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v7 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v2 $v4) in let $v11, $v10, $v8 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v10 $v8)) in let $v12 = rev($v3 = (reverse $v12)) in let $v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v10 $v8) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v14 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = (tuple2_first $v4) in let $v10, $v9, $v6 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v9 $v6)) in let $v8 = Const(int, 6) in let $v12 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v8 $v9) in let $v13 = rev($v1 = (reverse $v13)) in let $v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v13 $v12 $v6) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v15 $v5)",
    "let $v1, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v10, $v11, $v12 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v18 $v14) in let $v20 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v15 $v11) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v20 $v12)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v23 $v4)",
    "let $v1, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v9 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v9)) in let $v10, $v11, $v12 = rev($v9 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v18 $v14) in let $v20 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v15 $v11) in let $v21, $v22 = rev($v9 = (cons $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v23 $v24 $v25)) in let $v26, $v27 = rev($v12 = (cons $v26 $v27)) in let $v28 = (cons $v25 $v27) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v20 $v28)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3, $v4 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v28)) in let $v29 = Const(int, -6) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v31) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v23 $v32)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3, $v4 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v28)) in let $v29 = Const(int, -6) in let $v31 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v29 $v28) in let $v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v31) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v23 $v32)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3, $v4 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v28)) in let $v29 = Const(int, 14) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v31) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v23 $v32)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3, $v4 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v28)) in let $v29 = Const(int, 14) in let $v31 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v29 $v28) in let $v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v31) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v23 $v32)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3, $v4 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v3 $v4)) in let $v5, $v6 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v5 $v6)) in let $v7, $v8, $v9 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10, $v11, $v12 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (cons $v13 $v10) in let $v16, $v17, $v18 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v17 $v21) in let $v23 = (cons $v3 $v22) in let $v24, $v25 = rev($v1 = (cons $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v28)) in let $v29 = Const(list(list(color)), Vector{Any}[]) in let $v30 = (tuple2 $v28 $v29) in let $v31 = (tuple2_first $v30) in let $v32 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v31) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v23 $v32)",
    "let $v1, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v10, $v11, $v12 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v18 $v14) in let $v20 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v15 $v11) in let $v21 = rev($v2 = (tuple2_first $v21)) in let $v22, $v23, $v24 = rev($v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v22 $v23 $v24)) in let $v25 = rev($v24 = (tuple2_second $v25)) in let $v27 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v21 $v25) in let $v29 = rev($v12 = (tuple2_second $v29)) in let $v32 = (#(lambda (lambda (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) (tuple2_second $1) (tuple2_second $0)))) $v27 $v29) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v20 $v32)",
    "let $v1, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v1 $v2)) in let $v3, $v4, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v4 $v5)) in let $v6, $v7, $v8 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v10, $v11, $v12 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v10 $v11 $v12)) in let $v13, $v14, $v15 = rev($v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v18 $v14) in let $v20 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v15 $v11) in let $v21 = rev($v10 = (tuple2_first $v21)) in let $v22, $v23, $v24 = rev($v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v22 $v23 $v24)) in let $v25 = rev($v24 = (tuple2_second $v25)) in let $v27 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v21 $v25) in let $v29 = rev($v12 = (tuple2_second $v29)) in let $v32 = (#(lambda (lambda (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) (tuple2_second $1) (tuple2_second $0)))) $v27 $v29) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v20 $v32)",
    "let $v3 = rev($inp0 = (#(lambda (#(lambda (columns_to_grid (reverse $0))) (columns (#(lambda (rows_to_grid (reverse $0))) $0)))) $v3)) in (#(lambda (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) (rows (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $0)))) $v3)",
    "let $v3 = rev($inp0 = (#(lambda (#(lambda (columns_to_grid (reverse $0))) (columns (#(lambda (rows_to_grid (reverse $0))) $0)))) $v3)) in let $v4 = (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v3 $v3) in let $v5 = (rows $v4) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v5)",
    "let $v3 = rev($inp0 = (#(lambda (#(lambda (columns_to_grid (reverse $0))) (columns (#(lambda (rows_to_grid (reverse $0))) $0)))) $v3)) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v2 = (rows_to_grid $v3)) in (#(lambda (rows_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v2 = (#(lambda (columns_to_grid (reverse $0))) $v3)) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (#(lambda (rows_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = (columns $v2) in (#(lambda (columns_to_grid (reverse $0))) $v3)",
    "let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in (#(lambda (columns_to_grid (reverse $0))) $v4)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2 = (columns_to_grid $v1) in let $v3 = (rows $v2) in (#(lambda (columns_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (#(lambda (columns_to_grid (reverse $0))) $v1) in let $v3 = (rows $v2) in (#(lambda (columns_to_grid (reverse $0))) $v3)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v4)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v4)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v1)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v2)",
    "let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in let $v3 = rev($v2 = (tuple2_second $v3)) in let $v4 = (tuple2_second $v3) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v4)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = (rows_to_grid $v1) in let $v3 = (rows $v2) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (#(lambda (rows_to_grid (reverse $0))) $v1) in let $v3 = (rows $v2) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = (reverse $v2) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v3)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v2 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (reverse $v1) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v2 $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = Const(int, 3) in let $v5 = (rev_list_elements $v2 $v4) in (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v3 $v6) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v7 $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v8, $v7, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v7 $v5)) in let $v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v7) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v10 $v3)",
    "let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = rev($inp0 = (tuple2_first $v3)) in let $v4, $v5 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = rev($v4 = (tuple2_first $v6)) in let $v7 = rev($v6 = (tuple2_first $v7)) in let $v8, $v9 = rev($v7 = (tuple2 $v8 $v9)) in let $v10, $v11 = rev($v8 = (tuple2 $v10 $v11)) in let $v12 = rev($v10 = (rows_to_grid $v12)) in let $v13 = (concat $v2 $v12) in (rows_to_grid $v13)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = rev($v3 = (reverse $v5)) in let $v6 = (reverse $v5) in let $v10, $v9, $v7 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v9 $v7)) in let $v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v7 $v9) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v12 $v6)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = rev($v4 = (tuple2_first $v5)) in let $v6, $v7 = rev($v5 = (tuple2 $v6 $v7)) in let $v8, $v9 = rev($v6 = (tuple2 $v8 $v9)) in let $v10 = rev($v8 = (rows_to_grid $v10)) in let $v11 = (reverse $v10) in let $v12 = (concat $v11 $v10) in (rows_to_grid $v12)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6) in let $v8, $v9, $v10 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v7 $v10) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v11 $v9)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v8, $v7, $v5 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v7 $v5)) in let $v9, $v10 = rev($v5 = (cons $v9 $v10)) in let $v11 = (cons $v9 $v10) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v11 $v7) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (cons $v5 $v6)) in let $v7 = (cons $v5 $v6) in let $v11, $v10, $v8 = rev($v1 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v10 $v8)) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v8 $v10) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8 = rev($v3 = (cons $v7 $v8)) in let $v9 = (cons $v6 $v8) in let $v10, $v11, $v12 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v9 $v12) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v11)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7 = rev($v6 = (tuple2_first $v7)) in let $v8 = (tuple2_first $v7) in let $v9 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v8) in let $v10, $v11, $v12 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v11 $v12)) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v9 $v12) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v11)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v6 $v7) in let $v11, $v12, $v13 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v11 $v12 $v13)) in let $v14, $v15, $v16 = rev($v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v14 $v15 $v16)) in let $v17, $v18, $v19 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v17 $v18 $v19)) in let $v20 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v15 $v19) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v8 $v20)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v6 $v7) in let $v11, $v12, $v13 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v11 $v12 $v13)) in let $v14, $v15, $v16 = rev($v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v14 $v15 $v16)) in let $v17, $v18, $v19 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v17 $v18 $v19)) in let $v20 = (tuple2 $v19 $v6) in let $v21 = (tuple2_first $v20) in let $v22 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v15 $v21) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v8 $v22)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v12 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v10 $v6) in let $v13 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v12 $v7) in let $v16, $v17, $v18 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v20 $v10) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v13 $v22)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v12 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v8 $v6) in let $v13 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v12 $v7) in let $v16, $v17, $v18 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v20 $v10) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v13 $v22)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v12 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v9 $v6) in let $v13 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v12 $v7) in let $v16, $v17, $v18 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v20 $v10) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v13 $v22)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v5, $v6, $v7 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v10 $v15) in let $v17, $v18 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v17 $v18)) in let $v19, $v20, $v21 = rev($v18 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = rev($v20 = (tuple2_second $v22)) in let $v23 = (tuple2_second $v22) in let $v24 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v9 $v23) in let $v25 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v16 $v24) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v25)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v5, $v6, $v7 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v10 $v15) in let $v18, $v19 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v9 $v24) in let $v26 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v16 $v25) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v5, $v6, $v7 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v10 $v15) in let $v17 = empty in let $v18, $v19 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v17 $v9 $v24) in let $v26 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v16 $v25) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = Const(list(list(color)), Vector{Any}[]) in let $v3 = empty in let $v5, $v6, $v7 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v3 $v10 $v15) in let $v18, $v19 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v9 $v24) in let $v26 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v16 $v25) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v26)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = empty in let $v5, $v6, $v7 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11, $v12, $v13 = rev($v7 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v12 $v13)) in let $v14 = rev($v13 = (tuple2_second $v14)) in let $v15 = (tuple2_second $v14) in let $v16 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v10 $v15) in let $v18, $v19 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v18 $v19)) in let $v20, $v21, $v22 = rev($v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in let $v23 = rev($v21 = (tuple2_second $v23)) in let $v24 = (tuple2_second $v23) in let $v25 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v9 $v24) in let $v26 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v16 $v25) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v26)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (#(lambda (columns_to_grid (reverse $0))) $v1)",
    "let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v4 = rev($v2 = (#(lambda (columns_to_grid (reverse $0))) $v4)) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (rows $v2) in (#(lambda (columns_to_grid (reverse $0))) $v3)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = (rows_to_grid $v1) in let $v3 = (rows $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (#(lambda (rows_to_grid (reverse $0))) $v1) in let $v3 = (rows $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = (cons $v2 $v3) in (#(lambda (columns_to_grid (reverse $0))) $v4)",
    "let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = (reverse $v1) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v2 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v3 $v2)",
    "let $v2 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v2)) in let $v3 = (reverse $v2) in let $v4 = (concat $v1 $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in let $v4 = (concat $v1 $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v4 = rev($v2 = (#(lambda (columns_to_grid (reverse $0))) $v4)) in let $v5 = (concat $v4 $v4) in (#(lambda (columns_to_grid (reverse $0))) $v5)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($inp0 = (columns_to_grid $v3)) in let $v4 = rev($v3 = (reverse $v4)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v2 $v4)",
    "let $v1 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v1)) in (#(lambda (rows_to_grid (reverse $0))) $v1)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in (#(lambda (columns_to_grid (reverse $0))) $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in (#(lambda (columns_to_grid (reverse $0))) $v2)",
    "let $v1 = (rows $inp0) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = Const(list(list(color)), Vector{Any}[]) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = Const(list(list(color)), Vector{Any}[]) in let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = empty in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v1 = empty in let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $v1 $v2)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v18 $v9)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19 = Const(color, 0) in let $v20 = (tuple2 $v9 $v19) in let $v21 = (tuple2_first $v20) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v18 $v21)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v19 $v22 $v9)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v14) in let $v16, $v17, $v18 = rev($v8 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v20, $v21 = rev($v3 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v20 $v21)) in let $v22 = (tuple2 $v9 $v21) in let $v23 = (tuple2_first $v22) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v18 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in let $v23 = Const(color, 0) in let $v24 = (tuple2 $v9 $v23) in let $v25 = (tuple2_first $v24) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v19 $v22 $v25)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v14) in let $v16 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v16)) in let $v17, $v18, $v19 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v17 $v18 $v19)) in let $v20, $v21, $v22 = rev($v18 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in let $v24, $v25, $v26 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v24 $v25 $v26)) in let $v27, $v28 = rev($v25 = (cons $v27 $v28)) in let $v29 = (cons $v21 $v28) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v29 $v9)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v18) in let $v20, $v21, $v22 = rev($v8 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v20 $v21 $v22)) in let $v24, $v25 = rev($v3 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v24 $v25)) in let $v26 = (tuple2 $v9 $v25) in let $v27 = (tuple2_first $v26) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v19 $v22 $v27)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v7 $v8)) in let $v9, $v10 = rev($v8 = (rev_list_elements $v9 $v10)) in let $v11 = rev($v10 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v5 $v12) in let $v15, $v16 = rev($inp0 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v15 $v16)) in let $v17, $v18 = rev($v16 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v22)) in let $v23 = rev($v22 = (rows $v23)) in let $v24, $v25 = rev($v23 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v28)) in let $v29 = (cons $v20 $v26) in let $v30 = (cons $v13 $v29) in let $v31 = rev($v8 = (tuple2_first $v31)) in let $v32 = (tuple2_first $v31) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v30 $v32)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v7 $v8)) in let $v9, $v10 = rev($v8 = (rev_list_elements $v9 $v10)) in let $v11 = rev($v10 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v5 $v12) in let $v15, $v16 = rev($inp0 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v15 $v16)) in let $v17, $v18 = rev($v16 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v22)) in let $v23 = rev($v22 = (rows $v23)) in let $v24, $v25 = rev($v23 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v24 $v25)) in let $v26, $v27, $v28 = rev($v24 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v26 $v27 $v28)) in let $v29 = (cons $v20 $v26) in let $v30 = (cons $v13 $v29) in let $v31 = rev($v8 = (tuple2_second $v31)) in let $v32 = (tuple2_second $v31) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v30 $v32)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v8 $v9)) in let $v10, $v11 = rev($v8 = (cons $v10 $v11)) in let $v12, $v13, $v14 = rev($v11 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v12 $v13 $v14)) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = (tuple2 $v14 $v16) in let $v18 = (tuple2_first $v17) in let $v19 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v3 $v18) in let $v20 = rev($inp0 = (#(lambda (columns_to_grid (reverse $0))) $v20)) in let $v21, $v22, $v23 = rev($v20 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v21 $v22 $v23)) in let $v24, $v25, $v26 = rev($v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v24 $v25 $v26)) in let $v28, $v29, $v30 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v28 $v29 $v30)) in let $v31, $v32 = rev($v29 = (cons $v31 $v32)) in let $v33 = (cons $v25 $v32) in (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v19 $v33 $v9)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v16 $v17)) in let $v18 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v9 $v17) in let $v19 = (cons $v16 $v8) in (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v18 $v19)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v2 = empty in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v16 $v17)) in let $v18 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v2 $v9 $v17) in let $v19 = (cons $v16 $v8) in (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v18 $v19)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = Const(list(list(color)), Vector{Any}[]) in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v18 $v19 $v20)) in let $v22 = (#(lambda (cons $0 Const(list(color), Any[]))) $v20) in let $v23 = (cons $v19 $v22) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = Const(list(list(color)), Vector{Any}[]) in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v18 $v19 $v20)) in let $v21 = empty in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v18 $v19 $v20)) in let $v22 = (#(lambda (cons $0 Const(list(color), Any[]))) $v20) in let $v23 = (cons $v19 $v22) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty in let $v13 = (cons $v11 $v12) in let $v15, $v16, $v17 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v15 $v16 $v17)) in let $v18, $v19, $v20 = rev($v16 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v18 $v19 $v20)) in let $v21 = empty in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v19 $v22) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v23)",
    "let $v2, $v3, $v4 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11 = (cons $v7 $v8) in let $v12 = empty_set in let $v13 = (collect $v12) in let $v14 = (cons $v11 $v13) in let $v16, $v17, $v18 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v16 $v17 $v18)) in let $v19, $v20, $v21 = rev($v17 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v19 $v20 $v21)) in let $v22 = empty in let $v23 = (cons $v21 $v22) in let $v24 = (cons $v20 $v23) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v14 $v24)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v16 $v17)) in let $v18 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v9 $v17) in let $v20, $v21, $v22 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v20 $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v23 $v24 $v25)) in let $v26 = (cons $v24 $v8) in (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v18 $v26)",
    "let $v1 = Const(list(list(color)), Any[]) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v4)) in let $v5, $v6, $v7 = rev($v4 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v5 $v6 $v7)) in let $v8, $v9, $v10 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v12, $v13, $v14 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v12 $v13 $v14)) in let $v15, $v16, $v17 = rev($v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v15 $v16 $v17)) in let $v18 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v9 $v17) in let $v20, $v21, $v22 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v20 $v21 $v22)) in let $v23, $v24, $v25 = rev($v21 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v23 $v24 $v25)) in let $v26 = rev($v24 = (tuple2_second $v26)) in let $v27 = (tuple2_second $v26) in let $v28 = (cons $v27 $v8) in (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v1 $v18 $v28)",
    "let $v1 = empty_set in let $v2 = (collect $v1) in let $v4, $v5 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v4 $v5)) in let $v6, $v7, $v8 = rev($v5 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v6 $v7 $v8)) in let $v9, $v10, $v11 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v9 $v10 $v11)) in let $v13, $v14, $v15 = rev($inp0 = (#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v13 $v14 $v15)) in let $v16, $v17, $v18 = rev($v15 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v16 $v17 $v18)) in let $v19 = (#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0))) $v10 $v18) in let $v21, $v22, $v23 = rev($inp0 = (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v21 $v22 $v23)) in let $v24, $v25, $v26 = rev($v22 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v24 $v25 $v26)) in let $v27 = (cons $v25 $v9) in (#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0))))) $v2 $v19 $v27)",
    "let $v2 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v2)) in let $v3 = (concat $v1 $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v4 = rev($inp0 = (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) $v3 $v4)) in let $v5 = rev($v4 = (rows_to_grid $v5)) in let $v6 = (reverse $v5) in let $v7 = (concat $v1 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5, $v6 = rev($v3 = (tuple2 $v5 $v6)) in let $v7 = rev($v5 = (rows_to_grid $v7)) in let $v8 = rev($inp0 = (columns_to_grid $v8)) in let $v9 = rev($v8 = (rows $v9)) in let $v11 = rev($v9 = (#(lambda (columns_to_grid (reverse $0))) $v11)) in let $v12 = (concat $v7 $v11) in (rows_to_grid $v12)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (cons $v7 $v8) in let $v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v9) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v10 $v3)",
    "let $v3, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v6 $v4)) in let $v8 = rev($v2 = (tuple2_second $v8)) in let $v9 = (tuple2_second $v8) in let $v10 = Const(list(list(color)), Any[]) in let $v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v9 $v4) in let $v13 = (cons $v6 $v12) in let $v14 = (concat $v1 $v13) in (rows_to_grid $v14)",
    "let $v3, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v6 $v4)) in let $v8 = rev($v2 = (reverse $v8)) in let $v9 = (reverse $v8) in let $v10 = Const(list(list(color)), Any[]) in let $v12 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v10 $v9 $v4) in let $v13 = (cons $v6 $v12) in let $v14 = (concat $v1 $v13) in (rows_to_grid $v14)",
    "let $v3, $v2 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v3 $v2)) in let $v7, $v6, $v4 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v6 $v4)) in let $v8, $v9 = rev($v2 = (cons $v8 $v9)) in let $v10 = (cons $v8 $v9) in let $v11 = Const(list(list(color)), Any[]) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v11 $v10 $v4) in let $v14 = (cons $v6 $v13) in let $v15 = (concat $v1 $v14) in (rows_to_grid $v15)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (cons $v7 $v8) in let $v10 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v9) in let $v11 = rev($v3 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v10 $v12)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v6 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v8 $v9)) in let $v10 = Const(list(color), Any[1]) in let $v11 = (cons $v8 $v10) in let $v12 = (cons $v9 $v11) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v12) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v13 $v3)",
    "let $v1 = rev($inp0 = (#(lambda (rows_to_grid (reverse $0))) $v1)) in let $v2, $v3 = rev($inp0 = (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v4 $v5 $v6)) in let $v7 = Const(list(color), Any[1]) in let $v8, $v9, $v10 = rev($v3 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v8 $v9 $v10)) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v7 $v10 $v11) in let $v14 = (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $v1 $v5 $v13) in (#(lambda (lambda (rows_to_grid (cons $0 $1)))) $v14 $v3)"
  ],
  "abstractions": [
    {
      "body": "(dreamcoder_abstraction_0 (dreamcoder_abstraction_3 #0 #1 #2))",
      "dreamcoder": "#(lambda (lambda (lambda (#(lambda (rows_to_grid (reverse $0))) (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0)))))",
      "arity": 3,
      "name": "fn_6",
      "utility": 1412,
      "final_cost": 37652,
      "compression_ratio": 1.0429193668331032,
      "cumulative_compression_ratio": 1.0429193668331032,
      "num_uses": 44,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_6 $v2 $v3 $v4": "(dreamcoder_abstraction_0 $v1)"
        },
        {
          "fn_6 $v2 $v3 $v4": "(dreamcoder_abstraction_0 $v1)"
        },
        {
          "fn_6 $v2 $v3 $v4": "(dreamcoder_abstraction_0 $v1)"
        },
        {
          "fn_6 $v2 $v3 $v4": "(dreamcoder_abstraction_0 $v1)"
        },
        {
          "fn_6 $v2 $v3 $v4": "(dreamcoder_abstraction_0 $v1)"
        },
        {
          "fn_6 $v12 $v13 $v14": "(dreamcoder_abstraction_0 $v11)"
        },
        {
          "fn_6 $v13 $v14 $v15": "(dreamcoder_abstraction_0 $v12)"
        },
        {
          "fn_6 $v15 $v18 $v9": "(dreamcoder_abstraction_0 $v19)"
        },
        {
          "fn_6 $v1 $v8 $v20": "(dreamcoder_abstraction_0 $v21)"
        },
        {
          "fn_6 $v15 $v18 $v21": "(dreamcoder_abstraction_0 $v22)"
        },
        {
          "fn_6 $v1 $v13 $v22": "(dreamcoder_abstraction_0 $v23)"
        },
        {
          "fn_6 $v1 $v13 $v22": "(dreamcoder_abstraction_0 $v23)"
        },
        {
          "fn_6 $v1 $v13 $v22": "(dreamcoder_abstraction_0 $v23)"
        },
        {
          "fn_6 $v1 $v8 $v22": "(dreamcoder_abstraction_0 $v23)"
        },
        {
          "fn_6 $v19 $v22 $v9": "(dreamcoder_abstraction_0 $v23)"
        },
        {
          "fn_6 $v15 $v18 $v23": "(dreamcoder_abstraction_0 $v24)"
        },
        {
          "fn_6 $v19 $v22 $v25": "(dreamcoder_abstraction_0 $v26)"
        },
        {
          "fn_6 $v19 $v22 $v27": "(dreamcoder_abstraction_0 $v28)"
        },
        {
          "fn_6 $v15 $v29 $v9": "(dreamcoder_abstraction_0 $v30)"
        },
        {
          "fn_6 $v31 $v32 $v33": "(dreamcoder_abstraction_0 $v30)"
        },
        {
          "fn_6 $v31 $v32 $v33": "(dreamcoder_abstraction_0 $v30)"
        },
        {
          "fn_6 $v31 $v32 $v33": "(dreamcoder_abstraction_0 $v30)"
        },
        {
          "fn_6 $v19 $v33 $v9": "(dreamcoder_abstraction_0 $v34)"
        },
        {
          "fn_6 $v2 $v3 $v4": "(dreamcoder_abstraction_0 $v5)"
        },
        {
          "fn_6 $v28 $v44 $v68": "(dreamcoder_abstraction_0 $v69)"
        },
        {
          "fn_6 $v28 $v47 $v68": "(dreamcoder_abstraction_0 $v69)"
        },
        {
          "fn_6 $v1 $v3 $v6": "(dreamcoder_abstraction_0 $v7)"
        },
        {
          "fn_6 $v5 $v2 $v4": "(dreamcoder_abstraction_0 $v7)"
        },
        {
          "fn_6 $v28 $v49 $v70": "(dreamcoder_abstraction_0 $v71)"
        },
        {
          "fn_6 $v10 $v11 $v12": "(dreamcoder_abstraction_0 $v9)"
        },
        {
          "fn_6 $v10 $v11 $v12": "(dreamcoder_abstraction_0 $v9)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(dreamcoder_abstraction_1 (columns (dreamcoder_abstraction_0 #0)))",
      "dreamcoder": "#(lambda (#(lambda (columns_to_grid (reverse $0))) (columns (#(lambda (rows_to_grid (reverse $0))) $0))))",
      "arity": 1,
      "name": "fn_7",
      "utility": 1313,
      "final_cost": 36036,
      "compression_ratio": 1.0448440448440448,
      "cumulative_compression_ratio": 1.0896880896880896,
      "num_uses": 5,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_7 $v3": "(dreamcoder_abstraction_1 $v1)"
        },
        {
          "fn_7 $v1": "(dreamcoder_abstraction_1 $v3)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(dreamcoder_abstraction_5 (rows (dreamcoder_abstraction_5 #0)))",
      "dreamcoder": "#(lambda (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) (rows (#(lambda (#(lambda (lambda (columns_to_grid (concat (reverse $0) $1)))) $0 $0)) $0))))",
      "arity": 1,
      "name": "fn_8",
      "utility": 505,
      "final_cost": 35228,
      "compression_ratio": 1.0229363006699217,
      "cumulative_compression_ratio": 1.1146815033496082,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_8 $v3": "(dreamcoder_abstraction_5 $v5)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(tuple2_second (tuple2 #0 #1))",
      "dreamcoder": "#(lambda (lambda (tuple2_second (tuple2 $1 $0))))",
      "arity": 2,
      "name": "fn_9",
      "utility": 403,
      "final_cost": 34622,
      "compression_ratio": 1.01750332158743,
      "cumulative_compression_ratio": 1.1341921321702964,
      "num_uses": 27,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_9 $v2 $v3": "(tuple2_second $v1)"
        },
        {
          "fn_9 $v10 $v6": "(tuple2_second $v11)"
        },
        {
          "fn_9 $v8 $v6": "(tuple2_second $v11)"
        },
        {
          "fn_9 $v8 $v9": "(tuple2_second $v11)"
        },
        {
          "fn_9 $v9 $v6": "(tuple2_second $v11)"
        },
        {
          "fn_9 $v15 $v16": "(tuple2_second $v14)"
        },
        {
          "fn_9 $v20 $v21": "(tuple2_second $v19)"
        },
        {
          "fn_9 $v3 $v4": "(tuple2_second $v2)"
        },
        {
          "fn_9 $v24 $v25": "(tuple2_second $v23)"
        },
        {
          "fn_9 $v22 $v23": "(tuple2_second $v24)"
        },
        {
          "fn_9 $v21 $v25": "(tuple2_second $v26)"
        },
        {
          "fn_9 $v29 $v28": "(tuple2_second $v30)"
        },
        {
          "fn_9 $v29 $v28": "(tuple2_second $v30)"
        },
        {
          "fn_9 $v28 $v30": "(tuple2_second $v31)"
        },
        {
          "fn_9 $v4 $v2": "(tuple2_second $v5)"
        },
        {
          "fn_9 $v2 $v4": "(tuple2_second $v6)"
        },
        {
          "fn_9 $v65 $v50": "(tuple2_second $v66)"
        },
        {
          "fn_9 $v1 $v8": "(tuple2_second $v9)"
        },
        {
          "fn_9 $v6 $v7": "(tuple2_second $v9)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(dreamcoder_abstraction_3 Const(list(color), Any[]) #0 #1)",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) Const(list(color), Any[]) $1 $0)))",
      "arity": 2,
      "name": "fn_10",
      "utility": 403,
      "final_cost": 34016,
      "compression_ratio": 1.0178151458137348,
      "cumulative_compression_ratio": 1.1543979303857008,
      "num_uses": 22,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_10 $v20 $v10": "(dreamcoder_abstraction_3 $v14 $v20 $v10)"
        },
        {
          "fn_10 $v9 $v24": "(dreamcoder_abstraction_3 $v17 $v9 $v24)"
        },
        {
          "fn_10 $v12 $v7": "(dreamcoder_abstraction_3 $v2 $v12 $v7)"
        },
        {
          "fn_10 $v12 $v7": "(dreamcoder_abstraction_3 $v2 $v12 $v7)"
        },
        {
          "fn_10 $v12 $v7": "(dreamcoder_abstraction_3 $v2 $v12 $v7)"
        },
        {
          "fn_10 $v6 $v7": "(dreamcoder_abstraction_3 $v2 $v6 $v7)"
        },
        {
          "fn_10 $v9 $v17": "(dreamcoder_abstraction_3 $v2 $v9 $v17)"
        },
        {
          "fn_10 $v10 $v15": "(dreamcoder_abstraction_3 $v3 $v10 $v15)"
        },
        {
          "fn_10 $v10 $v18": "(dreamcoder_abstraction_3 $v3 $v10 $v18)"
        },
        {
          "fn_10 $v9 $v23": "(dreamcoder_abstraction_3 $v3 $v9 $v23)"
        },
        {
          "fn_10 $v15 $v19": "(dreamcoder_abstraction_3 $v9 $v15 $v19)"
        },
        {
          "fn_10 $v15 $v21": "(dreamcoder_abstraction_3 $v9 $v15 $v21)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rows_to_grid (dreamcoder_abstraction_3 #0 #1 #2))",
      "dreamcoder": "#(lambda (lambda (lambda (rows_to_grid (#(lambda (lambda (lambda (cons $0 (cons $1 $2))))) $2 $1 $0)))))",
      "arity": 3,
      "name": "fn_11",
      "utility": 402,
      "final_cost": 33410,
      "compression_ratio": 1.0181382819515115,
      "cumulative_compression_ratio": 1.175336725531278,
      "num_uses": 31,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_11 $v5 $v4 $v2": "(rows_to_grid $v1)"
        },
        {
          "fn_11 $v11 $v12 $v13": "(rows_to_grid $v10)"
        },
        {
          "fn_11 $v15 $v16 $v17": "(rows_to_grid $v14)"
        },
        {
          "fn_11 $v16 $v17 $v18": "(rows_to_grid $v15)"
        },
        {
          "fn_11 $v20 $v21 $v22": "(rows_to_grid $v19)"
        },
        {
          "fn_11 $v20 $v21 $v22": "(rows_to_grid $v19)"
        },
        {
          "fn_11 $v6 $v5 $v3": "(rows_to_grid $v2)"
        },
        {
          "fn_11 $v1 $v18 $v19": "(rows_to_grid $v20)"
        },
        {
          "fn_11 $v1 $v18 $v19": "(rows_to_grid $v20)"
        },
        {
          "fn_11 $v21 $v22 $v23": "(rows_to_grid $v20)"
        },
        {
          "fn_11 $v24 $v25 $v26": "(rows_to_grid $v23)"
        },
        {
          "fn_11 $v1 $v18 $v26": "(rows_to_grid $v27)"
        },
        {
          "fn_11 $v28 $v29 $v30": "(rows_to_grid $v27)"
        },
        {
          "fn_11 $v2 $v19 $v27": "(rows_to_grid $v28)"
        },
        {
          "fn_11 $v1 $v18 $v28": "(rows_to_grid $v29)"
        },
        {
          "fn_11 $v5 $v6 $v7": "(rows_to_grid $v4)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(cons #0 Const(list(color), Any[]))",
      "dreamcoder": "#(lambda (cons $0 Const(list(color), Any[])))",
      "arity": 1,
      "name": "fn_12",
      "utility": 202,
      "final_cost": 33006,
      "compression_ratio": 1.0122401987517422,
      "cumulative_compression_ratio": 1.1897230806520027,
      "num_uses": 8,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_12 $v10": "(cons $v10 $v11)"
        },
        {
          "fn_12 $v20": "(cons $v20 $v21)"
        },
        {
          "fn_12 $v55": "(cons $v55 $v57)"
        },
        {
          "fn_12 $v58": "(cons $v58 $v60)"
        },
        {
          "fn_12 $v60": "(cons $v60 $v62)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_9 (tuple2_second #0) (tuple2_second #1))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (tuple2_second (tuple2 $1 $0)))) (tuple2_second $1) (tuple2_second $0))))",
      "arity": 2,
      "name": "fn_13",
      "utility": 100,
      "final_cost": 32602,
      "compression_ratio": 1.012391877798908,
      "cumulative_compression_ratio": 1.2044659836819827,
      "num_uses": 5,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_13 $v21 $v21": "(fn_9 $v22 $v23)"
        },
        {
          "fn_13 $v27 $v29": "(fn_9 $v28 $v30)"
        }
      ],
      "dc_comparison_millis": null
    }
  ]
}
