{
  "original_cost": 70769,
  "final_cost": 25146,
  "compression_ratio": 2.814324345820409,
  "num_abstractions": 18,
  "original": [
    "let $v1, $v2, $v3 = rev($inp0 = (rev_fix_param (rev_select_grid (lam (eq? $0 $v1)) $v2 $v3) $v1 (lam Const(color, 0)))) in let $v4, $v5, $v6 = rev($v2 = (repeat_grid $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v3 = (rev_grid_elements $v7 $v8 $v9)) in let $v10 = rev($v7 = (rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (not (gt? (+ (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2))))) 1))) $0))) $1 $0))) empty_set $v10)) in let $v11 = rev($v10 = (map_set (lam (map_set (lam (tuple2 $0 (tuple2_second $1))) (tuple2_first $0))) $v11)) in let $v12 = rev($v11 = (map_set (lam (tuple2 ((lam ((lam (rev_fix_param (map_set (lam (tuple2 (+ (tuple2_first $0) (tuple2_first $1)) (+ (tuple2_second $0) (tuple2_second $1)))) $1) $0 (lam (tuple2 (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_first $0)) (collect $0)) max_int) (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_second $0)) (collect $0)) max_int))))) (tuple2_first (tuple2_first $1)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $v12)) in let $v13, $v14, $v15 = rev($v12 = (rev_fix_param (rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) $v13)) $v14 $v15) $v13 (lam Const(set(tuple2(int, int)), Set([(0, 0), (0, 2), (2, 0), (1, 1), (0, 1), (2, 2), (2, 1)]))))) in let $v16 = Const(int, 1) in let $v17 = (map_set (lam (tuple2 (tuple2 (tuple2 (+ (tuple2_first (tuple2_first (tuple2_first $0))) $v16) (tuple2_second (tuple2_first (tuple2_first $0)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $v14) in let $v18 = (rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) $v13)) $v17 $v15) in let $v19 = (map_set (lam (tuple2 ((lam ((lam (rev_fix_param (map_set (lam (tuple2 (+ (tuple2_first $0) (tuple2_first $1)) (+ (tuple2_second $0) (tuple2_second $1)))) $1) $0 (lam (tuple2 (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_first $0)) (collect $0)) max_int) (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_second $0)) (collect $0)) max_int))))) (tuple2_first (tuple2_first $1)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $v18) in let $v20 = (map_set (lam (map_set (lam (tuple2 $0 (tuple2_second $1))) (tuple2_first $0))) $v19) in let $v21 = (rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (not (gt? (+ (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2))))) 1))) $0))) $1 $0))) empty_set $v20) in let $v22 = (rev_grid_elements $v21 $v8 $v9) in let $v23 = (repeat_grid $v4 $v5 $v6) in (rev_select_grid (lam (eq? $0 $v1)) $v23 $v22)",
    "let $v1, $v2, $v3 = rev($inp0 = (rev_fix_param (rev_select_grid (lam (eq? $0 $v1)) $v2 $v3) $v1 (lam Const(color, 0)))) in let $v4, $v5, $v6 = rev($v2 = (repeat_grid $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v3 = (rev_grid_elements $v7 $v8 $v9)) in let $v10 = rev($v7 = (rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (and (not (gt? (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) 1)) (not (gt? (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2)))) 1)))) $0))) $1 $0))) empty_set $v10)) in let $v11 = rev($v10 = (map_set (lam (map_set (lam (tuple2 $0 (tuple2_second $1))) (tuple2_first $0))) $v11)) in let $v12 = rev($v11 = (map_set (lam (tuple2 ((lam ((lam (rev_fix_param (map_set (lam (tuple2 (+ (tuple2_first $0) (tuple2_first $1)) (+ (tuple2_second $0) (tuple2_second $1)))) $1) $0 (lam (tuple2 (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_first $0)) (collect $0)) max_int) (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_second $0)) (collect $0)) max_int))))) (tuple2_first (tuple2_first $1)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $v12)) in let $v13, $v14, $v15 = rev($v12 = (rev_fix_param (rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) $v13)) $v14 $v15) $v13 (lam Const(set(tuple2(int, int)), Set([(0, 0), (0, 2), (2, 0), (1, 1), (0, 1), (2, 2), (2, 1)]))))) in let $v16 = Const(int, 1) in let $v17 = (map_set (lam (tuple2 (tuple2 (tuple2 (+ (tuple2_first (tuple2_first (tuple2_first $0))) $v16) (tuple2_second (tuple2_first (tuple2_first $0)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $v14) in let $v18 = (rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) $v13)) $v17 $v15) in let $v19 = (map_set (lam (tuple2 ((lam ((lam (rev_fix_param (map_set (lam (tuple2 (+ (tuple2_first $0) (tuple2_first $1)) (+ (tuple2_second $0) (tuple2_second $1)))) $1) $0 (lam (tuple2 (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_first $0)) (collect $0)) max_int) (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_second $0)) (collect $0)) max_int))))) (tuple2_first (tuple2_first $1)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $v18) in let $v20 = (map_set (lam (map_set (lam (tuple2 $0 (tuple2_second $1))) (tuple2_first $0))) $v19) in let $v21 = (rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (and (not (gt? (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) 1)) (not (gt? (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2)))) 1)))) $0))) $1 $0))) empty_set $v20) in let $v22 = (rev_grid_elements $v21 $v8 $v9) in let $v23 = (repeat_grid $v4 $v5 $v6) in (rev_select_grid (lam (eq? $0 $v1)) $v23 $v22)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(list(list(color)), Any[]) in let $v8 = (cons $v5 $v7) in let $v9 = (cons $v3 $v8) in let $v10 = (cons $v1 $v9) in (rows_to_grid $v10)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = (tuple2 $v6 $v4) in let $v8 = (tuple2_first $v7) in let $v9 = (cons $v1 $v8) in (rows_to_grid $v9)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($v2 = (columns $v7)) in let $v8 = rev($v7 = (tuple2_first $v8)) in let $v9 = (tuple2 $v6 $v8) in let $v10 = (tuple2_first $v9) in let $v11 = (cons $v1 $v10) in (rows_to_grid $v11)",
    "let $v1 = Const(int, 3) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (index2 $v1 $v1 $v3) in let $v5 = Const(list(color), Any[0, 0]) in let $v6 = (cons $v4 $v5) in let $v7, $v8 = rev($v2 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(list(list(color)), Any[]) in let $v12 = (cons $v9 $v11) in let $v13 = (cons $v7 $v12) in let $v14 = (cons $v6 $v13) in (rows_to_grid $v14)",
    "let $v1 = Const(int, 3) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (index2 $v1 $v1 $v3) in let $v5 = Const(list(color), Any[0, 0]) in let $v6 = (cons $v4 $v5) in let $v7, $v8 = rev($v2 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(list(list(color)), Any[]) in let $v12 = (cons $v9 $v11) in let $v13 = (cons $v7 $v12) in let $v14 = (cons $v6 $v13) in (rows_to_grid $v14)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (tuple2_second $v7)) in let $v8 = rev($v7 = (tuple2_first $v8)) in let $v9, $v10 = rev($v8 = (tuple2 $v9 $v10)) in let $v11 = (tuple2 $v6 $v9) in let $v12 = (tuple2_first $v11) in let $v13 = (cons $v1 $v12) in (rows_to_grid $v13)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (columns_to_grid $v7)) in let $v8 = rev($v7 = (columns $v8)) in let $v9 = rev($v8 = (tuple2_first $v9)) in let $v10 = (tuple2 $v6 $v9) in let $v11 = (tuple2_first $v10) in let $v12 = (cons $v1 $v11) in (rows_to_grid $v12)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (columns_to_grid $v7)) in let $v8 = rev($v7 = (columns $v8)) in let $v9 = rev($v8 = (rows_to_grid $v9)) in let $v10 = (tuple2 $v6 $v9) in let $v11 = (tuple2_first $v10) in let $v12 = (cons $v1 $v11) in (rows_to_grid $v12)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (columns_to_grid $v7)) in let $v8 = rev($v7 = (reverse $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (tuple2 $v6 $v9) in let $v12 = (tuple2_first $v11) in let $v13 = (cons $v1 $v12) in (rows_to_grid $v13)",
    "let $v1 = Const(color, 0) in let $v2 = empty in let $v3 = (cons $v1 $v2) in let $v4 = (car $v3) in let $v5 = Const(list(color), Any[0, 0]) in let $v6 = (cons $v4 $v5) in let $v7 = rev($inp0 = (rows_to_grid $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12 = Const(list(list(color)), Any[]) in let $v13 = (cons $v10 $v12) in let $v14 = (cons $v8 $v13) in let $v15 = (cons $v6 $v14) in (rows_to_grid $v15)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in let $v4 = (reverse $v3) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (columns $v3) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (rows_to_grid $v2) in let $v4 = (columns $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = (reverse $v3) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (rows_to_grid $v2) in let $v4 = rev($v1 = (tuple2_second $v4)) in let $v5 = (tuple2 $v3 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v1 = (rows $inp0) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in $v2",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = 1 in let $v4 = (tuple2 $v2 $v3) in (tuple2_first $v4)",
    "let $v1 = 1 in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (tuple2 $v1 $v3) in (tuple2_second $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (collect $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (columns $v4)) in let $v5 = (tuple2 $v2 $v4) in (tuple2_second $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($inp0 = (tuple2_first $v3)) in let $v4, $v5 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = (tuple2 $v2 $v4) in (tuple2_first $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in let $v5 = (reverse $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in let $v5 = (reverse $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in let $v5 = (reverse $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in let $v5 = (reverse $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (rows_to_grid $v2) in let $v4 = (columns $v3) in let $v5 = (reverse $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (columns_to_grid $v4) in let $v6 = (rows $v5) in let $v7 = (reverse $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (columns_to_grid $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (columns_to_grid $v5) in let $v7 = (rows $v6) in let $v8 = (reverse $v7) in (rows_to_grid $v8)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (columns_to_grid $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (rows_to_grid $v5) in let $v7 = (columns $v6) in let $v8 = (reverse $v7) in (rows_to_grid $v8)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in let $v5 = (reverse $v4) in let $v6 = (columns_to_grid $v5) in let $v7 = (rows $v6) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (columns_to_grid $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (columns_to_grid $v5) in let $v7 = (rows $v6) in let $v8 = (reverse $v7) in let $v9 = (columns_to_grid $v8) in let $v10 = (rows $v9) in (columns_to_grid $v10)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = Const(int, 6) in let $v11 = (concat $v2 $v2) in let $v12 = (concat $v11 $v7) in let $v13 = (reverse $v12) in let $v14 = Const(list(list(color)), Any[]) in let $v15 = (cons $v13 $v14) in let $v16 = (tuple2 $v10 $v15) in let $v17 = (tuple2_second $v16) in let $v18 = (cons $v9 $v17) in (rows_to_grid $v18)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = (concat $v2 $v2) in let $v11 = (concat $v10 $v7) in let $v12 = (reverse $v11) in let $v13 = Const(list(list(color)), Any[]) in let $v14 = (cons $v12 $v13) in let $v15 = (tuple2 $v2 $v14) in let $v16 = (tuple2_second $v15) in let $v17 = (cons $v9 $v16) in (rows_to_grid $v17)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7 = (reverse $v5) in let $v8 = (reverse $v7) in let $v9 = (concat $v6 $v8) in let $v10 = (concat $v2 $v2) in let $v11, $v12 = rev($v1 = (cons $v11 $v12)) in let $v13 = (concat $v10 $v11) in let $v14 = (reverse $v13) in let $v15 = Const(list(list(color)), Any[]) in let $v16 = (cons $v14 $v15) in let $v17 = (tuple2 $v2 $v16) in let $v18 = (tuple2_second $v17) in let $v19 = (cons $v9 $v18) in (rows_to_grid $v19)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (tuple2_first $v10)) in let $v11, $v12 = rev($v10 = (tuple2 $v11 $v12)) in let $v13 = rev($v11 = (tuple2_second $v13)) in let $v14 = (concat $v2 $v2) in let $v15 = (concat $v14 $v7) in let $v16 = (reverse $v15) in let $v17 = Const(list(list(color)), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (tuple2 $v13 $v18) in let $v20 = (tuple2_second $v19) in let $v21 = (cons $v9 $v20) in (rows_to_grid $v21)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (repeat $v13 $v14)) in let $v15 = (concat $v2 $v2) in let $v16 = (concat $v15 $v7) in let $v17 = (reverse $v16) in let $v18 = Const(list(list(color)), Any[]) in let $v19 = (cons $v17 $v18) in let $v20 = (tuple2 $v13 $v19) in let $v21 = (tuple2_second $v20) in let $v22 = (cons $v9 $v21) in (rows_to_grid $v22)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (repeat $v13 $v14)) in let $v15 = (concat $v2 $v2) in let $v16 = (concat $v15 $v7) in let $v17 = (reverse $v16) in let $v18 = Const(list(list(color)), Any[]) in let $v19 = (cons $v17 $v18) in let $v20 = (tuple2 $v14 $v19) in let $v21 = (tuple2_second $v20) in let $v22 = (cons $v9 $v21) in (rows_to_grid $v22)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11 = rev($v10 = (reverse $v11)) in let $v12 = rev($v11 = (tuple2_first $v12)) in let $v13 = rev($v12 = (tuple2_first $v13)) in let $v14 = (concat $v2 $v2) in let $v15 = (concat $v14 $v7) in let $v16 = (reverse $v15) in let $v17 = Const(list(list(color)), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (tuple2 $v13 $v18) in let $v20 = (tuple2_second $v19) in let $v21 = (cons $v9 $v20) in (rows_to_grid $v21)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11 = rev($v10 = (rows $v11)) in let $v12 = rev($v11 = (rows_to_grid $v12)) in let $v13 = rev($v12 = (tuple2_first $v13)) in let $v14 = (concat $v2 $v2) in let $v15 = (concat $v14 $v7) in let $v16 = (reverse $v15) in let $v17 = Const(list(list(color)), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (tuple2 $v13 $v18) in let $v20 = (tuple2_second $v19) in let $v21 = (cons $v9 $v20) in (rows_to_grid $v21)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = rev($v12 = (tuple2_first $v13)) in let $v14 = rev($v13 = (tuple2_first $v14)) in let $v15 = (concat $v2 $v2) in let $v16 = (concat $v15 $v7) in let $v17 = (reverse $v16) in let $v18 = Const(list(list(color)), Any[]) in let $v19 = (cons $v17 $v18) in let $v20 = (tuple2 $v14 $v19) in let $v21 = (tuple2_second $v20) in let $v22 = (cons $v9 $v21) in (rows_to_grid $v22)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11 = rev($v10 = (reverse $v11)) in let $v12 = rev($v11 = (reverse $v12)) in let $v13 = rev($v12 = (tuple2_first $v13)) in let $v14, $v15 = rev($v13 = (tuple2 $v14 $v15)) in let $v16 = (concat $v2 $v2) in let $v17 = (concat $v16 $v7) in let $v18 = (reverse $v17) in let $v19 = Const(list(list(color)), Any[]) in let $v20 = (cons $v18 $v19) in let $v21 = (tuple2 $v14 $v20) in let $v22 = (tuple2_second $v21) in let $v23 = (cons $v9 $v22) in (rows_to_grid $v23)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (rows_to_grid $v4)) in let $v5 = (reverse $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in let $v4 = (reverse $v3) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = (reverse $v3) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2, $v3 = rev($v1 = (cons $v2 $v3)) in let $v4 = (cons $v2 $v3) in let $v5 = (reverse $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = rev($v1 = (reverse $v3)) in let $v4 = (rows_to_grid $v3) in let $v5 = (tuple2 $v2 $v4) in (tuple2_second $v5)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (reverse $v4)) in let $v5 = (rows_to_grid $v4) in let $v6 = (tuple2 $v2 $v5) in (tuple2_second $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (reverse $v4)) in let $v5 = (rows_to_grid $v4) in let $v6 = (tuple2 $v2 $v5) in (tuple2_second $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (concat $v1 $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (concat $v1 $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (concat $v3 $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v1) in let $v5 = (concat $v3 $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in let $v5 = (concat $v1 $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (tuple2_first $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v3 $v5) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (columns_to_grid $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in let $v7 = (concat $v4 $v6) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($inp0 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = rev($v3 = (columns_to_grid $v5)) in let $v6 = (reverse $v5) in let $v7 = (concat $v1 $v6) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (columns_to_grid $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = (reverse $v5) in let $v7 = (concat $v4 $v6) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4, $v5 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = rev($v4 = (rows_to_grid $v6)) in let $v7 = rev($v1 = (reverse $v7)) in let $v8 = (concat $v6 $v7) in (columns_to_grid $v8)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (concat $v1 $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (concat $v1 $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in let $v4 = (concat $v3 $v2) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (concat $v1 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v1) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in let $v4 = (reverse $v1) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = (reverse $v3) in let $v6 = (concat $v1 $v5) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = (tuple2_first $v4) in let $v6 = (concat $v3 $v5) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4, $v5 = rev($v2 = (tuple2 $v4 $v5)) in let $v6 = (reverse $v4) in let $v7 = (concat $v3 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in let $v5 = (reverse $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in let $v5 = (reverse $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4, $v5 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = (columns_to_grid $v4) in let $v7 = (rows $v6) in let $v8 = (reverse $v7) in (rows_to_grid $v8)",
    "let $v1 = Const(int, 3) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4 = rev($v3 = (columns $v4)) in let $v5 = (rows $v4) in let $v6 = (reverse $v5) in let $v7 = (columns_to_grid $v6) in let $v8 = (tuple2 $v1 $v7) in let $v9 = (tuple2_second $v8) in let $v10 = (rows $v9) in (columns_to_grid $v10)",
    "let $v1 = Const(int, 3) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4 = rev($v3 = (tuple2_first $v4)) in let $v5, $v6 = rev($v4 = (tuple2 $v5 $v6)) in let $v7 = (columns_to_grid $v5) in let $v8 = (rows $v7) in let $v9 = (reverse $v8) in let $v10 = (columns_to_grid $v9) in let $v11 = (tuple2 $v1 $v10) in let $v12 = (tuple2_second $v11) in let $v13 = (rows $v12) in (columns_to_grid $v13)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v2 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (reverse $v4)) in let $v5 = rev($v1 = (reverse $v5)) in let $v6 = rev($v5 = (columns $v6)) in let $v7 = (rows $v6) in let $v8 = (reverse $v7) in let $v9 = (columns_to_grid $v8) in let $v10 = (tuple2 $v4 $v9) in let $v11 = (tuple2_second $v10) in let $v12 = (rows $v11) in (columns_to_grid $v12)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4 = rev($v3 = (tuple2_first $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in let $v7 = rev($v6 = (columns $v7)) in let $v8 = (rows $v7) in let $v9 = (reverse $v8) in let $v10 = (columns_to_grid $v9) in let $v11 = (tuple2 $v4 $v10) in let $v12 = (tuple2_second $v11) in let $v13 = (rows $v12) in (columns_to_grid $v13)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = rev($v3 = (columns $v5)) in let $v6 = rev($v5 = (columns_to_grid $v6)) in let $v7 = rev($v1 = (reverse $v7)) in let $v8 = rev($v7 = (columns $v8)) in let $v9 = (rows $v8) in let $v10 = (reverse $v9) in let $v11 = (columns_to_grid $v10) in let $v12 = (tuple2 $v6 $v11) in let $v13 = (tuple2_second $v12) in let $v14 = (rows $v13) in (columns_to_grid $v14)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v2 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (reverse $v4)) in let $v5 = rev($v1 = (reverse $v5)) in let $v6 = rev($v5 = (tuple2_first $v6)) in let $v7, $v8 = rev($v6 = (tuple2 $v7 $v8)) in let $v9 = (columns_to_grid $v7) in let $v10 = (rows $v9) in let $v11 = (reverse $v10) in let $v12 = (columns_to_grid $v11) in let $v13 = (tuple2 $v4 $v12) in let $v14 = (tuple2_second $v13) in let $v15 = (rows $v14) in (columns_to_grid $v15)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4 = rev($v3 = (tuple2_first $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in let $v7 = rev($v6 = (tuple2_first $v7)) in let $v8, $v9 = rev($v7 = (tuple2 $v8 $v9)) in let $v10 = (columns_to_grid $v8) in let $v11 = (rows $v10) in let $v12 = (reverse $v11) in let $v13 = (columns_to_grid $v12) in let $v14 = (tuple2 $v4 $v13) in let $v15 = (tuple2_second $v14) in let $v16 = (rows $v15) in (columns_to_grid $v16)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (concat $v1 $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (concat $v1 $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (concat $v3 $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in let $v5 = (concat $v1 $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (concat $v1 $v2) in let $v4 = (columns_to_grid $v3) in let $v5 = (rows $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = (reverse $v4) in let $v6 = (concat $v1 $v5) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (tuple2_first $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v3 $v5) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (columns_to_grid $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in let $v7 = (concat $v4 $v6) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (concat $v3 $v4) in let $v6 = (columns_to_grid $v5) in let $v7 = (rows $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (tuple2_second $v4)) in let $v5, $v6 = rev($v4 = (tuple2 $v5 $v6)) in let $v7 = (reverse $v6) in let $v8 = (concat $v3 $v7) in (columns_to_grid $v8)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (concat $v2 $v1) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (concat $v2 $v1) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v1 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (concat $v2 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in let $v5 = (concat $v4 $v1) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($v1 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (concat $v2 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (rows_to_grid $v4)) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v4) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in let $v5 = (tuple2_first $v2) in let $v6 = (concat $v4 $v5) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($inp0 = (tuple2_second $v3)) in let $v4, $v5 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = rev($v5 = (rows_to_grid $v6)) in let $v7 = (concat $v2 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v1 = (columns $v3)) in let $v4 = (tuple2 $v2 $v3) in let $v5 = (tuple2_first $v4) in let $v6 = (concat $v5 $v1) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (rows_to_grid $v4)) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v4) in let $v7 = (columns_to_grid $v6) in let $v8 = (rows $v7) in (columns_to_grid $v8)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (tuple2 $v3 $v2) in (tuple2_first $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5 = rev($v4 = (tuple2_second $v5)) in let $v6 = (tuple2 $v3 $v5) in (tuple2_first $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = rev($v3 = (tuple2_first $v4)) in let $v5 = (tuple2_first $v4) in let $v6 = (rev_list_elements $v2 $v5) in let $v7 = (reverse $v6) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5 = rev($v4 = (rows $v5)) in let $v6 = (tuple2 $v3 $v5) in (tuple2_first $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (tuple2 $v3 $v4) in let $v6 = (tuple2_second $v5) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($v1 = (tuple2_first $v4)) in let $v5, $v6 = rev($v4 = (tuple2 $v5 $v6)) in let $v7 = (tuple2 $v3 $v5) in (tuple2_first $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (tuple2 $v3 $v5) in (tuple2_first $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = (concat $v3 $v3) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (tuple2_second $v4)) in let $v5 = (tuple2 $v3 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4, $v5 = rev($v2 = (tuple2 $v4 $v5)) in let $v6 = (concat $v3 $v4) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($v1 = (tuple2_first $v4)) in let $v5 = (tuple2 $v3 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($v1 = (tuple2_second $v4)) in let $v5 = (tuple2 $v3 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (tuple2 $v3 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5, $v6 = rev($v4 = (tuple2 $v5 $v6)) in let $v7 = rev($v5 = (columns_to_grid $v7)) in let $v8 = (concat $v7 $v7) in (columns_to_grid $v8)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5 = rev($v4 = (tuple2_second $v5)) in let $v6 = (tuple2 $v3 $v5) in (tuple2_first $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (concat $v1 $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (tuple2 $v3 $v5) in (tuple2_first $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in let $v4 = rev($v1 = (tuple2_first $v4)) in let $v5, $v6 = rev($v4 = (tuple2 $v5 $v6)) in let $v7 = (concat $v3 $v5) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = (tuple2 $v2 $v2) in (tuple2_first $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v1 = (rows $v3)) in let $v4 = (tuple2 $v2 $v3) in (tuple2_first $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (rows_to_grid $v3) in let $v5 = (tuple2 $v4 $v3) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (columns_to_grid $v1) in let $v3 = rev($v1 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (tuple2 $v2 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (columns_to_grid $v1) in let $v3 = rev($v1 = (reverse $v3)) in let $v4 = (reverse $v3) in let $v5 = (tuple2 $v2 $v4) in (tuple2_first $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8 = rev($v3 = (tuple2_first $v8)) in let $v9 = (tuple2_first $v8) in let $v10 = (repeat $v7 $v9) in (columns_to_grid $v10)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8 = rev($v3 = (tuple2_second $v8)) in let $v9 = (tuple2_second $v8) in let $v10 = (repeat $v7 $v9) in (columns_to_grid $v10)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8 = rev($v3 = (tuple2_first $v8)) in let $v9, $v10 = rev($v8 = (tuple2 $v9 $v10)) in let $v11 = (repeat $v7 $v9) in (columns_to_grid $v11)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8, $v9 = rev($v1 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (repeat $v10 $v11)) in let $v12 = Const(int, -1) in let $v13 = (- $v11 $v12) in let $v14 = (repeat $v7 $v13) in (columns_to_grid $v14)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8, $v9 = rev($v1 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (repeat $v10 $v11)) in let $v12 = Const(int, 1) in let $v13 = (+ $v11 $v12) in let $v14 = (repeat $v7 $v13) in (columns_to_grid $v14)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8 = rev($v3 = (tuple2_second $v8)) in let $v9 = rev($v8 = (tuple2_first $v9)) in let $v10 = (tuple2_first $v9) in let $v11 = (tuple2_second $v10) in let $v12 = (repeat $v7 $v11) in (columns_to_grid $v12)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8 = rev($v3 = (tuple2_second $v8)) in let $v9 = rev($v8 = (tuple2_second $v9)) in let $v10 = (tuple2_second $v9) in let $v11 = (tuple2_second $v10) in let $v12 = (repeat $v7 $v11) in (columns_to_grid $v12)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = rev($v2 = (reverse $v6)) in let $v7, $v8 = rev($v6 = (rev_fix_param (concat $v7 $v8) $v7 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v9 = (concat $v4 $v8) in let $v10 = rev($v3 = (tuple2_first $v10)) in let $v11 = (tuple2_first $v10) in let $v12 = (repeat $v9 $v11) in (columns_to_grid $v12)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8 = rev($v3 = (tuple2_first $v8)) in let $v9, $v10 = rev($v8 = (tuple2 $v9 $v10)) in let $v11 = rev($v9 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v7 $v12) in (columns_to_grid $v13)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = (reverse $v4) in let $v7 = (concat $v4 $v6) in let $v8 = rev($v3 = (tuple2_first $v8)) in let $v9, $v10 = rev($v8 = (tuple2 $v9 $v10)) in let $v11 = rev($v9 = (tuple2_second $v11)) in let $v12 = (tuple2_second $v11) in let $v13 = (repeat $v7 $v12) in (columns_to_grid $v13)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (concat $v1 $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v1) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (columns $v3) in let $v5 = (concat $v1 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (rows_to_grid $v4)) in let $v5 = (reverse $v4) in let $v6 = (concat $v4 $v5) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = (reverse $v3) in let $v6 = (concat $v1 $v5) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v2 = (rows_to_grid $v4)) in let $v5 = rev($inp0 = (rows_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in let $v7 = (concat $v4 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4, $v5 = rev($v2 = (tuple2 $v4 $v5)) in let $v6 = (reverse $v4) in let $v7 = (concat $v3 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (columns_to_grid $v4) in let $v6 = (columns $v5) in let $v7 = (concat $v3 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v3 = rev($v2 = (rows_to_grid $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (cons $v4 $v5) in let $v7 = rev($v1 = (reverse $v7)) in let $v8 = (concat $v6 $v7) in (rows_to_grid $v8)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3, $v4 = rev($v1 = (cons $v3 $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (tuple2 $v2 $v5) in let $v7 = (tuple2_first $v6) in let $v8 = (concat $v1 $v7) in (rows_to_grid $v8)"
  ],
  "rewritten": [
    "let $v1, $v2, $v3 = rev($inp0 = (fn_13 $v1 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (repeat_grid $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v3 = (rev_grid_elements $v7 $v8 $v9)) in let $v12 = rev($v7 = (fn_0 (lam (lam (any_set (lam (fn_4 (+ (fn_8 $0 $2) (fn_7 $0 $2)))) $0))) $v12)) in let $v13, $v14, $v15 = rev($v12 = (fn_6 $v13 $v14 $v15)) in let $v18 = (fn_1 $v13 $v14 $v15) in let $v21 = (fn_0 (lam (lam (any_set (lam (fn_4 (+ (fn_8 $0 $2) (fn_7 $0 $2)))) $0))) $v18) in let $v22 = (rev_grid_elements $v21 $v8 $v9) in let $v23 = (repeat_grid $v4 $v5 $v6) in (fn_9 $v1 $v23 $v22)",
    "let $v1, $v2, $v3 = rev($inp0 = (fn_13 $v1 $v2 $v3)) in let $v4, $v5, $v6 = rev($v2 = (repeat_grid $v4 $v5 $v6)) in let $v7, $v8, $v9 = rev($v3 = (rev_grid_elements $v7 $v8 $v9)) in let $v12 = rev($v7 = (fn_0 (lam (lam (any_set (lam (and (fn_4 (fn_8 $0 $2)) (fn_4 (fn_7 $0 $2)))) $0))) $v12)) in let $v13, $v14, $v15 = rev($v12 = (fn_6 $v13 $v14 $v15)) in let $v18 = (fn_1 $v13 $v14 $v15) in let $v21 = (fn_0 (lam (lam (any_set (lam (and (fn_4 (fn_8 $0 $2)) (fn_4 (fn_7 $0 $2)))) $0))) $v18) in let $v22 = (rev_grid_elements $v21 $v8 $v9) in let $v23 = (repeat_grid $v4 $v5 $v6) in (fn_9 $v1 $v23 $v22)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v3, $v4 = rev($inp0 = (fn_15 $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(list(list(color)), Any[]) in let $v8 = (cons $v5 $v7) in let $v9 = (cons $v3 $v8) in (fn_15 $v1 $v9)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v3 = rev($inp0 = (fn_5 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v8 = (fn_12 $v6 $v4) in (fn_15 $v1 $v8)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($v2 = (columns $v7)) in let $v8 = rev($v7 = (tuple2_first $v8)) in let $v10 = (fn_12 $v6 $v8) in (fn_15 $v1 $v10)",
    "let $v1 = Const(int, 3) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (index2 $v1 $v1 $v3) in let $v5 = Const(list(color), Any[0, 0]) in let $v6 = (cons $v4 $v5) in let $v7, $v8 = rev($v2 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(list(list(color)), Any[]) in let $v12 = (cons $v9 $v11) in let $v13 = (cons $v7 $v12) in (fn_15 $v6 $v13)",
    "let $v1 = Const(int, 3) in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (index2 $v1 $v1 $v3) in let $v5 = Const(list(color), Any[0, 0]) in let $v6 = (cons $v4 $v5) in let $v7, $v8 = rev($v2 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(list(list(color)), Any[]) in let $v12 = (cons $v9 $v11) in let $v13 = (cons $v7 $v12) in (fn_15 $v6 $v13)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v3 = rev($inp0 = (fn_5 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (tuple2_second $v7)) in let $v9, $v10 = rev($v7 = (fn_12 $v9 $v10)) in let $v12 = (fn_12 $v6 $v9) in (fn_15 $v1 $v12)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v3 = rev($inp0 = (fn_5 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (columns_to_grid $v7)) in let $v8 = rev($v7 = (columns $v8)) in let $v9 = rev($v8 = (tuple2_first $v9)) in let $v11 = (fn_12 $v6 $v9) in (fn_15 $v1 $v11)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v3 = rev($inp0 = (fn_5 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (columns_to_grid $v7)) in let $v8 = rev($v7 = (columns $v8)) in let $v9 = rev($v8 = (rows_to_grid $v9)) in let $v11 = (fn_12 $v6 $v9) in (fn_15 $v1 $v11)",
    "let $v1 = Const(list(color), Any[0, 0, 0]) in let $v3 = rev($inp0 = (fn_5 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (reverse $v5) in let $v7 = rev($inp0 = (columns_to_grid $v7)) in let $v8 = rev($v7 = (reverse $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v12 = (fn_12 $v6 $v9) in (fn_15 $v1 $v12)",
    "let $v1 = Const(color, 0) in let $v2 = empty in let $v3 = (cons $v1 $v2) in let $v4 = (car $v3) in let $v5 = Const(list(color), Any[0, 0]) in let $v6 = (cons $v4 $v5) in let $v8, $v9 = rev($inp0 = (fn_15 $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12 = Const(list(list(color)), Any[]) in let $v13 = (cons $v10 $v12) in let $v14 = (cons $v8 $v13) in (fn_15 $v6 $v14)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (fn_5 $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (fn_5 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = (tuple2_second $v2) in (fn_5 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (columns $v3) in (rows_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_5 $v1) in let $v4 = (columns $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3, $v4 = rev($v1 = (fn_12 $v3 $v4)) in (fn_5 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (rows_to_grid $v2) in let $v4 = rev($v1 = (tuple2_second $v4)) in (fn_12 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v1 = (rows $inp0) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in $v2",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (fn_5 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = 1 in (fn_12 $v2 $v3)",
    "let $v1 = 1 in let $v2 = rev($inp0 = (rows_to_grid $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (tuple2 $v1 $v3) in (tuple2_second $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (collect $v2)) in let $v3 = rev($inp0 = (rows_to_grid $v3)) in let $v4 = rev($v3 = (columns $v4)) in let $v5 = (tuple2 $v2 $v4) in (tuple2_second $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v4, $v5 = rev($inp0 = (fn_12 $v4 $v5)) in (fn_12 $v2 $v4)",
    "let $v3 = rev($inp0 = (fn_10 $v3)) in (fn_14 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (rows $v3)) in let $v4 = (columns $v3) in (fn_5 $v4)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = rev($v2 = (columns $v3)) in let $v4 = (rows $v3) in let $v5 = (reverse $v4) in (columns_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in (fn_14 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (rows_to_grid $v2) in let $v4 = (columns $v3) in (fn_5 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (columns_to_grid $v4) in (fn_14 $v5)",
    "let $v2, $v3 = rev($inp0 = (fn_12 $v2 $v3)) in let $v4 = rev($v2 = (columns_to_grid $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (columns_to_grid $v5) in (fn_14 $v6)",
    "let $v2, $v3 = rev($inp0 = (fn_12 $v2 $v3)) in let $v4 = rev($v2 = (columns_to_grid $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (rows_to_grid $v5) in let $v7 = (columns $v6) in (fn_5 $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in let $v5 = (reverse $v4) in let $v6 = (columns_to_grid $v5) in let $v7 = (rows $v6) in (columns_to_grid $v7)",
    "let $v2, $v3 = rev($inp0 = (fn_12 $v2 $v3)) in let $v4 = rev($v2 = (columns_to_grid $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v6 = (columns_to_grid $v5) in let $v7 = (rows $v6) in let $v8 = (reverse $v7) in let $v9 = (columns_to_grid $v8) in let $v10 = (rows $v9) in (columns_to_grid $v10)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = Const(int, 6) in let $v11 = (concat $v2 $v2) in let $v12 = (concat $v11 $v7) in let $v13 = (reverse $v12) in let $v14 = Const(list(list(color)), Any[]) in let $v15 = (cons $v13 $v14) in let $v16 = (tuple2 $v10 $v15) in let $v17 = (tuple2_second $v16) in (fn_15 $v9 $v17)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = (concat $v2 $v2) in let $v11 = (concat $v10 $v7) in let $v12 = (reverse $v11) in let $v13 = Const(list(list(color)), Any[]) in let $v14 = (cons $v12 $v13) in let $v15 = (tuple2 $v2 $v14) in let $v16 = (tuple2_second $v15) in (fn_15 $v9 $v16)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7 = (reverse $v5) in let $v8 = (reverse $v7) in let $v9 = (concat $v6 $v8) in let $v10 = (concat $v2 $v2) in let $v11, $v12 = rev($v1 = (cons $v11 $v12)) in let $v13 = (concat $v10 $v11) in let $v14 = (reverse $v13) in let $v15 = Const(list(list(color)), Any[]) in let $v16 = (cons $v14 $v15) in let $v17 = (tuple2 $v2 $v16) in let $v18 = (tuple2_second $v17) in (fn_15 $v9 $v18)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v11, $v12 = rev($inp0 = (fn_12 $v11 $v12)) in let $v13 = rev($v11 = (tuple2_second $v13)) in let $v14 = (concat $v2 $v2) in let $v15 = (concat $v14 $v7) in let $v16 = (reverse $v15) in let $v17 = Const(list(list(color)), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (tuple2 $v13 $v18) in let $v20 = (tuple2_second $v19) in (fn_15 $v9 $v20)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v11, $v12 = rev($inp0 = (fn_15 $v11 $v12)) in let $v13, $v14 = rev($v12 = (repeat $v13 $v14)) in let $v15 = (concat $v2 $v2) in let $v16 = (concat $v15 $v7) in let $v17 = (reverse $v16) in let $v18 = Const(list(list(color)), Any[]) in let $v19 = (cons $v17 $v18) in let $v20 = (tuple2 $v13 $v19) in let $v21 = (tuple2_second $v20) in (fn_15 $v9 $v21)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v11, $v12 = rev($inp0 = (fn_15 $v11 $v12)) in let $v13, $v14 = rev($v12 = (repeat $v13 $v14)) in let $v15 = (concat $v2 $v2) in let $v16 = (concat $v15 $v7) in let $v17 = (reverse $v16) in let $v18 = Const(list(list(color)), Any[]) in let $v19 = (cons $v17 $v18) in let $v20 = (tuple2 $v14 $v19) in let $v21 = (tuple2_second $v20) in (fn_15 $v9 $v21)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v11 = rev($inp0 = (fn_5 $v11)) in let $v12 = rev($v11 = (tuple2_first $v12)) in let $v13 = rev($v12 = (tuple2_first $v13)) in let $v14 = (concat $v2 $v2) in let $v15 = (concat $v14 $v7) in let $v16 = (reverse $v15) in let $v17 = Const(list(list(color)), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (tuple2 $v13 $v18) in let $v20 = (tuple2_second $v19) in (fn_15 $v9 $v20)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v10 = rev($inp0 = (rows_to_grid $v10)) in let $v11 = rev($v10 = (rows $v11)) in let $v12 = rev($v11 = (rows_to_grid $v12)) in let $v13 = rev($v12 = (tuple2_first $v13)) in let $v14 = (concat $v2 $v2) in let $v15 = (concat $v14 $v7) in let $v16 = (reverse $v15) in let $v17 = Const(list(list(color)), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (tuple2 $v13 $v18) in let $v20 = (tuple2_second $v19) in (fn_15 $v9 $v20)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v11, $v12 = rev($inp0 = (fn_15 $v11 $v12)) in let $v13 = rev($v12 = (tuple2_first $v13)) in let $v14 = rev($v13 = (tuple2_first $v14)) in let $v15 = (concat $v2 $v2) in let $v16 = (concat $v15 $v7) in let $v17 = (reverse $v16) in let $v18 = Const(list(list(color)), Any[]) in let $v19 = (cons $v17 $v18) in let $v20 = (tuple2 $v14 $v19) in let $v21 = (tuple2_second $v20) in (fn_15 $v9 $v21)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4 = (reverse $v2) in let $v5 = (reverse $v4) in let $v6 = (concat $v5 $v5) in let $v7, $v8 = rev($v1 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v7) in let $v11 = rev($inp0 = (fn_5 $v11)) in let $v12 = rev($v11 = (reverse $v12)) in let $v14, $v15 = rev($v12 = (fn_12 $v14 $v15)) in let $v16 = (concat $v2 $v2) in let $v17 = (concat $v16 $v7) in let $v18 = (reverse $v17) in let $v19 = Const(list(list(color)), Any[]) in let $v20 = (cons $v18 $v19) in let $v21 = (tuple2 $v14 $v20) in let $v22 = (tuple2_second $v21) in (fn_15 $v9 $v22)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in (rows_to_grid $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (fn_5 $v1)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (rows $v3) in (columns_to_grid $v4)",
    "let $v2, $v3 = rev($inp0 = (fn_12 $v2 $v3)) in let $v4 = rev($v2 = (rows_to_grid $v4)) in (fn_5 $v4)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = (reverse $v2) in (fn_5 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v4 = rev($v1 = (fn_12 $v3 $v4)) in (fn_5 $v3)",
    "let $v2, $v3 = rev($inp0 = (fn_15 $v2 $v3)) in let $v4 = (cons $v2 $v3) in (fn_5 $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3 = rev($v1 = (reverse $v3)) in let $v4 = (rows_to_grid $v3) in let $v5 = (tuple2 $v2 $v4) in (tuple2_second $v5)",
    "let $v1 = rev($inp0 = (tuple2_first $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v4 = rev($inp0 = (fn_5 $v4)) in let $v5 = (rows_to_grid $v4) in let $v6 = (tuple2 $v2 $v5) in (tuple2_second $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v4 = rev($inp0 = (fn_5 $v4)) in let $v5 = (rows_to_grid $v4) in let $v6 = (tuple2 $v2 $v5) in (tuple2_second $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (fn_16 $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_3 $v1) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in (fn_16 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v1) in (fn_16 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in (fn_16 $v1 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v4 = (tuple2_first $v2) in let $v6 = (fn_3 $v4) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (columns_to_grid $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in (fn_16 $v4 $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3, $v4 = rev($inp0 = (fn_12 $v3 $v4)) in let $v5 = rev($v3 = (columns_to_grid $v5)) in let $v6 = (reverse $v5) in (fn_16 $v1 $v6)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (columns_to_grid $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = (reverse $v5) in (fn_16 $v4 $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v4, $v5 = rev($v2 = (fn_12 $v4 $v5)) in let $v6 = rev($v4 = (rows_to_grid $v6)) in let $v7 = rev($v1 = (reverse $v7)) in (fn_16 $v6 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (concat $v1 $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3 = (fn_3 $v1) in (rows_to_grid $v3)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in (fn_11 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (concat $v1 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v1) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in let $v4 = (reverse $v1) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v4 = rev($v1 = (fn_12 $v3 $v4)) in let $v5 = (reverse $v3) in let $v6 = (concat $v1 $v5) in (rows_to_grid $v6)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = (reverse $v2) in let $v4 = rev($v2 = (tuple2_first $v4)) in let $v5 = (tuple2_first $v4) in let $v6 = (concat $v3 $v5) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4, $v5 = rev($v2 = (tuple2 $v4 $v5)) in let $v6 = (reverse $v4) in let $v7 = (concat $v3 $v6) in (rows_to_grid $v7)",
    "let $v3 = rev($inp0 = (fn_10 $v3)) in (fn_14 $v3)",
    "let $v3 = rev($inp0 = (fn_14 $v3)) in (fn_10 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v4, $v5 = rev($v2 = (fn_12 $v4 $v5)) in let $v6 = (columns_to_grid $v4) in (fn_14 $v6)",
    "let $v1 = Const(int, 3) in let $v4 = rev($inp0 = (fn_10 $v4)) in let $v5 = (rows $v4) in let $v6 = (reverse $v5) in let $v7 = (columns_to_grid $v6) in let $v8 = (tuple2 $v1 $v7) in (fn_17 (lam (rows $0)) $v8)",
    "let $v1 = Const(int, 3) in let $v2 = rev($inp0 = (columns_to_grid $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v5, $v6 = rev($v3 = (fn_12 $v5 $v6)) in let $v7 = (columns_to_grid $v5) in let $v8 = (rows $v7) in let $v9 = (reverse $v8) in let $v10 = (columns_to_grid $v9) in let $v11 = (tuple2 $v1 $v10) in (fn_17 (lam (rows $0)) $v11)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v4 = rev($v2 = (fn_5 $v4)) in let $v5 = rev($v1 = (reverse $v5)) in let $v6 = rev($v5 = (columns $v6)) in let $v7 = (rows $v6) in let $v8 = (reverse $v7) in let $v9 = (columns_to_grid $v8) in let $v10 = (tuple2 $v4 $v9) in (fn_17 (lam (rows $0)) $v10)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4 = rev($v3 = (tuple2_first $v4)) in let $v7 = rev($inp0 = (fn_10 $v7)) in let $v8 = (rows $v7) in let $v9 = (reverse $v8) in let $v10 = (columns_to_grid $v9) in let $v11 = (tuple2 $v4 $v10) in (fn_17 (lam (rows $0)) $v11)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3, $v4 = rev($v1 = (fn_12 $v3 $v4)) in let $v5 = rev($v3 = (columns $v5)) in let $v6 = rev($v5 = (columns_to_grid $v6)) in let $v7 = rev($v1 = (reverse $v7)) in let $v8 = rev($v7 = (columns $v8)) in let $v9 = (rows $v8) in let $v10 = (reverse $v9) in let $v11 = (columns_to_grid $v10) in let $v12 = (tuple2 $v6 $v11) in (fn_17 (lam (rows $0)) $v12)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v4 = rev($v2 = (fn_5 $v4)) in let $v5 = rev($v1 = (reverse $v5)) in let $v7, $v8 = rev($v5 = (fn_12 $v7 $v8)) in let $v9 = (columns_to_grid $v7) in let $v10 = (rows $v9) in let $v11 = (reverse $v10) in let $v12 = (columns_to_grid $v11) in let $v13 = (tuple2 $v4 $v12) in (fn_17 (lam (rows $0)) $v13)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = rev($v2 = (reverse $v3)) in let $v4 = rev($v3 = (tuple2_first $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in let $v8, $v9 = rev($v6 = (fn_12 $v8 $v9)) in let $v10 = (columns_to_grid $v8) in let $v11 = (rows $v10) in let $v12 = (reverse $v11) in let $v13 = (columns_to_grid $v12) in let $v14 = (tuple2 $v4 $v13) in (fn_17 (lam (rows $0)) $v14)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (fn_16 $v1 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v2 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in (fn_16 $v1 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in (fn_16 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in (fn_16 $v1 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v4 = (fn_16 $v1 $v2) in let $v5 = (rows $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_second $v2)) in let $v3, $v4 = rev($v2 = (tuple2 $v3 $v4)) in let $v5 = (reverse $v4) in (fn_16 $v1 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v4 = (tuple2_first $v2) in let $v6 = (fn_3 $v4) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (columns_to_grid $v4)) in let $v5 = rev($inp0 = (columns_to_grid $v5)) in let $v6 = rev($v5 = (reverse $v6)) in (fn_16 $v4 $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v6 = (fn_16 $v3 $v4) in let $v7 = (rows $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (tuple2_second $v4)) in let $v5, $v6 = rev($v4 = (tuple2 $v5 $v6)) in let $v7 = (reverse $v6) in (fn_16 $v3 $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (concat $v2 $v1) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (fn_11 $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v1 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (concat $v2 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in let $v5 = (concat $v4 $v1) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3 = rev($v1 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in let $v5 = (concat $v2 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (rows_to_grid $v4)) in (fn_11 $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v5 = (tuple2_first $v2) in (fn_11 $v5)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = rev($inp0 = (tuple2_second $v3)) in let $v4, $v5 = rev($v3 = (tuple2 $v4 $v5)) in let $v6 = rev($v5 = (rows_to_grid $v6)) in let $v7 = (concat $v2 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = rev($v1 = (columns $v3)) in let $v5 = (fn_12 $v2 $v3) in let $v6 = (concat $v5 $v1) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (tuple2_second $v1)) in let $v2, $v3 = rev($v1 = (tuple2 $v2 $v3)) in let $v4 = rev($v3 = (rows_to_grid $v4)) in let $v5 = (reverse $v4) in let $v7 = (fn_16 $v5 $v4) in let $v8 = (rows $v7) in (columns_to_grid $v8)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = (reverse $v1) in (columns_to_grid $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v3) in (columns_to_grid $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in (fn_12 $v3 $v2)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5 = rev($v4 = (tuple2_second $v5)) in (fn_12 $v3 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (rev_list_elements $v2 $v3)) in let $v4 = rev($v3 = (tuple2_first $v4)) in let $v5 = (tuple2_first $v4) in let $v6 = (rev_list_elements $v2 $v5) in let $v7 = (reverse $v6) in (columns_to_grid $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5 = rev($v4 = (rows $v5)) in (fn_12 $v3 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (tuple2 $v3 $v4) in let $v6 = (tuple2_second $v5) in (columns_to_grid $v6)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v5, $v6 = rev($v1 = (fn_12 $v5 $v6)) in (fn_12 $v3 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v5, $v6 = rev($inp0 = (fn_15 $v5 $v6)) in (fn_12 $v3 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3, $v4 = rev($v1 = (fn_12 $v3 $v4)) in (fn_16 $v3 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_16 $v1 $v1) in let $v4 = rev($inp0 = (tuple2_second $v4)) in (fn_12 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4, $v5 = rev($v2 = (tuple2 $v4 $v5)) in (fn_16 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_16 $v1 $v1) in let $v4 = rev($v1 = (tuple2_first $v4)) in (fn_12 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_16 $v1 $v1) in let $v4 = rev($v1 = (tuple2_second $v4)) in (fn_12 $v3 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_16 $v1 $v1) in let $v4 = rev($v1 = (reverse $v4)) in (fn_12 $v3 $v4)",
    "let $v2, $v3 = rev($inp0 = (fn_12 $v2 $v3)) in let $v5, $v6 = rev($v2 = (fn_12 $v5 $v6)) in let $v7 = rev($v5 = (columns_to_grid $v7)) in (fn_16 $v7 $v7)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_16 $v1 $v1) in let $v4 = rev($inp0 = (rows_to_grid $v4)) in let $v5 = rev($v4 = (tuple2_second $v5)) in (fn_12 $v3 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v3 = (fn_16 $v1 $v1) in let $v5 = rev($inp0 = (fn_5 $v5)) in (fn_12 $v3 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (reverse $v2) in let $v5, $v6 = rev($v1 = (fn_12 $v5 $v6)) in (fn_16 $v3 $v5)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in (rows_to_grid $v1)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in (columns_to_grid $v1)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in (columns_to_grid $v3)",
    "let $v2 = rev($inp0 = (fn_5 $v2)) in let $v3 = (reverse $v2) in (columns_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in (fn_12 $v2 $v2)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (columns $v2)) in let $v3 = rev($v1 = (rows $v3)) in (fn_12 $v2 $v3)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (rows_to_grid $v3) in (fn_12 $v4 $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (columns_to_grid $v1) in let $v3 = rev($v1 = (tuple2_first $v3)) in let $v4 = (tuple2_first $v3) in (fn_12 $v2 $v4)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (columns_to_grid $v1) in let $v3 = rev($v1 = (reverse $v3)) in let $v4 = (reverse $v3) in (fn_12 $v2 $v4)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v8 = rev($v3 = (tuple2_first $v8)) in let $v9 = (tuple2_first $v8) in let $v10 = (repeat $v7 $v9) in (columns_to_grid $v10)",
    "let $v2, $v8 = rev($inp0 = (fn_17 (lam (repeat $v2 $0)) $v8)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in (fn_17 (lam (repeat $v7 $0)) $v8)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v9, $v10 = rev($v3 = (fn_12 $v9 $v10)) in let $v11 = (repeat $v7 $v9) in (columns_to_grid $v11)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v8, $v9 = rev($v1 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (repeat $v10 $v11)) in let $v12 = Const(int, -1) in let $v13 = (- $v11 $v12) in let $v14 = (repeat $v7 $v13) in (columns_to_grid $v14)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v8, $v9 = rev($v1 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (repeat $v10 $v11)) in let $v12 = Const(int, 1) in let $v13 = (+ $v11 $v12) in let $v14 = (repeat $v7 $v13) in (columns_to_grid $v14)",
    "let $v2, $v8 = rev($inp0 = (fn_17 (lam (repeat $v2 $0)) $v8)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v9 = rev($v8 = (tuple2_first $v9)) in let $v10 = (tuple2_first $v9) in (fn_17 (lam (repeat $v7 $0)) $v10)",
    "let $v2, $v8 = rev($inp0 = (fn_17 (lam (repeat $v2 $0)) $v8)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v9 = rev($v8 = (tuple2_second $v9)) in let $v10 = (tuple2_second $v9) in (fn_17 (lam (repeat $v7 $0)) $v10)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v6 = rev($v2 = (reverse $v6)) in let $v7, $v8 = rev($v6 = (rev_fix_param (concat $v7 $v8) $v7 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v9 = (concat $v4 $v8) in let $v10 = rev($v3 = (tuple2_first $v10)) in let $v11 = (tuple2_first $v10) in let $v12 = (repeat $v9 $v11) in (columns_to_grid $v12)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v9, $v10 = rev($v3 = (fn_12 $v9 $v10)) in let $v11 = rev($v9 = (tuple2_first $v11)) in let $v12 = (tuple2_first $v11) in let $v13 = (repeat $v7 $v12) in (columns_to_grid $v13)",
    "let $v1 = rev($inp0 = (columns_to_grid $v1)) in let $v2, $v3 = rev($v1 = (repeat $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (concat $v4 $v5) $v5 (lam Const(list(color), Any[0, 0, 0, 0, 0])))) in let $v7 = (fn_3 $v4) in let $v9, $v10 = rev($v3 = (fn_12 $v9 $v10)) in let $v11 = rev($v9 = (tuple2_second $v11)) in (fn_17 (lam (repeat $v7 $0)) $v11)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3 = (fn_3 $v1) in (rows_to_grid $v3)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = (reverse $v1) in let $v5 = (concat $v3 $v4) in (rows_to_grid $v5)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (reverse $v2)) in let $v3 = (columns_to_grid $v2) in let $v4 = (columns $v3) in let $v5 = (concat $v1 $v4) in (rows_to_grid $v5)",
    "let $v2, $v3 = rev($inp0 = (fn_12 $v2 $v3)) in let $v4 = rev($v2 = (rows_to_grid $v4)) in let $v6 = (fn_3 $v4) in (rows_to_grid $v6)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v3, $v4 = rev($v1 = (fn_12 $v3 $v4)) in let $v5 = (reverse $v3) in let $v6 = (concat $v1 $v5) in (rows_to_grid $v6)",
    "let $v2, $v3 = rev($inp0 = (fn_12 $v2 $v3)) in let $v4 = rev($v2 = (rows_to_grid $v4)) in let $v6 = rev($inp0 = (fn_5 $v6)) in let $v7 = (concat $v4 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4, $v5 = rev($v2 = (tuple2 $v4 $v5)) in let $v6 = (reverse $v4) in let $v7 = (concat $v3 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (tuple2_first $v2)) in let $v3 = (tuple2_first $v2) in let $v4 = rev($v1 = (reverse $v4)) in let $v5 = (columns_to_grid $v4) in let $v6 = (columns $v5) in let $v7 = (concat $v3 $v6) in (rows_to_grid $v7)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = rev($v1 = (rows $v2)) in let $v4, $v5 = rev($v2 = (fn_15 $v4 $v5)) in let $v6 = (cons $v4 $v5) in let $v7 = rev($v1 = (reverse $v7)) in let $v8 = (concat $v6 $v7) in (rows_to_grid $v8)",
    "let $v1 = rev($inp0 = (rows_to_grid $v1)) in let $v2 = (reverse $v1) in let $v3, $v4 = rev($v1 = (cons $v3 $v4)) in let $v5 = rev($v4 = (reverse $v5)) in let $v7 = (fn_12 $v2 $v5) in let $v8 = (concat $v1 $v7) in (rows_to_grid $v8)"
  ],
  "rewritten_dreamcoder": null,
  "abstractions": [
    {
      "body": "(rev_fold_set (lam (lam (rev_greedy_cluster #0 $1 $0))) empty_set (map_set (lam (map_set (lam (tuple2 $0 (tuple2_second $1))) (tuple2_first $0))) (map_set (lam (tuple2 ((lam ((lam (rev_fix_param (map_set (lam (tuple2 (+ (tuple2_first $0) (tuple2_first $1)) (+ (tuple2_second $0) (tuple2_second $1)))) $1) $0 (lam (tuple2 (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_first $0)) (collect $0)) max_int) (fold (lam (lam (if (gt? $0 $1) $1 $0))) (map (lam (tuple2_second $0)) (collect $0)) max_int))))) (tuple2_first (tuple2_first $1)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) #1)))",
      "dreamcoder": "#(lambda (lambda (rev_fold_set (lambda (lambda (rev_greedy_cluster $3 $1 $0))) empty_set (map_set (lambda (map_set (lambda (tuple2 $0 (tuple2_second $1))) (tuple2_first $0))) (map_set (lambda (tuple2 ((lambda ((lambda (rev_fix_param (map_set (lambda (tuple2 (+ (tuple2_first $0) (tuple2_first $1)) (+ (tuple2_second $0) (tuple2_second $1)))) $1) $0 (lambda (tuple2 (fold (lambda (lambda (if (gt? $0 $1) $1 $0))) (map (lambda (tuple2_first $0)) (collect $0)) max_int) (fold (lambda (lambda (if (gt? $0 $1) $1 $0))) (map (lambda (tuple2_second $0)) (collect $0)) max_int))))) (tuple2_first (tuple2_first $1)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $0)))))",
      "arity": 2,
      "name": "fn_0",
      "utility": 20143,
      "final_cost": 44045,
      "compression_ratio": 1.6067431036440005,
      "cumulative_compression_ratio": 1.6067431036440005,
      "num_uses": 4,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_0 (lam (lam (any_set (lam (and (not (gt? (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) 1)) (not (gt? (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2)))) 1)))) $0))) $v12": "(rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (and (not (gt? (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) 1)) (not (gt? (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2)))) 1)))) $0))) $1 $0))) empty_set $v10)"
        },
        {
          "fn_0 (lam (lam (any_set (lam (and (not (gt? (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) 1)) (not (gt? (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2)))) 1)))) $0))) $v18": "(rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (and (not (gt? (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) 1)) (not (gt? (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2)))) 1)))) $0))) $1 $0))) empty_set $v20)"
        },
        {
          "fn_0 (lam (lam (any_set (lam (not (gt? (+ (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2))))) 1))) $0))) $v12": "(rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (not (gt? (+ (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2))))) 1))) $0))) $1 $0))) empty_set $v10)"
        },
        {
          "fn_0 (lam (lam (any_set (lam (not (gt? (+ (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2))))) 1))) $0))) $v18": "(rev_fold_set (lam (lam (rev_greedy_cluster (lam (lam (any_set (lam (not (gt? (+ (abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2)))) (abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2))))) 1))) $0))) $1 $0))) empty_set $v20)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) #0)) (map_set (lam (tuple2 (tuple2 (tuple2 (+ (tuple2_first (tuple2_first (tuple2_first $0))) Const(int, 1)) (tuple2_second (tuple2_first (tuple2_first $0)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) #1) #2)",
      "dreamcoder": "#(lambda (lambda (lambda (rev_select_set (lambda (eq? (tuple2_second (tuple2_first $0)) $3)) (map_set (lambda (tuple2 (tuple2 (tuple2 (+ (tuple2_first (tuple2_first (tuple2_first $0))) Const(int, 1)) (tuple2_second (tuple2_first (tuple2_first $0)))) (tuple2_second (tuple2_first $0))) (tuple2_second $0))) $1) $0))))",
      "arity": 3,
      "name": "fn_1",
      "utility": 2626,
      "final_cost": 38991,
      "compression_ratio": 1.1296196558180094,
      "cumulative_compression_ratio": 1.815008591726296,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_1 $v13 $v14 $v15": "(rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) $v13)) $v17 $v15)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(abs (- (#0 (tuple2_first #1)) (#0 (tuple2_first #2))))",
      "dreamcoder": "#(lambda (lambda (lambda (abs (- ($2 (tuple2_first $1)) ($2 (tuple2_first $0)))))))",
      "arity": 3,
      "name": "fn_2",
      "utility": 2009,
      "final_cost": 36575,
      "compression_ratio": 1.066056049213944,
      "cumulative_compression_ratio": 1.9349008885850991,
      "num_uses": 8,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_2 tuple2_first $0 $2": "(abs (- (tuple2_first (tuple2_first $0)) (tuple2_first (tuple2_first $2))))"
        },
        {
          "fn_2 tuple2_second $0 $2": "(abs (- (tuple2_second (tuple2_first $0)) (tuple2_second (tuple2_first $2))))"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(concat #0 (reverse #0))",
      "dreamcoder": "#(lambda (concat $0 (reverse $0)))",
      "arity": 1,
      "name": "fn_3",
      "utility": 1009,
      "final_cost": 35363,
      "compression_ratio": 1.0342731103130391,
      "cumulative_compression_ratio": 2.0012159601843735,
      "num_uses": 15,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_3 $v1": "(concat $v1 $v2)"
        },
        {
          "fn_3 $v4": "(concat $v3 $v5)"
        },
        {
          "fn_3 $v4": "(concat $v4 $v5)"
        },
        {
          "fn_3 $v4": "(concat $v4 $v6)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(not (gt? #0 1))",
      "dreamcoder": "#(lambda (not (gt? $0 1)))",
      "arity": 1,
      "name": "fn_4",
      "utility": 909,
      "final_cost": 34151,
      "compression_ratio": 1.035489443940148,
      "cumulative_compression_ratio": 2.0722380018154665,
      "num_uses": 6,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_4 (+ (fn_2 (lam (tuple2_first $0)) $0 $2) (fn_2 (lam (tuple2_second $0)) $0 $2))": "(not (gt? (+ (fn_2 (lam (tuple2_first $0)) $0 $2) (fn_2 (lam (tuple2_second $0)) $0 $2)) 1))"
        },
        {
          "fn_4 (fn_2 (lam (tuple2_first $0)) $0 $2)": "(not (gt? (fn_2 (lam (tuple2_first $0)) $0 $2) 1))"
        },
        {
          "fn_4 (fn_2 (lam (tuple2_second $0)) $0 $2)": "(not (gt? (fn_2 (lam (tuple2_second $0)) $0 $2) 1))"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rows_to_grid (reverse #0))",
      "dreamcoder": "#(lambda (rows_to_grid (reverse $0)))",
      "arity": 1,
      "name": "fn_5",
      "utility": 808,
      "final_cost": 33141,
      "compression_ratio": 1.0304758456292809,
      "cumulative_compression_ratio": 2.1353912072659242,
      "num_uses": 44,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_5 $v2": "(rows_to_grid $v1)"
        },
        {
          "fn_5 $v2": "(rows_to_grid $v1)"
        },
        {
          "fn_5 $v2": "(rows_to_grid $v1)"
        },
        {
          "fn_5 $v2": "(rows_to_grid $v1)"
        },
        {
          "fn_5 $v11": "(rows_to_grid $v10)"
        },
        {
          "fn_5 $v11": "(rows_to_grid $v10)"
        },
        {
          "fn_5 $v1": "(rows_to_grid $v2)"
        },
        {
          "fn_5 $v3": "(rows_to_grid $v2)"
        },
        {
          "fn_5 $v2": "(rows_to_grid $v3)"
        },
        {
          "fn_5 $v4": "(rows_to_grid $v3)"
        },
        {
          "fn_5 $v3": "(rows_to_grid $v4)"
        },
        {
          "fn_5 $v3": "(rows_to_grid $v4)"
        },
        {
          "fn_5 $v3": "(rows_to_grid $v4)"
        },
        {
          "fn_5 $v5": "(rows_to_grid $v4)"
        },
        {
          "fn_5 $v3": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v4": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v4": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v4": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v4": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v4": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v4": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v6": "(rows_to_grid $v5)"
        },
        {
          "fn_5 $v6": "(rows_to_grid $v7)"
        },
        {
          "fn_5 $v7": "(rows_to_grid $v8)"
        },
        {
          "fn_5 $v7": "(rows_to_grid $v8)"
        },
        {
          "fn_5 $v7": "(rows_to_grid $v8)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rev_fix_param (rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) #0)) #1 #2) #0 (lam Const(set(tuple2(int, int)), Set([(0, 0), (0, 2), (2, 0), (1, 1), (0, 1), (2, 2), (2, 1)]))))",
      "dreamcoder": "#(lambda (lambda (lambda (rev_fix_param (rev_select_set (lambda (eq? (tuple2_second (tuple2_first $0)) $3)) $1 $0) $2 (lambda Const(set(tuple2(int, int)), Set([(0, 0), (0, 2), (2, 0), (1, 1), (0, 1), (2, 2), (2, 1)])))))))",
      "arity": 3,
      "name": "fn_6",
      "utility": 706,
      "final_cost": 31723,
      "compression_ratio": 1.0446994294360559,
      "cumulative_compression_ratio": 2.230841975853482,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_6 $v13 $v14 $v15": "(rev_fix_param (rev_select_set (lam (eq? (tuple2_second (tuple2_first $0)) $v13)) $v14 $v15) $v13 (lam Const(set(tuple2(int, int)), Set([(0, 0), (0, 2), (2, 0), (1, 1), (0, 1), (2, 2), (2, 1)]))))"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_2 (lam (tuple2_second $0)) #0 #1)",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (abs (- ($2 (tuple2_first $1)) ($2 (tuple2_first $0))))))) (lambda (tuple2_second $0)) $1 $0)))",
      "arity": 2,
      "name": "fn_7",
      "utility": 507,
      "final_cost": 30911,
      "compression_ratio": 1.0262689657403514,
      "cumulative_compression_ratio": 2.2894438872893144,
      "num_uses": 4,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_7 $0 $2": "(fn_2 (lam (tuple2_second $0)) $0 $2)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_2 (lam (tuple2_first $0)) #0 #1)",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (lambda (abs (- ($2 (tuple2_first $1)) ($2 (tuple2_first $0))))))) (lambda (tuple2_first $0)) $1 $0)))",
      "arity": 2,
      "name": "fn_8",
      "utility": 507,
      "final_cost": 30099,
      "compression_ratio": 1.0269776404531712,
      "cumulative_compression_ratio": 2.351207681318316,
      "num_uses": 4,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_8 $0 $2": "(fn_2 (lam (tuple2_first $0)) $0 $2)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rev_select_grid (lam (eq? $0 #0)) #1 #2)",
      "dreamcoder": "#(lambda (lambda (lambda (rev_select_grid (lambda (eq? $0 $3)) $1 $0))))",
      "arity": 3,
      "name": "fn_9",
      "utility": 506,
      "final_cost": 29287,
      "compression_ratio": 1.0277256120463003,
      "cumulative_compression_ratio": 2.4163963533308292,
      "num_uses": 4,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_9 $v1 $v2 $v3": "(rev_select_grid (lam (eq? $0 $v1)) $v2 $v3)"
        },
        {
          "fn_9 $v1 $v2 $v3": "(rev_select_grid (lam (eq? $0 $v1)) $v2 $v3)"
        },
        {
          "fn_9 $v1 $v23 $v22": "(rev_select_grid (lam (eq? $0 $v1)) $v23 $v22)"
        },
        {
          "fn_9 $v1 $v23 $v22": "(rev_select_grid (lam (eq? $0 $v1)) $v23 $v22)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(columns_to_grid (reverse (columns #0)))",
      "dreamcoder": "#(lambda (columns_to_grid (reverse (columns $0))))",
      "arity": 1,
      "name": "fn_10",
      "utility": 505,
      "final_cost": 28479,
      "compression_ratio": 1.0283717827170897,
      "cumulative_compression_ratio": 2.4849538256258996,
      "num_uses": 5,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_10 $v3": "(columns_to_grid $v1)"
        },
        {
          "fn_10 $v4": "(columns_to_grid $v2)"
        },
        {
          "fn_10 $v3": "(columns_to_grid $v5)"
        },
        {
          "fn_10 $v7": "(columns_to_grid $v5)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rows_to_grid (concat (reverse #0) #0))",
      "dreamcoder": "#(lambda (rows_to_grid (concat (reverse $0) $0)))",
      "arity": 1,
      "name": "fn_11",
      "utility": 403,
      "final_cost": 27772,
      "compression_ratio": 1.0254572951173844,
      "cumulative_compression_ratio": 2.5482140285179318,
      "num_uses": 4,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_11 $v1": "(rows_to_grid $v3)"
        },
        {
          "fn_11 $v2": "(rows_to_grid $v4)"
        },
        {
          "fn_11 $v4": "(rows_to_grid $v6)"
        },
        {
          "fn_11 $v5": "(rows_to_grid $v6)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(tuple2_first (tuple2 #0 #1))",
      "dreamcoder": "#(lambda (lambda (tuple2_first (tuple2 $1 $0))))",
      "arity": 2,
      "name": "fn_12",
      "utility": 302,
      "final_cost": 27267,
      "compression_ratio": 1.0185205559834232,
      "cumulative_compression_ratio": 2.5954083690908423,
      "num_uses": 56,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_12 $v2 $v3": "(tuple2_first $v1)"
        },
        {
          "fn_12 $v2 $v3": "(tuple2_first $v1)"
        },
        {
          "fn_12 $v2 $v3": "(tuple2_first $v1)"
        },
        {
          "fn_12 $v11 $v12": "(tuple2_first $v10)"
        },
        {
          "fn_12 $v6 $v9": "(tuple2_first $v10)"
        },
        {
          "fn_12 $v6 $v9": "(tuple2_first $v11)"
        },
        {
          "fn_12 $v14 $v15": "(tuple2_first $v13)"
        },
        {
          "fn_12 $v3 $v4": "(tuple2_first $v2)"
        },
        {
          "fn_12 $v3 $v4": "(tuple2_first $v2)"
        },
        {
          "fn_12 $v3 $v4": "(tuple2_first $v2)"
        },
        {
          "fn_12 $v2 $v2": "(tuple2_first $v3)"
        },
        {
          "fn_12 $v4 $v5": "(tuple2_first $v3)"
        },
        {
          "fn_12 $v4 $v5": "(tuple2_first $v3)"
        },
        {
          "fn_12 $v2 $v3": "(tuple2_first $v4)"
        },
        {
          "fn_12 $v2 $v3": "(tuple2_first $v4)"
        },
        {
          "fn_12 $v3 $v2": "(tuple2_first $v4)"
        },
        {
          "fn_12 $v5 $v6": "(tuple2_first $v4)"
        },
        {
          "fn_12 $v5 $v6": "(tuple2_first $v4)"
        },
        {
          "fn_12 $v2 $v4": "(tuple2_first $v5)"
        },
        {
          "fn_12 $v2 $v4": "(tuple2_first $v5)"
        },
        {
          "fn_12 $v3 $v4": "(tuple2_first $v5)"
        },
        {
          "fn_12 $v3 $v4": "(tuple2_first $v5)"
        },
        {
          "fn_12 $v4 $v3": "(tuple2_first $v5)"
        },
        {
          "fn_12 $v2 $v4": "(tuple2_first $v6)"
        },
        {
          "fn_12 $v2 $v5": "(tuple2_first $v6)"
        },
        {
          "fn_12 $v3 $v5": "(tuple2_first $v6)"
        },
        {
          "fn_12 $v3 $v5": "(tuple2_first $v6)"
        },
        {
          "fn_12 $v7 $v8": "(tuple2_first $v6)"
        },
        {
          "fn_12 $v3 $v5": "(tuple2_first $v7)"
        },
        {
          "fn_12 $v6 $v4": "(tuple2_first $v7)"
        },
        {
          "fn_12 $v8 $v9": "(tuple2_first $v7)"
        },
        {
          "fn_12 $v9 $v10": "(tuple2_first $v8)"
        },
        {
          "fn_12 $v9 $v10": "(tuple2_first $v8)"
        },
        {
          "fn_12 $v9 $v10": "(tuple2_first $v8)"
        },
        {
          "fn_12 $v6 $v8": "(tuple2_first $v9)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rev_fix_param (fn_9 #0 #1 #2) #0 (lam Const(color, 0)))",
      "dreamcoder": "#(lambda (lambda (lambda (rev_fix_param (#(lambda (lambda (lambda (rev_select_grid (lambda (eq? $0 $3)) $1 $0)))) $2 $1 $0) $2 (lambda Const(color, 0))))))",
      "arity": 3,
      "name": "fn_13",
      "utility": 301,
      "final_cost": 26659,
      "compression_ratio": 1.0228065568851044,
      "cumulative_compression_ratio": 2.6546006977005887,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_13 $v1 $v2 $v3": "(rev_fix_param (fn_9 $v1 $v2 $v3) $v1 (lam Const(color, 0)))"
        },
        {
          "fn_13 $v1 $v2 $v3": "(rev_fix_param (fn_9 $v1 $v2 $v3) $v1 (lam Const(color, 0)))"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(fn_5 (rows #0))",
      "dreamcoder": "#(lambda (#(lambda (rows_to_grid (reverse $0))) (rows $0)))",
      "arity": 1,
      "name": "fn_14",
      "utility": 202,
      "final_cost": 26255,
      "compression_ratio": 1.01538754522948,
      "cumulative_compression_ratio": 2.695448486002666,
      "num_uses": 7,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_14 $v3": "(fn_5 $v2)"
        },
        {
          "fn_14 $v3": "(fn_5 $v4)"
        },
        {
          "fn_14 $v3": "(fn_5 $v4)"
        },
        {
          "fn_14 $v5": "(fn_5 $v6)"
        },
        {
          "fn_14 $v6": "(fn_5 $v7)"
        },
        {
          "fn_14 $v6": "(fn_5 $v7)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(rows_to_grid (cons #0 #1))",
      "dreamcoder": "#(lambda (lambda (rows_to_grid (cons $1 $0))))",
      "arity": 2,
      "name": "fn_15",
      "utility": 201,
      "final_cost": 25851,
      "compression_ratio": 1.0156280221268037,
      "cumulative_compression_ratio": 2.737573014583575,
      "num_uses": 28,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_15 $v2 $v3": "(rows_to_grid $v1)"
        },
        {
          "fn_15 $v1 $v9": "(rows_to_grid $v10)"
        },
        {
          "fn_15 $v11 $v12": "(rows_to_grid $v10)"
        },
        {
          "fn_15 $v11 $v12": "(rows_to_grid $v10)"
        },
        {
          "fn_15 $v1 $v10": "(rows_to_grid $v11)"
        },
        {
          "fn_15 $v1 $v11": "(rows_to_grid $v12)"
        },
        {
          "fn_15 $v1 $v12": "(rows_to_grid $v13)"
        },
        {
          "fn_15 $v6 $v13": "(rows_to_grid $v14)"
        },
        {
          "fn_15 $v6 $v14": "(rows_to_grid $v15)"
        },
        {
          "fn_15 $v9 $v16": "(rows_to_grid $v17)"
        },
        {
          "fn_15 $v9 $v17": "(rows_to_grid $v18)"
        },
        {
          "fn_15 $v9 $v18": "(rows_to_grid $v19)"
        },
        {
          "fn_15 $v3 $v4": "(rows_to_grid $v2)"
        },
        {
          "fn_15 $v9 $v20": "(rows_to_grid $v21)"
        },
        {
          "fn_15 $v9 $v21": "(rows_to_grid $v22)"
        },
        {
          "fn_15 $v9 $v21": "(rows_to_grid $v22)"
        },
        {
          "fn_15 $v9 $v22": "(rows_to_grid $v23)"
        },
        {
          "fn_15 $v4 $v5": "(rows_to_grid $v3)"
        },
        {
          "fn_15 $v5 $v6": "(rows_to_grid $v4)"
        },
        {
          "fn_15 $v8 $v9": "(rows_to_grid $v7)"
        },
        {
          "fn_15 $v1 $v8": "(rows_to_grid $v9)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(columns_to_grid (concat #0 #1))",
      "dreamcoder": "#(lambda (lambda (columns_to_grid (concat $1 $0))))",
      "arity": 2,
      "name": "fn_16",
      "utility": 201,
      "final_cost": 25447,
      "compression_ratio": 1.015876134711361,
      "cumulative_compression_ratio": 2.7810350925452902,
      "num_uses": 28,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_16 $v1 $v1": "(columns_to_grid $v2)"
        },
        {
          "fn_16 $v1 $v2": "(columns_to_grid $v3)"
        },
        {
          "fn_16 $v1 $v4": "(columns_to_grid $v5)"
        },
        {
          "fn_16 $v1 $v4": "(columns_to_grid $v5)"
        },
        {
          "fn_16 $v3 $v3": "(columns_to_grid $v5)"
        },
        {
          "fn_16 $v3 $v4": "(columns_to_grid $v5)"
        },
        {
          "fn_16 $v3 $v4": "(columns_to_grid $v5)"
        },
        {
          "fn_16 $v1 $v5": "(columns_to_grid $v6)"
        },
        {
          "fn_16 $v3 $v4": "(columns_to_grid $v6)"
        },
        {
          "fn_16 $v5 $v4": "(columns_to_grid $v6)"
        },
        {
          "fn_16 $v1 $v6": "(columns_to_grid $v7)"
        },
        {
          "fn_16 $v3 $v5": "(columns_to_grid $v7)"
        },
        {
          "fn_16 $v4 $v6": "(columns_to_grid $v7)"
        },
        {
          "fn_16 $v4 $v6": "(columns_to_grid $v7)"
        },
        {
          "fn_16 $v3 $v7": "(columns_to_grid $v8)"
        },
        {
          "fn_16 $v6 $v7": "(columns_to_grid $v8)"
        },
        {
          "fn_16 $v7 $v7": "(columns_to_grid $v8)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(columns_to_grid (#0 (tuple2_second #1)))",
      "dreamcoder": "#(lambda (lambda (columns_to_grid ($1 (tuple2_second $0)))))",
      "arity": 2,
      "name": "fn_17",
      "utility": 98,
      "final_cost": 25146,
      "compression_ratio": 1.01197009464726,
      "cumulative_compression_ratio": 2.814324345820409,
      "num_uses": 14,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_17 (repeat $v2) $v8": "(columns_to_grid $v1)"
        },
        {
          "fn_17 (repeat $v2) $v8": "(columns_to_grid $v1)"
        },
        {
          "fn_17 (repeat $v2) $v8": "(columns_to_grid $v1)"
        },
        {
          "fn_17 (repeat $v7) $v8": "(columns_to_grid $v10)"
        },
        {
          "fn_17 rows $v8": "(columns_to_grid $v10)"
        },
        {
          "fn_17 (repeat $v7) $v10": "(columns_to_grid $v12)"
        },
        {
          "fn_17 (repeat $v7) $v10": "(columns_to_grid $v12)"
        },
        {
          "fn_17 rows $v10": "(columns_to_grid $v12)"
        },
        {
          "fn_17 (repeat $v7) $v11": "(columns_to_grid $v13)"
        },
        {
          "fn_17 rows $v11": "(columns_to_grid $v13)"
        },
        {
          "fn_17 rows $v11": "(columns_to_grid $v13)"
        },
        {
          "fn_17 rows $v12": "(columns_to_grid $v14)"
        },
        {
          "fn_17 rows $v13": "(columns_to_grid $v15)"
        },
        {
          "fn_17 rows $v14": "(columns_to_grid $v16)"
        }
      ],
      "dc_comparison_millis": null
    }
  ]
}
