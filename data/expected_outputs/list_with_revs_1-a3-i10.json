{
  "cmd": "target/release/compress -a3 -i10 --fmt=dreamcoder --out=data/expected_outputs/list_with_revs_1-a3-i10.json data/dc/list_with_revs.json",
  "args": {
    "iterations": 10,
    "abstraction_prefix": "fn_",
    "previous_abstractions": 0,
    "shuffle": false,
    "truncate": null,
    "no_opt": false,
    "silent": false,
    "verbose_rewrite": false,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "eta_long": false,
      "no_curried_metavars": false,
      "no_curried_bodies": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "cost": {
        "cost_lam": 1,
        "cost_app": 1,
        "cost_var": 100,
        "cost_ivar": 100,
        "cost_prim_default": 100,
        "cost_nvar": 100,
        "cost_let": 1,
        "cost_revlet": 1
      },
      "no_mismatch_check": false,
      "follow": null,
      "follow_prune": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "rewritten_dreamcoder": false,
      "rewritten_intermediates": false,
      "inv_arg_cap": false,
      "allow_single_task": false,
      "no_opt_single_use": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "structure_penalty": 1.0,
      "rewrite_check": true,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": false,
      "quiet": false,
      "fused_lambda_tags": {
        "tags": null
      }
    }
  },
  "original_cost": 92448,
  "final_cost": 91337,
  "compression_ratio": 1.012163745251103,
  "num_abstractions": 2,
  "original": [
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in let $v4::list(int) = (repeat $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5::list(int) = (concat $v2 $v4) in (cons $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5::list(int) = (concat $v2 $v4) in (cons $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v1 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = 1 in let $v6::list(int) = (repeat $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v1) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = 1 in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::int = (- $v3 $v1) in let $v7::int = (- $v5 $v6) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v4 $v1) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = 1 in let $v8::list(int) = (repeat $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (concat $v2 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v2 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (- $v3 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v7 $v3) in let $v9::int = (+ $v3 $v8) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v7 $v3) in let $v9::int = (+ $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (concat $v4 $v8) in let $v10::list(int) = (cons $v3 $v9) in (cons $v1 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v4 $v8) in let $v10::list(int) = (cons $v3 $v9) in (cons $v1 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = 1 in let $v12::list(int) = (repeat $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::int = (- $v5 $v11) in let $v13::int = (- $v5 $v12) in let $v14::list(int) = (repeat $v9 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::int = (- $v5 $v13) in let $v15::int = (- $v5 $v14) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = Const(int, 1) in let $v14::int = (- $v5 $v13) in let $v15::int = (- $v5 $v14) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $inp0 $v2)",
    "let $v1::int = 0 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 0) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = (range $v1) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 0) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::list(int) = (repeat $v2 $v1) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $inp0 $v2)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (- $v2 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = Const(int, -1) in let $v4::int = (+ $v2 $v3) in let $v5::list(int) = (range $v4) in let $v6::list(int) = (cons $v1 $v5) in (concat $inp0 $v6)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v3 $v4) in let $v6::list(int) = (repeat $v5 $v1) in (concat $inp0 $v6)",
    "let $v1::int = Const(int, 3) in let $v2::int = Const(int, 1) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (- $v1 $v4) in let $v6::list(int) = (repeat $v5 $v2) in (concat $inp0 $v6)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 2) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (range $v1) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v4 $v5) in (concat $inp0 $v6)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, 3) in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v1 $v3) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v4 $v5) in (concat $inp0 $v6)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, -3) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v5 $v3) in (concat $inp0 $v6)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::int = Const(int, -4) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -5) in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v1) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (- $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v2) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in +",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in +",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in -",
    "(cdr (cdr $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr $v2)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v4",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v1 $v6) $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v3 $v6) $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v5 = (rev_fix_param (- $v7 $v8) $v8 (lam 1))) in (cdr (concat (repeat $v3 $v8) $v6))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v5 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v6",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v5) in let $v10::int = (+ $v5 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v3 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v4 $v9) in let $v12::int = (- $v4 $v11) in (cons $v12 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in (cons $v12 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v3) in let $v11::int = (- $v3 $v10) in let $v12::int = (+ $v1 $v11) in (cons $v12 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v1 $v11) in (cons $v12 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr (cdr (cdr $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr (cdr $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cdr $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v8",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr (cdr (cdr $v4)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cdr (cdr $v6))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cdr $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in $v10",
    "(empty? $inp0)",
    "(eq? empty $inp0)",
    "(eq? $inp0 empty)",
    "(gt? 1 (length $inp0))",
    "(empty? (range (length $inp0)))",
    "(empty? (concat $inp0 $inp0))",
    "(empty? (concat $inp0 empty))",
    "(empty? (concat empty $inp0))",
    "(eq? (concat $inp0 $inp0) $inp0)",
    "(eq? $inp0 (concat $inp0 $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v1::int = Const(int, 0) in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in let $v4::int = (+ $v1 $v3) in (- $v4 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (+ $v1 $v3) in let $v5::int = 1 in (- $v4 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1::int = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (- $v1 $v2) in (- $v1 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1::int = Const(int, 1) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (+ $v1 $v2) in let $v5::int = 1 in (- $v4 $v5)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (+ $v1 $v1) in let $v4::int = (- $v1 $v3) in (+ $v3 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v1::int = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v2 $v4) in (+ $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in (- $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in (- $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (+ $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (+ $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (- $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v1 $v5) in (+ $v6 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6::int = (- $v3 $v1) in let $v7::int = (- $v5 $v6) in (+ $v3 $v7)",
    "let $v1::int = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6::int = (- $v4 $v2) in let $v7::int = (- $v1 $v6) in (+ $v7 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in (- $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in (- $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (+ $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (+ $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v5 $v3) in (- $v5 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = Const(int, 0) in let $v7::int = (- $v6 $v1) in (- $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6::int = (- $v5 $v1) in let $v7::int = (+ $v3 $v6) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v1 $v4) in let $v7::int = (- $v3 $v6) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v5",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in (- $v7 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in (- $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in (- $v7 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in (- $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in (- $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in (- $v3 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in (+ $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = Const(int, 0) in let $v9::int = (- $v8 $v1) in (+ $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v7",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in (- $v9 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v3 $v7) in (- $v9 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in (- $v9 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in (- $v9 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in (+ $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8, $v9 = rev($v6 = (cons $v8 $v9)) in let $v10::int = (- $v7 $v8) in (- $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v1 $v8) in let $v11::int = (- $v3 $v10) in (+ $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in (- $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v3 $v9) in (+ $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in (- $v11 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v5 $v9) in (- $v11 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v3) in (- $v11 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v5) in (- $v11 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in (- $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in (- $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in (- $v5 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in (+ $v11 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in (+ $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v5) in (+ $v11 $v5)",
    "Const(bool, true)",
    "(is-square 0)",
    "(is-square 1)",
    "(gt? 1 0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (is-square (- $v1 $v1))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (empty? (repeat $v1 (- $v1 $v1)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (is-square $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 0))) in (is-square $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in (is-square $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (gt? $v4 0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cons $v1 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in (concat $v4 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 2) in let $v4::list(int) = (repeat $v1 $v3) in (concat $v4 $v2)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = (cons $v1 $v2) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = (cons $v3 $v4) in let $v6::list(int) = (cons $v1 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (+ $v1 $v3) in let $v5::int = (- $v4 $v1) in let $v6::list(int) = (repeat $v1 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v1 $v6) in (concat $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v3 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = (cons $v1 $v2) in (cons $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in let $v8::int = (- $v7 $v3) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = (cons $v1 $v2) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v1 $v2) in (cons $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in (cons $v10 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in (cons $v10 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in let $v12::int = (- $v1 $v11) in (cons $v12 $inp0)",
    "let $v1::int = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v6 $v8) in let $v11::int = (- $v1 $v10) in let $v12::int = (+ $v11 $v6) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = (cons $v1 $v2) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in let $v13::list(int) = (cons $v1 $v2) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v7) in let $v12::int = (- $v11 $v7) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v5) in let $v12::int = (+ $v5 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v11) in let $v14::int = (+ $v13 $v11) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (concat $v16 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v12) in let $v14::int = (+ $v13 $v12) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (concat $v16 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v7) in let $v12::int = (- $v11 $v7) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15::list(int) = (cons $v1 $v2) in (cons $v14 $v15)",
    "let $v1::int = Const(int, 0) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $v1 $inp0)",
    "let $v1::int = 0 in (cons $v1 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 0 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in (cons $v1 $inp0)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $v2 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1::int = Const(int, 2) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = Const(int, -1) in let $v3::int = 1 in let $v4::int = (- $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v2 $v1) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in (cons $v4 $inp0)",
    "let $v1::int = Const(int, -3) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $v1 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::list(int) = (cons $v2 $v3) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -4) in let $v4::int = (+ $v3 $v1) in let $v5::int = (- $v1 $v4) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 4) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (- $v1 $v2) in let $v5::int = (+ $v4 $v2) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -4) in let $v6::int = (+ $v5 $v3) in let $v7::int = (- $v3 $v6) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -4) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v6 $v3) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 4) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v3 $v6) in (cons $v7 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6::list(int) = (cons $v4 $v5) in let $v7::list(int) = (cons $v2 $v6) in (cons $v1 $v7)",
    "let $v1::int = Const(int, 5) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -4) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = Const(int, -6) in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, -5) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in (cons $v4 $inp0)",
    "(range $inp0)",
    "let $v1::int = Const(int, 0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (- $v1 $v3) in (range $v4)",
    "let $v1::int = (+ $inp0 $inp0) in let $v2::int = (- $inp0 $v1) in let $v3::int = (+ $v1 $v2) in (range $v3)",
    "let $v1::int = (+ $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (+ $v1 $v3) in (range $v4)",
    "let $v1::int = (- $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (- $v1 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $inp0 $inp0) in let $v4::int = (+ $v2 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $inp0 $v2) in let $v4::int = (- $v3 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $v2 $inp0) in let $v4::int = (- $v3 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (- $inp0 $v2) in let $v4::int = (+ $v2 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (- $inp0 $v2) in let $v4::int = (+ $v3 $v2) in (range $v4)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (cdr (concat (repeat $v4 $v4) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in +",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in (concat $v4 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = (cons $v3 $v6) in (cons $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (concat $v6 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in let $v7::list(int) = (cons $v1 $v6) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in (concat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in let $v9::list(int) = (cons $v3 $v6) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v3 $v8) in (cons $v6 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v6 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v3 $v8) in (cons $v6 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v10::list(int) = (cons $v1 $v9) in let $v11, $v12 = rev($v4 = (cons $v11 $v12)) in (concat $v10 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v6) in let $v9::list(int) = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (+ $v7 $v9) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v3 $v12) in let $v14::list(int) = (cons $v13 $v8) in let $v15::list(int) = (cons $v10 $v14) in (cons $v1 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v9 $v11) in let $v13::int = (- $v7 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v3 $v14) in let $v16::list(int) = (cons $v15 $v10) in let $v17::list(int) = (cons $v12 $v16) in (cons $v6 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = (- $v5 $v1) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12::int = (- $v3 $v10) in let $v13::int = (- $v8 $v12) in let $v14::int = (- $v10 $v13) in let $v15::int = (- $v3 $v14) in let $v16::list(int) = (cons $v15 $v11) in let $v17::list(int) = (cons $v7 $v16) in (cons $v6 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v1 $v6) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v1 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v1 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = (- $v1 $v3) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::list(int) = (cons $v7 $v10) in let $v12::list(int) = (cons $v5 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v1 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::list(int) = (cons $v9 $v12) in let $v14::list(int) = (cons $v7 $v13) in let $v15::list(int) = (cons $v6 $v14) in (cons $v1 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::list(int) = (cons $v9 $v12) in let $v14::list(int) = (cons $v7 $v13) in let $v15::list(int) = (cons $v3 $v14) in (cons $v6 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14::list(int) = (cons $v10 $v13) in let $v15::list(int) = (cons $v8 $v14) in let $v16::list(int) = (cons $v7 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14::list(int) = (cons $v10 $v13) in let $v15::list(int) = (cons $v8 $v14) in let $v16::list(int) = (cons $v7 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15::list(int) = (cons $v11 $v14) in let $v16::list(int) = (cons $v5 $v15) in let $v17::list(int) = (cons $v10 $v16) in (cons $v1 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (- $v1 $v9) in let $v11::int = (- $v1 $v10) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::list(int) = (cons $v13 $v16) in let $v18::list(int) = (cons $v12 $v17) in let $v19::list(int) = (cons $v3 $v18) in (cons $v1 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::list(int) = (cons $v13 $v16) in let $v18::list(int) = (cons $v7 $v17) in let $v19::list(int) = (cons $v12 $v18) in (cons $v6 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v3 $v12) in let $v14, $v15 = rev($v6 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::list(int) = (cons $v14 $v17) in let $v19::list(int) = (cons $v13 $v18) in let $v20::list(int) = (cons $v10 $v19) in (cons $v1 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v3 $v13) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::list(int) = (cons $v15 $v18) in let $v20::list(int) = (cons $v14 $v19) in let $v21::list(int) = (cons $v3 $v20) in (cons $v6 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in (repeat $v3 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (repeat $v3 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (repeat $v6 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v4) in let $v6::int = (+ $v5 $v4) in (repeat $v3 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (repeat $v6 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v1 $v6) in let $v8::int = (- $v1 $v7) in (repeat $v8 $v1)",
    "(concat $inp0 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in (concat $inp0 $v1)",
    "let $v1::list(int) = (concat $inp0 $inp0) in (concat $v1 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in (concat $v1 $v1)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $inp0 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v2 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $inp0 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v2 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v4 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9::list(int) = (concat $v1 $v8) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v5 $v4) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9::list(int) = (concat $v1 $v8) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = Const(int, -1) in let $v7::int = (* $v5 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v3) in (concat $inp0 $v11)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::int = Const(int, -1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (* $v2 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (- $v2 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v1 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v2 $v1)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v1 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $v1) in (concat $inp0 $v2)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $inp0) in let $v3::list(int) = (concat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $inp0 $v2) in (concat $v3 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $v2 $inp0) in (concat $inp0 $v3)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $v2 $inp0) in (concat $v3 $inp0)",
    "let $v1::list(int) = (concat $inp0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in (repeat $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -1) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v4 $v1) in (repeat $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::int = Const(int, -1) in let $v7::int = (- $v5 $v6) in (repeat $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (cons $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v6 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v5 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v10 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v1 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = (- $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10::int = Const(int, 1) in let $v11::list(int) = (repeat $v8 $v10) in let $v12::list(int) = (cons $v7 $v11) in (cons $v6 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15::int = (- $v11 $v13) in let $v16::int = (+ $v13 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v10 $v18) in let $v20::list(int) = (cons $v5 $v19) in let $v21::list(int) = (cons $v3 $v20) in (cons $v1 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v9) in let $v12::int = (- $v11 $v1) in let $v13::int = (+ $v7 $v12) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (- $v9 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v14 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = (+ $v7 $v10) in let $v12::int = (+ $v11 $v1) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = (- $v7 $v1) in let $v12::int = (+ $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v10 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v3 $v9) in let $v11::int = (+ $v1 $v10) in let $v12::int = (- $v11 $v3) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v1 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v7 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v6 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v3) in let $v10::int = (- $v9 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13::int = (+ $v12 $v1) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::int = (- $v14 $v16) in let $v19::int = (+ $v16 $v18) in let $v20::list(int) = Const(list(int), Any[]) in let $v21::list(int) = (cons $v19 $v20) in let $v22::list(int) = (cons $v13 $v21) in let $v23::list(int) = (cons $v5 $v22) in let $v24::list(int) = (cons $v3 $v23) in (cons $v1 $v24)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v1 $v11) in let $v13::int = (- $v12 $v3) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::int = (- $v14 $v16) in let $v19::int = (+ $v16 $v18) in let $v20::list(int) = Const(list(int), Any[]) in let $v21::list(int) = (cons $v19 $v20) in let $v22::list(int) = (cons $v13 $v21) in let $v23::list(int) = (cons $v5 $v22) in let $v24::list(int) = (cons $v3 $v23) in (cons $v10 $v24)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = Const(int, 0) in let $v7::int = (- $v6 $v3) in let $v8::int = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (- $v15 $v17) in let $v20::int = (+ $v17 $v19) in let $v21::list(int) = Const(list(int), Any[]) in let $v22::list(int) = (cons $v20 $v21) in let $v23::list(int) = (cons $v14 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v3 $v24) in (cons $v8 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (+ $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v1 $v4) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v7 $v4) in let $v9, $v10 = rev($v5 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (- $v15 $v17) in let $v20::int = (+ $v17 $v19) in let $v21::list(int) = Const(list(int), Any[]) in let $v22::list(int) = (cons $v20 $v21) in let $v23::list(int) = (cons $v14 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v4 $v24) in (cons $v8 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in (repeat $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in (cons $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = 1 in (repeat $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (cons $v3 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v8 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, -1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v5 $v8) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v6 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v6 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (cons $v3 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, -1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v3) in let $v12::list(int) = (repeat $v5 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v5 $v10) in (cons $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v5 $v12) in (cons $v8 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v9 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v7 $v13) in let $v15::list(int) = (cons $v5 $v14) in (cons $v12 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v5 $v14) in (concat $v10 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (concat $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (concat $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (cons $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in let $v17::list(int) = (cons $v7 $v16) in let $v18::list(int) = (cons $v5 $v17) in (cons $v3 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 0) in let $v10::int = (- $v9 $v1) in let $v11::int = (- $v7 $v10) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (+ $v17 $v6) in let $v20::int = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23::int = Const(int, 1) in let $v24::list(int) = (repeat $v21 $v23) in let $v25::list(int) = (cons $v20 $v24) in let $v26::list(int) = (cons $v15 $v25) in let $v27::list(int) = (cons $v14 $v26) in (cons $v6 $v27)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 0) in let $v10::int = (- $v9 $v1) in let $v11::int = (- $v7 $v10) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (+ $v6 $v17) in let $v20::int = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23::int = Const(int, 1) in let $v24::list(int) = (repeat $v21 $v23) in let $v25::list(int) = (cons $v20 $v24) in let $v26::list(int) = (cons $v15 $v25) in let $v27::list(int) = (cons $v14 $v26) in (cons $v6 $v27)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in let $v8::int = (- $v7 $v3) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v5 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v7 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v8) in let $v15::int = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18::list(int) = Const(list(int), Any[]) in let $v19::list(int) = (cons $v16 $v18) in let $v20::list(int) = (cons $v15 $v19) in (cons $v8 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v7 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v8) in let $v15::int = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18::list(int) = Const(list(int), Any[]) in let $v19::list(int) = (cons $v16 $v18) in let $v20::list(int) = (cons $v15 $v19) in (cons $v8 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8::int = (- $v3 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13::int = (- $v6 $v11) in let $v14::int = (- $v10 $v13) in let $v15::int = (+ $v14 $v1) in let $v16::int = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v10 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = (+ $v1 $v5) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12::int = (- $v9 $v10) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v14 $v8) in let $v16::int = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v8 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = (+ $v5 $v1) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12::int = (- $v9 $v10) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v14 $v8) in let $v16::int = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v8 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6, $v7 = rev($v4 = (cons $v6 $v7)) in let $v8::int = (- $v5 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13::int = (- $v6 $v11) in let $v14::int = (- $v10 $v13) in let $v15::int = (+ $v14 $v1) in let $v16::int = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v10 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in (repeat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = 1 in (repeat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v1) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v3) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = (- $v3 $v3) in let $v14::list(int) = (range $v13) in let $v15::list(int) = (cons $v12 $v14) in (cons $v7 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v3 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v3 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (+ $v11 $v1) in let $v14::int = (- $v13 $v1) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v13 $v1) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in (cons $v7 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::int = (- $v3 $v15) in let $v17::int = (- $v3 $v16) in let $v18::list(int) = (repeat $v13 $v17) in let $v19::list(int) = (cons $v12 $v18) in (cons $v7 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v3 $v7) in let $v10::int = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in let $v10::int = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v10) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v10 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v3 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (* $v10 $v11) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16::int = (- $v14 $v7) in let $v17::int = (+ $v7 $v16) in let $v18, $v19 = rev($v15 = (cons $v18 $v19)) in let $v20::int = Const(int, 1) in let $v21::list(int) = (repeat $v18 $v20) in let $v22::list(int) = (cons $v17 $v21) in (cons $v13 $v22)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in (repeat $v9 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v3 $v11) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::int = (+ $v3 $v11) in let $v13::int = (- $v12 $v3) in (repeat $v9 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::list(int) = Const(list(int), Any[]) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 2) in let $v12, $v13 = rev($v1 = (rev_fix_param (* $v12 $v13) $v13 (lam Const(int, -1)))) in let $v14::int = (+ $v11 $v13) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v13 $v3) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v1) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in (cons $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v7 $v11) in let $v14::int = (- $v7 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v9 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v7 $v9) in let $v12::int = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v7 $v9) in let $v12::int = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v1 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v3 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam (+ $0 $0)))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v3 $v4) in let $v7::int = (+ $v6 $v4) in (repeat $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v3 $v7) in (cons $v6 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -1) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v6 $v1) in let $v8::list(int) = (repeat $v3 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v3 $v7) in (cons $v6 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, 2) in let $v8::int = (+ $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, -1) in let $v8::int = (- $v1 $v7) in let $v9::int = (- $v8 $v1) in let $v10::list(int) = (repeat $v5 $v9) in (concat $v4 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (cons $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in let $v13::list(int) = (cons $v8 $v12) in let $v14::list(int) = (cons $v3 $v13) in (cons $v1 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v1 $v5) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v8 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v1 $v5) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v8 $v17) in (cons $v10 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)"
  ],
  "rewritten": [
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in let $v4::list(int) = (repeat $v1 $v3) in (concat $inp0 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5::list(int) = (concat $v2 $v4) in (cons $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5::list(int) = (concat $v2 $v4) in (cons $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 0 in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v1 $v4) in let $v6::list(int) = (repeat $v1 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = 1 in let $v6::list(int) = (repeat $v3 $v5) in (concat $inp0 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v1) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v3 $v6) in (concat $inp0 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = 1 in let $v8::list(int) = (repeat $v6 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::int = (- $v3 $v1) in let $v7::int = (- $v5 $v6) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v4 $v1) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = 1 in let $v8::list(int) = (repeat $v5 $v7) in (concat $inp0 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (concat $v2 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v2 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (- $v3 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v7 $v3) in let $v9::int = (+ $v3 $v8) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v7 $v3) in let $v9::int = (+ $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (concat $inp0 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (concat $v4 $v8) in let $v10::list(int) = (cons $v3 $v9) in (cons $v1 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in let $v9::list(int) = (concat $v4 $v8) in let $v10::list(int) = (cons $v3 $v9) in (cons $v1 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in let $v10::int = (- $v9 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = 1 in let $v12::list(int) = (repeat $v10 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = 1 in let $v12::list(int) = (repeat $v9 $v11) in (concat $inp0 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::int = (- $v5 $v11) in let $v13::int = (- $v5 $v12) in let $v14::list(int) = (repeat $v9 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (concat $inp0 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::int = (- $v5 $v13) in let $v15::int = (- $v5 $v14) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v11 $v7) in let $v13::int = Const(int, 1) in let $v14::int = (- $v5 $v13) in let $v15::int = (- $v5 $v14) in let $v16::list(int) = (repeat $v12 $v15) in (concat $inp0 $v16)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $inp0 $v2)",
    "let $v1::int = 0 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 0) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 0 in let $v2::list(int) = (range $v1) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 0) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::list(int) = (repeat $v2 $v1) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $inp0 $v1)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $inp0 $v2)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (- $v2 $v1) in let $v4::list(int) = (range $v3) in let $v5::list(int) = (cons $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = Const(int, -1) in let $v4::int = (+ $v2 $v3) in let $v5::list(int) = (range $v4) in let $v6::list(int) = (cons $v1 $v5) in (concat $inp0 $v6)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v3 $v4) in let $v6::list(int) = (repeat $v5 $v1) in (concat $inp0 $v6)",
    "let $v1::int = Const(int, 3) in let $v2::int = Const(int, 1) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (- $v1 $v4) in let $v6::list(int) = (repeat $v5 $v2) in (concat $inp0 $v6)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 2) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, 1) in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 3) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (range $v1) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v4 $v5) in (concat $inp0 $v6)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, 3) in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v1 $v3) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v4 $v5) in (concat $inp0 $v6)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 0 in let $v3::int = Const(int, -1) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v1 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, -3) in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = Const(list(int), Any[]) in let $v5::list(int) = (cons $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in let $v4::int = Const(int, -3) in let $v5::int = (- $v3 $v4) in let $v6::list(int) = (repeat $v5 $v3) in (concat $inp0 $v6)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in let $v3::int = Const(int, -4) in let $v4::int = (- $v2 $v3) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $inp0 $v1)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v1) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::list(int) = (repeat $v3 $v2) in (concat $inp0 $v4)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = 1 in let $v5::list(int) = (repeat $v3 $v4) in (concat $inp0 $v5)",
    "let $v1::int = 1 in let $v2::int = Const(int, -5) in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v1) in let $v5::list(int) = (repeat $v4 $v1) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (- $v1 $v3) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "let $v1::int = Const(int, 7) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in let $v4::int = (- $v3 $v2) in let $v5::list(int) = (repeat $v4 $v2) in (concat $inp0 $v5)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in +",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in +",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in -",
    "(fn_1 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr $v2)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v4",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v1 $v6) $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lam 1))) in (cdr (concat (repeat $v3 $v6) $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v5 = (rev_fix_param (- $v7 $v8) $v8 (lam 1))) in (cdr (concat (repeat $v3 $v8) $v6))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v5 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v6",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v5) in let $v10::int = (+ $v5 $v9) in (cons $v10 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v3 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v4 $v9) in let $v12::int = (- $v4 $v11) in (cons $v12 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in (cons $v12 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v3) in let $v11::int = (- $v3 $v10) in let $v12::int = (+ $v1 $v11) in (cons $v12 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v1 $v11) in (cons $v12 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr (fn_1 $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (fn_1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cdr $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v8",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr (fn_1 $v4))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (fn_1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cdr $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in $v10",
    "(empty? $inp0)",
    "(eq? empty $inp0)",
    "(eq? $inp0 empty)",
    "(gt? 1 (length $inp0))",
    "(empty? (range (length $inp0)))",
    "(empty? (fn_0 $inp0))",
    "(empty? (concat $inp0 empty))",
    "(empty? (concat empty $inp0))",
    "(eq? (fn_0 $inp0) $inp0)",
    "(eq? $inp0 (fn_0 $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v1::int = Const(int, 0) in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in let $v4::int = (+ $v1 $v3) in (- $v4 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (+ $v1 $v3) in let $v5::int = 1 in (- $v4 $v5)",
    "let $v1::int = 0 in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1::int = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (- $v1 $v2) in (- $v1 $v4)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1::int = Const(int, 1) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (+ $v1 $v2) in let $v5::int = 1 in (- $v4 $v5)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5::int = (- $v2 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (+ $v1 $v1) in let $v4::int = (- $v1 $v3) in (+ $v3 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
    "let $v1::int = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = Const(int, -1) in let $v5::int = (+ $v2 $v4) in (+ $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in (- $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in (- $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (+ $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (+ $v5 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (- $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v1 $v5) in (+ $v6 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6::int = (- $v3 $v1) in let $v7::int = (- $v5 $v6) in (+ $v3 $v7)",
    "let $v1::int = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6::int = (- $v4 $v2) in let $v7::int = (- $v1 $v6) in (+ $v7 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in (- $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in (- $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in (- $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (+ $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in (+ $v5 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v5 $v3) in (- $v5 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = Const(int, 0) in let $v7::int = (- $v6 $v1) in (- $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6::int = (- $v5 $v1) in let $v7::int = (+ $v3 $v6) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v1 $v4) in let $v7::int = (- $v3 $v6) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v5",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in (- $v7 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in (- $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in (- $v7 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in (- $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in (- $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in (- $v3 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in (+ $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in (+ $v7 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = Const(int, 0) in let $v9::int = (- $v8 $v1) in (+ $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v7",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v1 $v7) in (- $v9 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v3 $v7) in (- $v9 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v1) in (- $v9 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in (- $v9 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in (+ $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8, $v9 = rev($v6 = (cons $v8 $v9)) in let $v10::int = (- $v7 $v8) in (- $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v1 $v8) in let $v11::int = (- $v3 $v10) in (+ $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in (- $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lam Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v3 $v9) in (+ $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in (- $v11 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v5 $v9) in (- $v11 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v3) in (- $v11 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v5) in (- $v11 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in (- $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in (- $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in (- $v5 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in (+ $v11 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in (+ $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v5) in (+ $v11 $v5)",
    "Const(bool, true)",
    "(is-square 0)",
    "(is-square 1)",
    "(gt? 1 0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (is-square (- $v1 $v1))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (empty? (repeat $v1 (- $v1 $v1)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (is-square $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 0))) in (is-square $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in (is-square $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (gt? $v4 0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cons $v1 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in (concat $v4 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 2) in let $v4::list(int) = (repeat $v1 $v3) in (concat $v4 $v2)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = (cons $v1 $v2) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = (cons $v3 $v4) in let $v6::list(int) = (cons $v1 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::int = (+ $v1 $v3) in let $v5::int = (- $v4 $v1) in let $v6::list(int) = (repeat $v1 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in let $v7::list(int) = (cons $v1 $v6) in (concat $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v3 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (concat $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in (cons $v6 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = (cons $v1 $v2) in (cons $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in let $v8::int = (- $v7 $v3) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in (cons $v8 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = (cons $v1 $v2) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v1 $v2) in (cons $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in (cons $v10 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in (cons $v10 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v3 $v8) in let $v11::int = (+ $v1 $v10) in let $v12::int = (- $v1 $v11) in (cons $v12 $inp0)",
    "let $v1::int = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10::int = (- $v6 $v8) in let $v11::int = (- $v1 $v10) in let $v12::int = (+ $v11 $v6) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (+ $v9 $v3) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in (concat $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in (cons $v12 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = (cons $v1 $v2) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in let $v13::list(int) = (cons $v1 $v2) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v7) in let $v12::int = (- $v11 $v7) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v11 $v3) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v5) in let $v12::int = (+ $v5 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in (cons $v14 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v11) in let $v14::int = (+ $v13 $v11) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (concat $v16 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v9 $v12) in let $v14::int = (+ $v13 $v12) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (concat $v16 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v7) in let $v12::int = (- $v11 $v7) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15::list(int) = (cons $v1 $v2) in (cons $v14 $v15)",
    "let $v1::int = Const(int, 0) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[0]) in (concat $v1 $inp0)",
    "let $v1::int = 0 in (cons $v1 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (range $v1) in (concat $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = (- $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 0 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 0 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[1]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in (cons $v1 $inp0)",
    "let $v1::int = 0 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = (repeat $v1 $v1) in (concat $v2 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::list(int) = Const(list(int), Any[]) in let $v3::list(int) = (cons $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 0 in let $v3::list(int) = (range $v2) in let $v4::list(int) = (cons $v1 $v3) in (concat $v4 $inp0)",
    "let $v1::int = Const(int, 2) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[2]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in (cons $v2 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 1) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = Const(int, -1) in let $v3::int = 1 in let $v4::int = (- $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[3]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -2) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 2) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = (+ $v1 $v1) in let $v3::int = (+ $v2 $v1) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -1) in let $v3::int = (- $v2 $v1) in let $v4::int = (- $v1 $v3) in (cons $v4 $inp0)",
    "let $v1::int = Const(int, -3) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[4]) in (concat $v1 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::list(int) = (cons $v2 $v3) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -4) in let $v4::int = (+ $v3 $v1) in let $v5::int = (- $v1 $v4) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 4) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4::int = (- $v1 $v2) in let $v5::int = (+ $v4 $v2) in (cons $v5 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -4) in let $v6::int = (+ $v5 $v3) in let $v7::int = (- $v3 $v6) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -4) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v6 $v3) in (cons $v7 $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 4) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v3 $v6) in (cons $v7 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6::list(int) = (cons $v4 $v5) in let $v7::list(int) = (cons $v2 $v6) in (cons $v1 $v7)",
    "let $v1::int = Const(int, 5) in (cons $v1 $inp0)",
    "let $v1::list(int) = Const(list(int), Any[5]) in (concat $v1 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, -4) in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = 1 in let $v2::int = Const(int, 4) in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 4) in let $v2::int = 1 in let $v3::int = (+ $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 6) in let $v2::int = 1 in let $v3::int = (- $v1 $v2) in (cons $v3 $inp0)",
    "let $v1::int = Const(int, 5) in let $v2::int = 1 in let $v3::list(int) = (repeat $v1 $v2) in (concat $v3 $inp0)",
    "let $v1::int = Const(int, -1) in let $v2::int = 1 in let $v3::int = Const(int, -6) in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, -5) in let $v2::int = Const(int, -2) in let $v3::int = 1 in let $v4::int = (+ $v2 $v3) in let $v5::int = (* $v1 $v4) in (cons $v5 $inp0)",
    "let $v1::int = Const(int, 3) in let $v2::int = 1 in let $v3::int = (+ $v2 $v2) in let $v4::int = (+ $v1 $v3) in (cons $v4 $inp0)",
    "(range $inp0)",
    "let $v1::int = Const(int, 0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (- $v1 $v3) in (range $v4)",
    "let $v1::int = (+ $inp0 $inp0) in let $v2::int = (- $inp0 $v1) in let $v3::int = (+ $v1 $v2) in (range $v3)",
    "let $v1::int = (+ $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (+ $v1 $v3) in (range $v4)",
    "let $v1::int = (- $inp0 $inp0) in let $v2::int = Const(int, 0) in let $v3::int = (- $v2 $inp0) in let $v4::int = (- $v1 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $inp0 $inp0) in let $v4::int = (+ $v2 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $inp0 $v2) in let $v4::int = (- $v3 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (+ $v2 $inp0) in let $v4::int = (- $v3 $v2) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (- $inp0 $v2) in let $v4::int = (+ $v2 $v3) in (range $v4)",
    "let $v1::int = Const(int, 0) in let $v2::int = (- $v1 $inp0) in let $v3::int = (- $inp0 $v2) in let $v4::int = (+ $v3 $v2) in (range $v4)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in (cdr (concat (repeat $v4 $v4) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lam 1))) in +",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam 1))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in (concat $v4 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in (cons $v6 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (concat $v8 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = (cons $v3 $v6) in (cons $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (concat $v6 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in let $v7::list(int) = (cons $v1 $v6) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in (concat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in let $v9::list(int) = (cons $v3 $v6) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v3 $v8) in (cons $v6 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v6 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::list(int) = (cons $v3 $v8) in (cons $v6 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, -2) in let $v8::int = (- $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in let $v10::list(int) = (cons $v1 $v9) in let $v11, $v12 = rev($v4 = (cons $v11 $v12)) in (concat $v10 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 0) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v6) in let $v9::list(int) = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12::list(int) = (concat $v9 $v11) in (cons $v1 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (+ $v7 $v9) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v3 $v12) in let $v14::list(int) = (cons $v13 $v8) in let $v15::list(int) = (cons $v10 $v14) in (cons $v1 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v7 $v11) in let $v13::int = (- $v9 $v12) in let $v14::int = (- $v3 $v13) in let $v15::list(int) = (cons $v14 $v10) in let $v16::list(int) = (cons $v6 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v9 $v11) in let $v13::int = (- $v7 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v3 $v14) in let $v16::list(int) = (cons $v15 $v10) in let $v17::list(int) = (cons $v12 $v16) in (cons $v6 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = (- $v5 $v1) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12::int = (- $v3 $v10) in let $v13::int = (- $v8 $v12) in let $v14::int = (- $v10 $v13) in let $v15::int = (- $v3 $v14) in let $v16::list(int) = (cons $v15 $v11) in let $v17::list(int) = (cons $v7 $v16) in (cons $v6 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v1 $v6) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v1 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v3 $v5) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v1 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = (- $v1 $v3) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v9 $v13) in let $v15::int = (- $v11 $v14) in let $v16::int = (- $v3 $v15) in let $v17::list(int) = (cons $v16 $v12) in let $v18::list(int) = (cons $v8 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::list(int) = (cons $v7 $v10) in let $v12::list(int) = (cons $v5 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v1 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::list(int) = (cons $v9 $v12) in let $v14::list(int) = (cons $v7 $v13) in let $v15::list(int) = (cons $v6 $v14) in (cons $v1 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::list(int) = (cons $v9 $v12) in let $v14::list(int) = (cons $v7 $v13) in let $v15::list(int) = (cons $v3 $v14) in (cons $v6 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14::list(int) = (cons $v10 $v13) in let $v15::list(int) = (cons $v8 $v14) in let $v16::list(int) = (cons $v7 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = (+ $v6 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14::list(int) = (cons $v10 $v13) in let $v15::list(int) = (cons $v8 $v14) in let $v16::list(int) = (cons $v7 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15::list(int) = (cons $v11 $v14) in let $v16::list(int) = (cons $v5 $v15) in let $v17::list(int) = (cons $v10 $v16) in (cons $v1 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (- $v1 $v9) in let $v11::int = (- $v1 $v10) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::list(int) = (cons $v13 $v16) in let $v18::list(int) = (cons $v12 $v17) in let $v19::list(int) = (cons $v3 $v18) in (cons $v1 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::list(int) = (cons $v13 $v16) in let $v18::list(int) = (cons $v7 $v17) in let $v19::list(int) = (cons $v12 $v18) in (cons $v6 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v5 $v9) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v3 $v12) in let $v14, $v15 = rev($v6 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::list(int) = (cons $v14 $v17) in let $v19::list(int) = (cons $v13 $v18) in let $v20::list(int) = (cons $v10 $v19) in (cons $v1 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v3 $v13) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::list(int) = (cons $v15 $v18) in let $v20::list(int) = (cons $v14 $v19) in let $v21::list(int) = (cons $v3 $v20) in (cons $v6 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in (repeat $v3 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (repeat $v3 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (repeat $v6 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v4) in let $v6::int = (+ $v5 $v4) in (repeat $v3 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in (repeat $v6 $v1)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in $v3",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v1 $v6) in let $v8::int = (- $v1 $v7) in (repeat $v8 $v1)",
    "(fn_0 $inp0)",
    "let $v1::list(int) = (fn_0 $inp0) in (concat $inp0 $v1)",
    "let $v1::list(int) = (fn_0 $inp0) in (concat $v1 $inp0)",
    "let $v1::list(int) = (fn_0 $inp0) in (fn_0 $v1)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $inp0 $v2)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v2 $inp0)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $inp0 $v2)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v2 $inp0)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v4 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9::list(int) = (concat $v1 $v8) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = (* $v5 $v4) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9::list(int) = (concat $v1 $v8) in let $v10::list(int) = (concat $v9 $v3) in (concat $inp0 $v10)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lam Const(int, -1)))) in let $v6::int = Const(int, -1) in let $v7::int = (* $v5 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v3) in (concat $inp0 $v11)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::int = Const(int, -1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (* $v2 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::int = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = (- $v2 $v6) in let $v8::int = Const(int, 1) in let $v9::list(int) = (repeat $v7 $v8) in let $v10::list(int) = (concat $v1 $v9) in let $v11::list(int) = (concat $v10 $v4) in (concat $inp0 $v11)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v1 $v2)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in (concat $v2 $v1)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in (concat $v1 $v2)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (fn_0 $v1) in (concat $inp0 $v2)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (fn_0 $inp0) in let $v3::list(int) = (concat $v1 $v2) in (concat $inp0 $v3)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $inp0 $v2) in (concat $v3 $inp0)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $v2 $inp0) in (concat $inp0 $v3)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $inp0 $v1) in let $v3::list(int) = (concat $v2 $inp0) in (concat $v3 $inp0)",
    "let $v1::list(int) = (fn_0 $inp0) in let $v2::list(int) = (concat $v1 $inp0) in let $v3::list(int) = (concat $inp0 $v2) in (concat $inp0 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::list(int) = (range $v3) in (cons $v1 $v4)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (- $v1 $v1) in let $v4::int = Const(int, -1) in let $v5::int = (- $v3 $v4) in (repeat $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, -1) in let $v4::int = (- $v1 $v3) in let $v5::int = (- $v4 $v1) in (repeat $v1 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::list(int) = (range $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6::int = Const(int, -1) in let $v7::int = (- $v5 $v6) in (repeat $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in let $v4::list(int) = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (cons $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v6 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v5 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v10 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v10 $v11) in let $v13::list(int) = (cons $v3 $v12) in (cons $v1 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = (- $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10::int = Const(int, 1) in let $v11::list(int) = (repeat $v8 $v10) in let $v12::list(int) = (cons $v7 $v11) in (cons $v6 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15::int = (- $v11 $v13) in let $v16::int = (+ $v13 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v10 $v18) in let $v20::list(int) = (cons $v5 $v19) in let $v21::list(int) = (cons $v3 $v20) in (cons $v1 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v9) in let $v12::int = (- $v11 $v1) in let $v13::int = (+ $v7 $v12) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (- $v9 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v14 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v1) in let $v10::int = (- $v9 $v1) in let $v11::int = (+ $v7 $v10) in let $v12::int = (+ $v11 $v1) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = (- $v7 $v1) in let $v12::int = (+ $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v10 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v3 $v9) in let $v11::int = (+ $v1 $v10) in let $v12::int = (- $v11 $v3) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v5 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v1 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v1 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17::int = (- $v13 $v15) in let $v18::int = (+ $v15 $v17) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v18 $v19) in let $v21::list(int) = (cons $v12 $v20) in let $v22::list(int) = (cons $v7 $v21) in let $v23::list(int) = (cons $v3 $v22) in (cons $v6 $v23)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v3) in let $v10::int = (- $v9 $v9) in let $v11::int = (- $v10 $v1) in let $v12::int = (+ $v7 $v11) in let $v13::int = (+ $v12 $v1) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::int = (- $v14 $v16) in let $v19::int = (+ $v16 $v18) in let $v20::list(int) = Const(list(int), Any[]) in let $v21::list(int) = (cons $v19 $v20) in let $v22::list(int) = (cons $v13 $v21) in let $v23::list(int) = (cons $v5 $v22) in let $v24::list(int) = (cons $v3 $v23) in (cons $v1 $v24)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (+ $v9 $v7) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v1 $v11) in let $v13::int = (- $v12 $v3) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18::int = (- $v14 $v16) in let $v19::int = (+ $v16 $v18) in let $v20::list(int) = Const(list(int), Any[]) in let $v21::list(int) = (cons $v19 $v20) in let $v22::list(int) = (cons $v13 $v21) in let $v23::list(int) = (cons $v5 $v22) in let $v24::list(int) = (cons $v3 $v23) in (cons $v10 $v24)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = Const(int, 0) in let $v7::int = (- $v6 $v3) in let $v8::int = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (- $v15 $v17) in let $v20::int = (+ $v17 $v19) in let $v21::list(int) = Const(list(int), Any[]) in let $v22::list(int) = (cons $v20 $v21) in let $v23::list(int) = (cons $v14 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v3 $v24) in (cons $v8 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = (+ $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v1 $v4) in let $v7::int = (- $v3 $v6) in let $v8::int = (- $v7 $v4) in let $v9, $v10 = rev($v5 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (- $v15 $v17) in let $v20::int = (+ $v17 $v19) in let $v21::list(int) = Const(list(int), Any[]) in let $v22::list(int) = (cons $v20 $v21) in let $v23::list(int) = (cons $v14 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v4 $v24) in (cons $v8 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in (repeat $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in (cons $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = 1 in (repeat $v3 $v5)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (cons $v3 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v8 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, -1) in let $v8::int = (- $v3 $v7) in let $v9::int = (- $v8 $v3) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v5 $v8) in let $v10::list(int) = (repeat $v5 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v6 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v6 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in (cons $v3 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v10 $v11) in (cons $v3 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, -1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v10 $v3) in let $v12::list(int) = (repeat $v5 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v5 $v10) in (cons $v3 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v5 $v12) in (cons $v8 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in let $v13::list(int) = (cons $v7 $v12) in (cons $v6 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (+ $v9 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v7 $v13) in let $v15::list(int) = (cons $v5 $v14) in (cons $v12 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v3 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v8 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v5 $v14) in (concat $v10 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (concat $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (concat $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lam Const(int, -1)))) in let $v8::int = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in let $v15::list(int) = (cons $v9 $v14) in (cons $v8 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in let $v17::list(int) = (cons $v7 $v16) in let $v18::list(int) = (cons $v5 $v17) in (cons $v3 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v1 $v11) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v1 $v14) in let $v16::int = (- $v1 $v15) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v16 $v17) in let $v19::list(int) = (cons $v9 $v18) in let $v20::list(int) = (cons $v8 $v19) in (cons $v3 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v15 $v6) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (- $v9 $v11) in let $v13::int = (+ $v12 $v7) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::int = (+ $v6 $v15) in let $v18::int = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21::int = Const(int, 1) in let $v22::list(int) = (repeat $v19 $v21) in let $v23::list(int) = (cons $v18 $v22) in let $v24::list(int) = (cons $v9 $v23) in let $v25::list(int) = (cons $v14 $v24) in (cons $v6 $v25)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 0) in let $v10::int = (- $v9 $v1) in let $v11::int = (- $v7 $v10) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (+ $v17 $v6) in let $v20::int = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23::int = Const(int, 1) in let $v24::list(int) = (repeat $v21 $v23) in let $v25::list(int) = (cons $v20 $v24) in let $v26::list(int) = (cons $v15 $v25) in let $v27::list(int) = (cons $v14 $v26) in (cons $v6 $v27)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 0) in let $v10::int = (- $v9 $v1) in let $v11::int = (- $v7 $v10) in let $v12::int = (- $v11 $v1) in let $v13::int = (- $v12 $v1) in let $v14::int = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19::int = (+ $v6 $v17) in let $v20::int = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23::int = Const(int, 1) in let $v24::list(int) = (repeat $v21 $v23) in let $v25::list(int) = (cons $v20 $v24) in let $v26::list(int) = (cons $v15 $v25) in let $v27::list(int) = (cons $v14 $v26) in (cons $v6 $v27)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v5 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v3 $v5) in let $v8::int = (- $v7 $v3) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = Const(int, 1) in (repeat $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v8 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in (cons $v5 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::list(int) = (repeat $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in (cons $v8 $v12)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v3) in let $v8::int = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = Const(int, -1) in let $v12::int = (- $v8 $v11) in let $v13::int = (- $v12 $v5) in let $v14::list(int) = (repeat $v9 $v13) in (cons $v8 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (+ $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v5 $v9) in let $v12::int = (- $v8 $v11) in let $v13::int = (+ $v12 $v1) in let $v14::int = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17::list(int) = Const(list(int), Any[]) in let $v18::list(int) = (cons $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v8 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v1 $v5) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v7 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v8) in let $v15::int = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18::list(int) = Const(list(int), Any[]) in let $v19::list(int) = (cons $v16 $v18) in let $v20::list(int) = (cons $v15 $v19) in (cons $v8 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (+ $v5 $v1) in let $v8::int = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::int = (- $v7 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v8) in let $v15::int = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18::list(int) = Const(list(int), Any[]) in let $v19::list(int) = (cons $v16 $v18) in let $v20::list(int) = (cons $v15 $v19) in (cons $v8 $v20)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8::int = (- $v3 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13::int = (- $v6 $v11) in let $v14::int = (- $v10 $v13) in let $v15::int = (+ $v14 $v1) in let $v16::int = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v10 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = (+ $v1 $v5) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12::int = (- $v9 $v10) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v14 $v8) in let $v16::int = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v8 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v7 $v1) in let $v9::int = (+ $v5 $v1) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12::int = (- $v9 $v10) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v1 $v13) in let $v15::int = (- $v14 $v8) in let $v16::int = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v8 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v3) in let $v6, $v7 = rev($v4 = (cons $v6 $v7)) in let $v8::int = (- $v5 $v6) in let $v9::int = (+ $v1 $v8) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13::int = (- $v6 $v11) in let $v14::int = (- $v10 $v13) in let $v15::int = (+ $v14 $v1) in let $v16::int = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19::list(int) = Const(list(int), Any[]) in let $v20::list(int) = (cons $v17 $v19) in let $v21::list(int) = (cons $v16 $v20) in (cons $v10 $v21)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in (repeat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::list(int) = Const(list(int), Any[]) in (cons $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = 1 in (repeat $v7 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v1) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v3) in let $v10::list(int) = (range $v9) in (cons $v7 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::int = Const(int, 1) in (repeat $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11::list(int) = Const(list(int), Any[]) in (cons $v10 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = 1 in let $v14::list(int) = (repeat $v12 $v13) in (cons $v7 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13::int = (- $v3 $v3) in let $v14::list(int) = (range $v13) in let $v15::list(int) = (cons $v12 $v14) in (cons $v7 $v15)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v3 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v3 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (+ $v11 $v1) in let $v14::int = (- $v13 $v1) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v1) in let $v14::int = (+ $v13 $v1) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v14 $v15) in (cons $v10 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in (cons $v7 $v17)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v7) in let $v12::int = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::int = (- $v3 $v15) in let $v17::int = (- $v3 $v16) in let $v18::list(int) = (repeat $v13 $v17) in let $v19::list(int) = (cons $v12 $v18) in (cons $v7 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v3 $v7) in let $v10::int = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in let $v10::int = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v3 $v7) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v10) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v10 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v5 $v7) in let $v10::int = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v1) in let $v10::int = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::int = (- $v11 $v7) in let $v14::int = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v15 $v17) in let $v19::list(int) = (cons $v14 $v18) in (cons $v10 $v19)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9::int = (+ $v7 $v3) in let $v10::int = (- $v3 $v9) in let $v11, $v12 = rev($v3 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (* $v10 $v11) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16::int = (- $v14 $v7) in let $v17::int = (+ $v7 $v16) in let $v18, $v19 = rev($v15 = (cons $v18 $v19)) in let $v20::int = Const(int, 1) in let $v21::list(int) = (repeat $v18 $v20) in let $v22::list(int) = (cons $v17 $v21) in (cons $v13 $v22)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in (repeat $v9 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v3) in let $v12::int = (+ $v3 $v11) in let $v13::int = Const(int, 1) in (repeat $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 1) in let $v12::int = (+ $v3 $v11) in let $v13::int = (- $v12 $v3) in (repeat $v9 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v1 $v9) in let $v12::int = (- $v1 $v11) in let $v13::list(int) = Const(list(int), Any[]) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v9 $v1) in let $v12::int = (+ $v11 $v1) in let $v13::list(int) = Const(list(int), Any[]) in (cons $v12 $v13)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = Const(int, 2) in let $v12, $v13 = rev($v1 = (rev_fix_param (* $v12 $v13) $v13 (lam Const(int, -1)))) in let $v14::int = (+ $v11 $v13) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lam Const(int, -1)))) in let $v13::int = (- $v3 $v11) in let $v14::int = (- $v13 $v3) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lam Const(int, -1)))) in let $v13::int = (- $v1 $v12) in let $v14::int = (- $v13 $v1) in (repeat $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = Const(int, 1) in let $v14::list(int) = (repeat $v11 $v13) in (cons $v9 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13::int = (- $v7 $v11) in let $v14::int = (- $v7 $v13) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v14 $v15) in (cons $v9 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v7 $v9) in let $v12::int = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = Const(int, 1) in let $v16::list(int) = (repeat $v13 $v15) in (cons $v12 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v1 $v9) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v7 $v9) in let $v12::int = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (+ $v9 $v1) in let $v12::int = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11::int = (- $v3 $v9) in let $v12::int = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15::int = (- $v7 $v13) in let $v16::int = (- $v7 $v15) in let $v17::int = Const(int, 1) in let $v18::list(int) = (repeat $v16 $v17) in (cons $v12 $v18)",
    "(cdr $inp0)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v1 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lam 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v1 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v3 $v2)))",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lam (+ $0 $0)))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lam (- $0 $0)))) in -",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::list(int) = Const(list(int), Any[]) in (cons $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = 1 in (repeat $v1 $v3)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = Const(int, 1) in (repeat $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6::int = (- $v3 $v4) in let $v7::int = (+ $v6 $v4) in (repeat $v1 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7::list(int) = Const(list(int), Any[]) in (cons $v6 $v7)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, 1) in let $v6::list(int) = (repeat $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::list(int) = Const(list(int), Any[]) in let $v6::list(int) = (cons $v3 $v5) in (cons $v1 $v6)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v5 $v7) in (concat $v4 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v3 $v7) in (cons $v6 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = Const(int, -1) in let $v6::int = (- $v1 $v5) in let $v7::int = (- $v6 $v1) in let $v8::list(int) = (repeat $v3 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (+ $v1 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v6 $v7) in (cons $v1 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7::list(int) = Const(list(int), Any[]) in let $v8::list(int) = (cons $v3 $v7) in (cons $v6 $v8)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lam Const(int, -1)))) in let $v7::int = Const(int, 2) in let $v8::int = (+ $v5 $v7) in let $v9::list(int) = (repeat $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3::int = Const(int, 1) in let $v4::list(int) = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7::int = Const(int, -1) in let $v8::int = (- $v1 $v7) in let $v9::int = (- $v8 $v1) in let $v10::list(int) = (repeat $v5 $v9) in (concat $v4 $v10)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = Const(int, 1) in let $v8::list(int) = (repeat $v5 $v7) in let $v9::list(int) = (cons $v3 $v8) in (cons $v1 $v9)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (+ $v7 $v5) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (- $v5 $v7) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v5 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v8 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v3 $v1) in let $v6::int = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = Const(int, 1) in let $v10::list(int) = (repeat $v7 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v6 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v1) in let $v8::int = (+ $v1 $v7) in let $v9::list(int) = Const(list(int), Any[]) in let $v10::list(int) = (cons $v8 $v9) in let $v11::list(int) = (cons $v3 $v10) in (cons $v1 $v11)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v1 $v5) in let $v8::int = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11::list(int) = Const(list(int), Any[]) in let $v12::list(int) = (cons $v9 $v11) in let $v13::list(int) = (cons $v8 $v12) in let $v14::list(int) = (cons $v3 $v13) in (cons $v1 $v14)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v1 $v5) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v8 $v15) in (cons $v1 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v3 $v1) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v1 $v7) in let $v10::int = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13::list(int) = Const(list(int), Any[]) in let $v14::list(int) = (cons $v11 $v13) in let $v15::list(int) = (cons $v10 $v14) in let $v16::list(int) = (cons $v3 $v15) in (cons $v6 $v16)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7::int = (- $v5 $v3) in let $v8::int = (- $v5 $v7) in let $v9::int = (- $v8 $v1) in let $v10::int = (- $v3 $v9) in let $v11::int = (- $v1 $v5) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v8 $v17) in (cons $v10 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (+ $v1 $v3) in let $v6::int = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)",
    "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5::int = (- $v1 $v3) in let $v6::int = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9::int = (- $v7 $v3) in let $v10::int = (- $v7 $v9) in let $v11::int = (- $v1 $v7) in let $v12::int = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15::list(int) = Const(list(int), Any[]) in let $v16::list(int) = (cons $v13 $v15) in let $v17::list(int) = (cons $v12 $v16) in let $v18::list(int) = (cons $v10 $v17) in (cons $v6 $v18)"
  ],
  "rewritten_dreamcoder": null,
  "abstractions": [
    {
      "body": "(concat #0 #0)",
      "dreamcoder": "#(lambda (concat $0 $0))",
      "arity": 1,
      "name": "fn_0",
      "utility": 504,
      "final_cost": 91640,
      "compression_ratio": 1.0066128328240942,
      "cumulative_compression_ratio": 1.0088171104321257,
      "num_uses": 29,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_0 $inp0": "(concat $inp0 $inp0)"
        },
        {
          "fn_0 $v1": "(concat $v1 $v1)"
        }
      ],
      "dc_comparison_millis": null
    },
    {
      "body": "(cdr (cdr #0))",
      "dreamcoder": "#(lambda (cdr (cdr $0)))",
      "arity": 1,
      "name": "fn_1",
      "utility": 101,
      "final_cost": 91337,
      "compression_ratio": 1.0033173850684827,
      "cumulative_compression_ratio": 1.012163745251103,
      "num_uses": 7,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_1 $inp0": "(cdr (cdr $inp0))"
        },
        {
          "fn_1 $v2": "(cdr (cdr $v2))"
        },
        {
          "fn_1 $v4": "(cdr (cdr $v4))"
        },
        {
          "fn_1 $v6": "(cdr (cdr $v6))"
        },
        {
          "fn_1 (cdr $v2)": "(cdr (cdr (cdr $v2)))"
        },
        {
          "fn_1 (cdr $v4)": "(cdr (cdr (cdr $v4)))"
        }
      ],
      "dc_comparison_millis": null
    }
  ]
}
