{
    "DSL": {
        "logVariable": 0.0,
        "logLambda": 0.0,
        "logFreeVar": 0.0,
        "productions": [
            {
                "expression": "repeat",
                "logProbability": 0.0,
                "type": "t0 -> int -> list(t0)",
                "is_reversible": true
            },
            {
                "expression": "concat",
                "logProbability": 0.0,
                "type": "list(t0) -> list(t0) -> list(t0)",
                "is_reversible": true
            },
            {
                "expression": "map",
                "logProbability": 0.0,
                "type": "(t0 -> t1) -> list(t0) -> list(t1)",
                "is_reversible": true
            },
            {
                "expression": "fold",
                "logProbability": 0.0,
                "type": "(t0 -> t1 -> t1) -> list(t0) -> t1 -> t1",
                "is_reversible": true
            },
            {
                "expression": "rev_fix_param",
                "logProbability": 0.0,
                "type": "t0 -> t1 -> (t0 -> t1) -> t0",
                "is_reversible": true
            },
            {
                "expression": "unfold",
                "logProbability": 0.0,
                "type": "(t0 -> bool) -> (t0 -> t1) -> (t0 -> t0) -> t0 -> list(t1)",
                "is_reversible": false
            },
            {
                "expression": "range",
                "logProbability": 0.0,
                "type": "int -> list(int)",
                "is_reversible": true
            },
            {
                "expression": "index",
                "logProbability": 0.0,
                "type": "int -> list(t0) -> t0",
                "is_reversible": false
            },
            {
                "expression": "length",
                "logProbability": 0.0,
                "type": "list(t0) -> int",
                "is_reversible": false
            },
            {
                "expression": "if",
                "logProbability": 0.0,
                "type": "bool -> t0 -> t0 -> t0",
                "is_reversible": false
            },
            {
                "expression": "+",
                "logProbability": 0.0,
                "type": "int -> int -> int",
                "is_reversible": true
            },
            {
                "expression": "-",
                "logProbability": 0.0,
                "type": "int -> int -> int",
                "is_reversible": true
            },
            {
                "expression": "empty",
                "logProbability": 0.0,
                "type": "list(t0)",
                "is_reversible": true
            },
            {
                "expression": "cons",
                "logProbability": 0.0,
                "type": "t0 -> list(t0) -> list(t0)",
                "is_reversible": true
            },
            {
                "expression": "car",
                "logProbability": 0.0,
                "type": "list(t0) -> t0",
                "is_reversible": false
            },
            {
                "expression": "cdr",
                "logProbability": 0.0,
                "type": "list(t0) -> list(t0)",
                "is_reversible": false
            },
            {
                "expression": "empty?",
                "logProbability": 0.0,
                "type": "list(t0) -> bool",
                "is_reversible": false
            },
            {
                "expression": "0",
                "logProbability": 0.0,
                "type": "int",
                "is_reversible": true
            },
            {
                "expression": "1",
                "logProbability": 0.0,
                "type": "int",
                "is_reversible": true
            },
            {
                "expression": "*",
                "logProbability": 0.0,
                "type": "int -> int -> int",
                "is_reversible": true
            },
            {
                "expression": "mod",
                "logProbability": 0.0,
                "type": "int -> int -> int",
                "is_reversible": false
            },
            {
                "expression": "gt?",
                "logProbability": 0.0,
                "type": "int -> int -> bool",
                "is_reversible": false
            },
            {
                "expression": "eq?",
                "logProbability": 0.0,
                "type": "t0 -> t0 -> bool",
                "is_reversible": false
            },
            {
                "expression": "is-prime",
                "logProbability": 0.0,
                "type": "int -> bool",
                "is_reversible": false
            },
            {
                "expression": "is-square",
                "logProbability": 0.0,
                "type": "int -> bool",
                "is_reversible": false
            }
        ]
    },
    "frontiers": [
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "add-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "add-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "add-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "add-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "add-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-index-k with k=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(list(int), Any[]) in let $v4 = (cons $v1 $v3) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = 1 in let $v4 = (repeat $v1 $v3) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = 0 in let $v4 = (range $v3) in let $v5 = (cons $v1 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in let $v5 = (concat $v2 $v4) in (cons $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(list(int), Any[]) in let $v4 = (cons $v1 $v3) in let $v5 = (concat $v2 $v4) in (cons $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = 0 in let $v4 = Const(int, -1) in let $v5 = (- $v3 $v4) in let $v6 = (repeat $v1 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (- $v1 $v1) in let $v4 = (range $v3) in let $v5 = (cons $v1 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (- $v1 $v1) in let $v4 = Const(int, -1) in let $v5 = (- $v3 $v4) in let $v6 = (repeat $v1 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (- $v1 $v3) in let $v5 = (- $v1 $v4) in let $v6 = (repeat $v1 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-index-k with k=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 1) in let $v6 = (repeat $v3 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(list(int), Any[]) in let $v6 = (cons $v3 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = 1 in let $v6 = (repeat $v3 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v1) in let $v6 = (range $v5) in let $v7 = (cons $v3 $v6) in (concat $inp0 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v3) in let $v6 = (range $v5) in let $v7 = (cons $v3 $v6) in (concat $inp0 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in (concat $inp0 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in (concat $inp0 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7 = 1 in let $v8 = (repeat $v6 $v7) in (concat $inp0 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v3) in let $v6 = (- $v3 $v1) in let $v7 = (- $v5 $v6) in let $v8 = (- $v1 $v7) in let $v9 = Const(int, 1) in let $v10 = (repeat $v8 $v9) in (concat $inp0 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (- $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6 = (- $v4 $v1) in let $v7 = (- $v3 $v6) in let $v8 = (- $v1 $v7) in let $v9 = Const(int, 1) in let $v10 = (repeat $v8 $v9) in (concat $inp0 $v10)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-index-k with k=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in (concat $inp0 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v5 $v7) in (concat $inp0 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = 1 in let $v8 = (repeat $v5 $v7) in (concat $inp0 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in let $v9 = (concat $v2 $v8) in (cons $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v5 $v7) in let $v9 = (concat $v2 $v8) in (cons $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v3 $v5) in let $v8 = (- $v3 $v7) in let $v9 = Const(int, 1) in let $v10 = (repeat $v8 $v9) in (concat $inp0 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (- $v7 $v3) in let $v9 = (+ $v3 $v8) in let $v10 = (repeat $v5 $v9) in (concat $inp0 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (- $v7 $v3) in let $v9 = (+ $v8 $v3) in let $v10 = (repeat $v5 $v9) in (concat $inp0 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in let $v9 = (concat $v4 $v8) in let $v10 = (cons $v3 $v9) in (cons $v1 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v5 $v7) in let $v9 = (concat $v4 $v8) in let $v10 = (cons $v3 $v9) in (cons $v1 $v10)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-index-k with k=4",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v1 $v7) in let $v10 = (- $v9 $v1) in let $v11 = Const(int, 1) in let $v12 = (repeat $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v7 $v1) in let $v10 = (- $v9 $v1) in let $v11 = Const(int, 1) in let $v12 = (repeat $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v1 $v9) in let $v11 = Const(int, 1) in let $v12 = (repeat $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (+ $v9 $v3) in let $v11 = Const(int, 1) in let $v12 = (repeat $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v1 $v7) in let $v10 = (- $v9 $v1) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v7 $v1) in let $v10 = (- $v9 $v1) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v1 $v9) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (+ $v9 $v3) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v1 $v7) in let $v10 = (- $v9 $v1) in let $v11 = 1 in let $v12 = (repeat $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v7 $v1) in let $v10 = (- $v9 $v1) in let $v11 = 1 in let $v12 = (repeat $v10 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-index-k with k=5",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v9 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = 1 in let $v12 = (repeat $v9 $v11) in (concat $inp0 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13 = Const(int, 1) in let $v14 = (repeat $v12 $v13) in (concat $inp0 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v7) in let $v12 = (+ $v11 $v7) in let $v13 = Const(int, 1) in let $v14 = (repeat $v12 $v13) in (concat $inp0 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (- $v5 $v11) in let $v13 = (- $v5 $v12) in let $v14 = (repeat $v9 $v13) in (concat $inp0 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13 = 1 in let $v14 = (repeat $v12 $v13) in (concat $inp0 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v7) in let $v12 = (+ $v11 $v7) in let $v13 = 1 in let $v14 = (repeat $v12 $v13) in (concat $inp0 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13 = Const(int, 1) in let $v14 = (- $v5 $v13) in let $v15 = (- $v5 $v14) in let $v16 = (repeat $v12 $v15) in (concat $inp0 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v7) in let $v12 = (+ $v11 $v7) in let $v13 = Const(int, 1) in let $v14 = (- $v5 $v13) in let $v15 = (- $v5 $v14) in let $v16 = (repeat $v12 $v15) in (concat $inp0 $v16)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-k with k=0",
            "programs": [
                {
                    "program": "let $v1 = Const(list(int), Any[0]) in (concat $inp0 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (range $v1) in (concat $inp0 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, 1) in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(list(int), Any[]) in let $v3 = (cons $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = (range $v1) in let $v3 = (cons $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = 0 in let $v3 = (range $v2) in let $v4 = (cons $v1 $v3) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (- $v1 $v1) in let $v3 = (repeat $v2 $v1) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 1) in let $v3 = (- $v1 $v2) in let $v4 = Const(int, 1) in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-k with k=1",
            "programs": [
                {
                    "program": "let $v1 = Const(list(int), Any[1]) in (concat $inp0 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 1) in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (repeat $v1 $v1) in (concat $inp0 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(list(int), Any[]) in let $v3 = (cons $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (+ $v1 $v2) in let $v4 = (range $v3) in let $v5 = (cons $v1 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 1) in let $v2 = 1 in let $v3 = (- $v2 $v1) in let $v4 = (range $v3) in let $v5 = (cons $v1 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 1) in let $v2 = 1 in let $v3 = Const(int, -1) in let $v4 = (+ $v2 $v3) in let $v5 = (range $v4) in let $v6 = (cons $v1 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 1) in let $v2 = 1 in let $v3 = (+ $v1 $v2) in let $v4 = Const(int, -1) in let $v5 = (+ $v3 $v4) in let $v6 = (repeat $v5 $v1) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = Const(int, 1) in let $v3 = 1 in let $v4 = (+ $v2 $v3) in let $v5 = (- $v1 $v4) in let $v6 = (repeat $v5 $v2) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-k with k=2",
            "programs": [
                {
                    "program": "let $v1 = Const(list(int), Any[2]) in (concat $inp0 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 2) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 2) in let $v2 = 0 in let $v3 = (range $v2) in let $v4 = (cons $v1 $v3) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, -2) in let $v3 = (- $v1 $v2) in let $v4 = Const(int, 1) in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (- $v1 $v2) in let $v4 = Const(int, 1) in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = Const(int, 1) in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = (repeat $v3 $v2) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, -2) in let $v3 = (- $v1 $v2) in let $v4 = 1 in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (- $v1 $v2) in let $v4 = 1 in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = 1 in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-k with k=3",
            "programs": [
                {
                    "program": "let $v1 = Const(list(int), Any[3]) in (concat $inp0 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 0 in let $v3 = (range $v2) in let $v4 = (cons $v1 $v3) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, -3) in let $v3 = (- $v1 $v2) in let $v4 = Const(int, 1) in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -2) in let $v3 = (- $v1 $v2) in let $v4 = Const(int, 1) in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -2) in let $v3 = (- $v1 $v2) in let $v4 = (repeat $v3 $v1) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 0 in let $v3 = Const(int, -1) in let $v4 = (- $v2 $v3) in let $v5 = (repeat $v1 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, -3) in let $v3 = (- $v1 $v2) in let $v4 = (range $v1) in let $v5 = (cons $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (- $v2 $v1) in let $v4 = (- $v1 $v3) in let $v5 = Const(int, 1) in let $v6 = (repeat $v4 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (- $v2 $v1) in let $v4 = (- $v1 $v3) in let $v5 = (repeat $v4 $v1) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 3) in let $v3 = (- $v1 $v2) in let $v4 = (- $v1 $v3) in let $v5 = Const(int, 1) in let $v6 = (repeat $v4 $v5) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-k with k=4",
            "programs": [
                {
                    "program": "let $v1 = Const(list(int), Any[4]) in (concat $inp0 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2 = 0 in let $v3 = (range $v2) in let $v4 = (cons $v1 $v3) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -3) in let $v3 = (- $v1 $v2) in let $v4 = (repeat $v3 $v1) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2 = 0 in let $v3 = Const(int, -1) in let $v4 = (- $v2 $v3) in let $v5 = (repeat $v1 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 5) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = (repeat $v3 $v2) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -3) in let $v3 = (- $v1 $v2) in let $v4 = Const(list(int), Any[]) in let $v5 = (cons $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 5) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = Const(list(int), Any[]) in let $v5 = (cons $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, -1) in let $v3 = (- $v1 $v2) in let $v4 = Const(int, -3) in let $v5 = (- $v3 $v4) in let $v6 = (repeat $v5 $v3) in (concat $inp0 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (- $v1 $v1) in let $v3 = Const(int, -4) in let $v4 = (- $v2 $v3) in let $v5 = (repeat $v4 $v1) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "append-k with k=5",
            "programs": [
                {
                    "program": "let $v1 = Const(list(int), Any[5]) in (concat $inp0 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 5) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 4) in let $v3 = (+ $v1 $v2) in let $v4 = (repeat $v3 $v1) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2 = 1 in let $v3 = (+ $v1 $v2) in let $v4 = (repeat $v3 $v2) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 6) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = (repeat $v3 $v2) in (concat $inp0 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 6) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = 1 in let $v5 = (repeat $v3 $v4) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -5) in let $v3 = (- $v1 $v2) in let $v4 = (- $v3 $v1) in let $v5 = (repeat $v4 $v1) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 1 in let $v3 = (+ $v2 $v2) in let $v4 = (+ $v1 $v3) in let $v5 = (repeat $v4 $v2) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 7) in let $v2 = 1 in let $v3 = (+ $v2 $v2) in let $v4 = (- $v1 $v3) in let $v5 = (repeat $v4 $v2) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 7) in let $v2 = 1 in let $v3 = (- $v1 $v2) in let $v4 = (- $v3 $v2) in let $v5 = (repeat $v4 $v2) in (concat $inp0 $v5)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-geq-k with k=0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-geq-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-geq-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-geq-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-geq-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-geq-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-is-mod-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-is-mod-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-is-mod-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-is-mod-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-is-mod-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-is-prime",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-k with k=0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "bool",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "bool-identify-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=1 and n=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=1 and n=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=1 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=1 and n=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=2 and n=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=2 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=2 and n=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=3 and n=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=3 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=3 and n=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=4 and n=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=4 and n=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=5 and n=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=5 and n=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "caesar-cipher-k-modulo-n with k=5 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "count-head-in-tail",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "count-k with k=0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "count-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "count-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "count-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "count-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "count-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "drop-k with k=1",
            "programs": [
                {
                    "program": "(cdr $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lambda 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "drop-k with k=2",
            "programs": [
                {
                    "program": "(cdr (cdr $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v4",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lambda 1))) in (cdr (concat (repeat $v1 $v6) $v4))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v6 (lambda 1))) in (cdr (concat (repeat $v3 $v6) $v4))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lambda 1))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v5 = (rev_fix_param (- $v7 $v8) $v8 (lambda 1))) in (cdr (concat (repeat $v3 $v8) $v6))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (- $v5 $v6) $v5 (lambda 1))) in let $v7, $v8 = rev($v3 = (rev_fix_param (- $v7 $v8) $v8 (lambda 1))) in (cdr (concat (repeat $v6 $v8) $v4))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "drop-k with k=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v6",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v3 $v7) in let $v10 = (- $v3 $v9) in (cons $v10 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v5 $v7) in let $v10 = (- $v5 $v9) in (cons $v10 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v9 $v1) in (cons $v10 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v5) in let $v10 = (+ $v5 $v9) in (cons $v10 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v3 (lambda Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v4 $v9) in let $v12 = (- $v4 $v11) in (cons $v12 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lambda Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in (cons $v12 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (+ $v9 $v3) in let $v11 = (- $v3 $v10) in let $v12 = (+ $v1 $v11) in (cons $v12 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v1 $v9) in let $v11 = (- $v10 $v1) in let $v12 = (+ $v1 $v11) in (cons $v12 $v8)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "drop-k with k=4",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cdr (cdr (cdr $v2)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr (cdr $v4))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cdr $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v8",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "drop-k with k=5",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cdr (cdr (cdr $v4)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cdr (cdr $v6))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cdr $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in $v10",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "dup",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "empty",
            "programs": [
                {
                    "program": "(empty? $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(eq? empty $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(eq? $inp0 empty)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(gt? 1 (length $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(empty? (range (length $inp0)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(empty? (concat $inp0 $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(empty? (concat $inp0 empty))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(empty? (concat empty $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(eq? (concat $inp0 $inp0) $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(eq? $inp0 (concat $inp0 $inp0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "evens",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "int",
                        "arguments": []
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "fibonacci",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "has-head-in-tail",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "has-k with k=0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "has-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "has-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "has-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "has-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "has-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "head",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5 = (- $v2 $v3) in (- $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = 1 in let $v4 = (+ $v1 $v3) in (- $v4 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (+ $v1 $v3) in let $v5 = 1 in (- $v4 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5 = (- $v2 $v3) in (- $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4 = (- $v1 $v2) in (- $v1 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5 = (- $v2 $v3) in (- $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 1) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4 = (+ $v1 $v2) in let $v5 = 1 in (- $v4 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = 1 in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5 = (- $v2 $v3) in (- $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (+ $v1 $v1) in let $v4 = (- $v1 $v3) in (+ $v3 $v4)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "index-head",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "index-k with k=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v1",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4 = Const(int, -1) in let $v5 = (+ $v2 $v4) in (+ $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in (- $v5 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in (- $v5 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in (+ $v3 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in (+ $v5 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in (- $v3 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v1 $v5) in (+ $v6 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 0) in let $v6 = (- $v3 $v1) in let $v7 = (- $v5 $v6) in (+ $v3 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (- $v4 $v2) in let $v7 = (- $v1 $v6) in (+ $v7 $v4)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "index-k with k=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in $v3",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in (- $v5 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in (- $v5 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in (- $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in (+ $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in (+ $v5 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v5 $v3) in (- $v5 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = Const(int, 0) in let $v7 = (- $v6 $v1) in (- $v5 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 0) in let $v6 = (- $v5 $v1) in let $v7 = (+ $v3 $v6) in (+ $v1 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6 = (- $v1 $v4) in let $v7 = (- $v3 $v6) in (+ $v1 $v7)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "index-k with k=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in $v5",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in (- $v7 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v3 $v5) in (- $v7 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in (- $v7 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v3) in (- $v7 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in (- $v1 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v3 $v5) in (- $v3 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in (+ $v1 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in (+ $v7 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = Const(int, 0) in let $v9 = (- $v8 $v1) in (+ $v7 $v9)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "index-k with k=4",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in $v7",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v1 $v7) in (- $v9 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v3 $v7) in (- $v9 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v7 $v1) in (- $v9 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v7 $v3) in (- $v9 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in (+ $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in let $v8, $v9 = rev($v6 = (cons $v8 $v9)) in let $v10 = (- $v7 $v8) in (- $v7 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10 = (- $v1 $v8) in let $v11 = (- $v3 $v10) in (+ $v1 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10 = (- $v3 $v8) in let $v11 = (+ $v1 $v10) in (- $v1 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (* $v3 $v4) $v4 (lambda Const(int, -1)))) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v3 $v9) in (+ $v1 $v11)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "index-k with k=5",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v1 $v9) in (- $v11 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v5 $v9) in (- $v11 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v9 $v3) in (- $v11 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v9 $v5) in (- $v11 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v1 $v9) in (- $v1 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in (- $v3 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v5 $v9) in (- $v5 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v3) in (+ $v11 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v3) in (+ $v3 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v5) in (+ $v11 $v5)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-evens",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-mod-k with k=1",
            "programs": [
                {
                    "program": "Const(bool, true)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(is-square 0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(is-square 1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "(gt? 1 0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (is-square (- $v1 $v1))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (empty? (repeat $v1 (- $v1 $v1)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lambda 1))) in (is-square $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda 0))) in (is-square $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda 1))) in (is-square $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lambda 1))) in (gt? $v4 0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-mod-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-mod-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-mod-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-mod-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-odds",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-primes",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "bool",
                    "arguments": []
                }
            },
            "task": "is-squares",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep-mod-head",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep-mod-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep-mod-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep-mod-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep-mod-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-largest with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-largest with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-largest with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-largest with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-largest with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-smallest with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-smallest with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-smallest with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-smallest with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "kth-smallest with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "last",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "len",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "max",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "min",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "modulo-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "modulo-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "modulo-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "modulo-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "modulo-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "mult-k with k=0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "mult-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "mult-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "mult-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "mult-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "odds",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "pop",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "pow-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "pow-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "pow-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "pow-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-index-k with k=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in (concat $v4 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 2) in let $v4 = (repeat $v1 $v3) in (concat $v4 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (cons $v1 $v2) in (cons $v1 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(list(int), Any[]) in let $v4 = (cons $v1 $v3) in (concat $v4 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v5 $v3) in (cons $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in (cons $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (cons $v3 $v4) in let $v6 = (cons $v1 $v5) in (cons $v1 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (+ $v1 $v3) in let $v5 = (- $v4 $v1) in let $v6 = (repeat $v1 $v5) in (concat $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v3) in let $v6 = (range $v5) in let $v7 = (cons $v1 $v6) in (concat $v7 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-index-k with k=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 1) in let $v6 = (repeat $v3 $v5) in (concat $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(list(int), Any[]) in let $v6 = (cons $v3 $v5) in (concat $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v1) in (cons $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v1) in (cons $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in (cons $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in (cons $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in (cons $v6 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v3 $v5) in let $v7 = (+ $v6 $v5) in (cons $v7 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7 = (+ $v6 $v5) in (cons $v7 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-index-k with k=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (cons $v1 $v2) in (cons $v5 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v5 $v7) in (concat $v8 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in (cons $v8 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v3 $v5) in let $v8 = (- $v7 $v3) in (cons $v8 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in (cons $v8 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v3) in let $v8 = (- $v7 $v3) in (cons $v8 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (- $v1 $v7) in (cons $v8 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in let $v8 = (+ $v3 $v7) in (cons $v8 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9 = (cons $v1 $v2) in (cons $v8 $v9)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-index-k with k=4",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in (cons $v7 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (cons $v1 $v2) in (cons $v7 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in (cons $v10 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (+ $v9 $v3) in (cons $v10 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10 = (- $v3 $v8) in let $v11 = (+ $v1 $v10) in let $v12 = (- $v1 $v11) in (cons $v12 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8, $v9 = rev($v7 = (cons $v8 $v9)) in let $v10 = (- $v6 $v8) in let $v11 = (- $v1 $v10) in let $v12 = (+ $v11 $v6) in (cons $v12 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11 = Const(int, 1) in let $v12 = (repeat $v10 $v11) in (concat $v12 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (+ $v9 $v3) in let $v11 = Const(int, 1) in let $v12 = (repeat $v10 $v11) in (concat $v12 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v10 $v11) in (concat $v12 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (+ $v9 $v3) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v10 $v11) in (concat $v12 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-index-k with k=5",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (+ $v11 $v1) in (cons $v12 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v3) in let $v12 = (+ $v11 $v3) in (cons $v12 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (+ $v11 $v1) in let $v13 = (cons $v1 $v2) in (cons $v12 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v3) in let $v12 = (+ $v11 $v3) in let $v13 = (cons $v1 $v2) in (cons $v12 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v9 $v7) in let $v12 = (- $v11 $v7) in let $v13 = (- $v12 $v1) in let $v14 = (+ $v13 $v1) in (cons $v14 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v3) in let $v12 = (+ $v11 $v3) in let $v13 = (+ $v12 $v1) in let $v14 = (- $v13 $v1) in (cons $v14 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v5) in let $v12 = (+ $v5 $v11) in let $v13 = (+ $v12 $v1) in let $v14 = (- $v13 $v1) in (cons $v14 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lambda Const(int, -1)))) in let $v13 = (- $v9 $v11) in let $v14 = (+ $v13 $v11) in let $v15 = Const(int, 1) in let $v16 = (repeat $v14 $v15) in (concat $v16 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lambda Const(int, -1)))) in let $v13 = (- $v9 $v12) in let $v14 = (+ $v13 $v12) in let $v15 = Const(int, 1) in let $v16 = (repeat $v14 $v15) in (concat $v16 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v9 $v7) in let $v12 = (- $v11 $v7) in let $v13 = (- $v12 $v1) in let $v14 = (+ $v13 $v1) in let $v15 = (cons $v1 $v2) in (cons $v14 $v15)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-k with k=0",
            "programs": [
                {
                    "program": "let $v1 = Const(int, 0) in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(list(int), Any[0]) in (concat $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (range $v1) in (concat $v2 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (- $v1 $v1) in (cons $v2 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 1) in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, -1) in let $v2 = 1 in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, 1) in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-k with k=1",
            "programs": [
                {
                    "program": "let $v1 = Const(int, 1) in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(list(int), Any[1]) in (concat $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 0 in let $v2 = Const(int, -1) in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 1) in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (repeat $v1 $v1) in (concat $v2 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 1) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(list(int), Any[]) in let $v3 = (cons $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 1) in let $v2 = 0 in let $v3 = (range $v2) in let $v4 = (cons $v1 $v3) in (concat $v4 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-k with k=2",
            "programs": [
                {
                    "program": "let $v1 = Const(int, 2) in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(list(int), Any[2]) in (concat $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (+ $v1 $v1) in (cons $v2 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 1) in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 1) in let $v2 = 1 in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 1 in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 2) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = 1 in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, -1) in let $v2 = Const(int, -1) in let $v3 = 1 in let $v4 = (- $v2 $v3) in let $v5 = (* $v1 $v4) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-k with k=3",
            "programs": [
                {
                    "program": "let $v1 = Const(int, 3) in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(list(int), Any[3]) in (concat $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -2) in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 2) in let $v2 = 1 in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2 = 1 in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (+ $v1 $v1) in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = (+ $v1 $v1) in let $v3 = (+ $v2 $v1) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -1) in let $v3 = (- $v2 $v1) in let $v4 = (- $v1 $v3) in (cons $v4 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, -3) in let $v2 = Const(int, -2) in let $v3 = 1 in let $v4 = (+ $v2 $v3) in let $v5 = (* $v1 $v4) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-k with k=4",
            "programs": [
                {
                    "program": "let $v1 = Const(int, 4) in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(list(int), Any[4]) in (concat $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4 = (cons $v2 $v3) in (cons $v1 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, -4) in let $v4 = (+ $v3 $v1) in let $v5 = (- $v1 $v4) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 4) in let $v4 = (- $v1 $v3) in let $v5 = (- $v1 $v4) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4 = (- $v1 $v2) in let $v5 = (+ $v4 $v2) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, -4) in let $v6 = (+ $v5 $v3) in let $v7 = (- $v3 $v6) in (cons $v7 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, -4) in let $v6 = (- $v3 $v5) in let $v7 = (- $v6 $v3) in (cons $v7 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 4) in let $v6 = (- $v3 $v5) in let $v7 = (- $v3 $v6) in (cons $v7 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v3 = (cons $v4 $v5)) in let $v6 = (cons $v4 $v5) in let $v7 = (cons $v2 $v6) in (cons $v1 $v7)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "prepend-k with k=5",
            "programs": [
                {
                    "program": "let $v1 = Const(int, 5) in (cons $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(list(int), Any[5]) in (concat $v1 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, -4) in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = 1 in let $v2 = Const(int, 4) in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 4) in let $v2 = 1 in let $v3 = (+ $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 6) in let $v2 = 1 in let $v3 = (- $v1 $v2) in (cons $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 5) in let $v2 = 1 in let $v3 = (repeat $v1 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, -1) in let $v2 = 1 in let $v3 = Const(int, -6) in let $v4 = (+ $v2 $v3) in let $v5 = (* $v1 $v4) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, -5) in let $v2 = Const(int, -2) in let $v3 = 1 in let $v4 = (+ $v2 $v3) in let $v5 = (* $v1 $v4) in (cons $v5 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 3) in let $v2 = 1 in let $v3 = (+ $v2 $v2) in let $v4 = (+ $v1 $v3) in (cons $v4 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "product",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "int",
                        "arguments": []
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "range",
            "programs": [
                {
                    "program": "(range $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = Const(int, 0) in let $v3 = (- $v2 $inp0) in let $v4 = (- $v1 $v3) in (range $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (+ $inp0 $inp0) in let $v2 = (- $inp0 $v1) in let $v3 = (+ $v1 $v2) in (range $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (+ $inp0 $inp0) in let $v2 = Const(int, 0) in let $v3 = (- $v2 $inp0) in let $v4 = (+ $v1 $v3) in (range $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (- $inp0 $inp0) in let $v2 = Const(int, 0) in let $v3 = (- $v2 $inp0) in let $v4 = (- $v1 $v3) in (range $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = (- $v1 $inp0) in let $v3 = (+ $inp0 $inp0) in let $v4 = (+ $v2 $v3) in (range $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = (- $v1 $inp0) in let $v3 = (+ $inp0 $v2) in let $v4 = (- $v3 $v2) in (range $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = (- $v1 $inp0) in let $v3 = (+ $v2 $inp0) in let $v4 = (- $v3 $v2) in (range $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = (- $v1 $inp0) in let $v3 = (- $inp0 $v2) in let $v4 = (+ $v2 $v3) in (range $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = Const(int, 0) in let $v2 = (- $v1 $inp0) in let $v3 = (- $inp0 $v2) in let $v4 = (+ $v3 $v2) in (range $v4)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-index-k with k=1",
            "programs": [
                {
                    "program": "(cdr $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lambda 1))) in (cdr (concat (repeat $v4 $v4) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v1 $v3) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v4 $v3) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v4 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v4 $v5) $inp0))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lambda 1))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v5) $inp0))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-index-k with k=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (cons $v1 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in (concat $v4 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in (cons $v6 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v3) in (cons $v6 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in (cons $v6 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v5 $v3) in (cons $v6 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in (cons $v6 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in (concat $v8 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v3) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in (concat $v8 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in (concat $v8 $v4)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-index-k with k=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (cons $v3 $v6) in (cons $v1 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 1) in let $v6 = (repeat $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (concat $v6 $v8) in (cons $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 1) in let $v6 = (repeat $v3 $v5) in let $v7 = (cons $v1 $v6) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in (concat $v7 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (+ $v7 $v5) in let $v9 = (cons $v3 $v6) in (cons $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (cons $v3 $v8) in (cons $v6 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (cons $v6 $v8) in (cons $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (cons $v3 $v8) in (cons $v6 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lambda Const(int, -1)))) in let $v7 = Const(int, -2) in let $v8 = (- $v5 $v7) in let $v9 = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12 = (concat $v9 $v11) in (cons $v1 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lambda Const(int, -1)))) in let $v7 = Const(int, -2) in let $v8 = (- $v5 $v7) in let $v9 = (repeat $v3 $v8) in let $v10 = (cons $v1 $v9) in let $v11, $v12 = rev($v4 = (cons $v11 $v12)) in (concat $v10 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 0) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lambda Const(int, -1)))) in let $v8 = (- $v5 $v6) in let $v9 = (repeat $v3 $v8) in let $v10, $v11 = rev($v4 = (cons $v10 $v11)) in let $v12 = (concat $v9 $v11) in (cons $v1 $v12)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-index-k with k=4",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v3 $v7) in let $v10 = (+ $v7 $v9) in let $v11 = (- $v5 $v9) in let $v12 = (- $v7 $v11) in let $v13 = (- $v3 $v12) in let $v14 = (cons $v13 $v8) in let $v15 = (cons $v10 $v14) in (cons $v1 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v7 $v11) in let $v13 = (- $v9 $v12) in let $v14 = (- $v3 $v13) in let $v15 = (cons $v14 $v10) in let $v16 = (cons $v6 $v15) in (cons $v1 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v7 $v11) in let $v13 = (- $v9 $v12) in let $v14 = (- $v3 $v13) in let $v15 = (cons $v14 $v10) in let $v16 = (cons $v6 $v15) in (cons $v1 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v7 $v11) in let $v13 = (- $v9 $v12) in let $v14 = (- $v3 $v13) in let $v15 = (cons $v14 $v10) in let $v16 = (cons $v6 $v15) in (cons $v1 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v7 $v11) in let $v13 = (- $v9 $v12) in let $v14 = (- $v3 $v13) in let $v15 = (cons $v14 $v10) in let $v16 = (cons $v6 $v15) in (cons $v1 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (+ $v9 $v11) in let $v13 = (- $v7 $v11) in let $v14 = (- $v9 $v13) in let $v15 = (- $v3 $v14) in let $v16 = (cons $v15 $v10) in let $v17 = (cons $v12 $v16) in (cons $v6 $v17)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7 = (- $v5 $v1) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12 = (- $v3 $v10) in let $v13 = (- $v8 $v12) in let $v14 = (- $v10 $v13) in let $v15 = (- $v3 $v14) in let $v16 = (cons $v15 $v11) in let $v17 = (cons $v7 $v16) in (cons $v6 $v17)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7 = (- $v1 $v6) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v3 $v11) in let $v14 = (- $v9 $v13) in let $v15 = (- $v11 $v14) in let $v16 = (- $v3 $v15) in let $v17 = (cons $v16 $v12) in let $v18 = (cons $v8 $v17) in (cons $v1 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v3 $v5) in let $v7 = (- $v3 $v6) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v3 $v11) in let $v14 = (- $v9 $v13) in let $v15 = (- $v11 $v14) in let $v16 = (- $v3 $v15) in let $v17 = (cons $v16 $v12) in let $v18 = (cons $v8 $v17) in (cons $v1 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7 = (- $v1 $v3) in let $v8 = (- $v1 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v3 $v11) in let $v14 = (- $v9 $v13) in let $v15 = (- $v11 $v14) in let $v16 = (- $v3 $v15) in let $v17 = (cons $v16 $v12) in let $v18 = (cons $v8 $v17) in (cons $v6 $v18)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-index-k with k=5",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (cons $v7 $v10) in let $v12 = (cons $v5 $v11) in let $v13 = (cons $v3 $v12) in (cons $v1 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (cons $v9 $v12) in let $v14 = (cons $v7 $v13) in let $v15 = (cons $v6 $v14) in (cons $v1 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (cons $v9 $v12) in let $v14 = (cons $v7 $v13) in let $v15 = (cons $v3 $v14) in (cons $v6 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7 = (+ $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14 = (cons $v10 $v13) in let $v15 = (cons $v8 $v14) in let $v16 = (cons $v7 $v15) in (cons $v6 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7 = (+ $v6 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10, $v11 = rev($v9 = (cons $v10 $v11)) in let $v12, $v13 = rev($v11 = (cons $v12 $v13)) in let $v14 = (cons $v10 $v13) in let $v15 = (cons $v8 $v14) in let $v16 = (cons $v7 $v15) in (cons $v6 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (- $v3 $v7) in let $v9 = (- $v8 $v1) in let $v10 = (+ $v5 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15 = (cons $v11 $v14) in let $v16 = (cons $v5 $v15) in let $v17 = (cons $v10 $v16) in (cons $v1 $v17)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (- $v3 $v7) in let $v9 = (- $v8 $v1) in let $v10 = (- $v1 $v9) in let $v11 = (- $v1 $v10) in let $v12 = (- $v3 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17 = (cons $v13 $v16) in let $v18 = (cons $v12 $v17) in let $v19 = (cons $v3 $v18) in (cons $v1 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (- $v3 $v9) in let $v11 = (- $v10 $v1) in let $v12 = (+ $v7 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17 = (cons $v13 $v16) in let $v18 = (cons $v7 $v17) in let $v19 = (cons $v12 $v18) in (cons $v6 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (- $v3 $v7) in let $v9 = (- $v8 $v1) in let $v10 = (+ $v5 $v9) in let $v11 = (- $v1 $v9) in let $v12 = (- $v1 $v11) in let $v13 = (- $v3 $v12) in let $v14, $v15 = rev($v6 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18 = (cons $v14 $v17) in let $v19 = (cons $v13 $v18) in let $v20 = (cons $v10 $v19) in (cons $v1 $v20)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (- $v3 $v9) in let $v11 = (- $v10 $v1) in let $v12 = (- $v1 $v11) in let $v13 = (- $v1 $v12) in let $v14 = (- $v3 $v13) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19 = (cons $v15 $v18) in let $v20 = (cons $v14 $v19) in let $v21 = (cons $v3 $v20) in (cons $v6 $v21)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-mod-head",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-mod-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-mod-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-mod-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove-mod-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "repeat",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in (repeat $v3 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in (repeat $v3 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in (repeat $v6 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5 = (- $v1 $v4) in let $v6 = (+ $v5 $v4) in (repeat $v3 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in (repeat $v6 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v2 = (repeat $v5 $v6)) in let $v7 = (+ $v3 $v6) in let $v8 = (- $v7 $v6) in (repeat $v8 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v2 = (repeat $v5 $v6)) in let $v7 = (- $v1 $v6) in let $v8 = (+ $v7 $v6) in (repeat $v3 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, -1) in let $v6 = (- $v3 $v5) in let $v7, $v8 = rev($v2 = (repeat $v7 $v8)) in let $v9 = (- $v6 $v8) in (repeat $v9 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = (+ $v4 $v5) in let $v8 = (- $v7 $v4) in (repeat $v8 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (repeat $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7 = (- $v1 $v6) in let $v8 = (- $v1 $v7) in (repeat $v8 $v1)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "repeat-k with k=2",
            "programs": [
                {
                    "program": "(concat $inp0 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "repeat-k with k=3",
            "programs": [
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in (concat $inp0 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in (concat $v1 $inp0)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "repeat-k with k=4",
            "programs": [
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in (concat $v1 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in (concat $inp0 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in (concat $v2 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $v1 $inp0) in (concat $inp0 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $v1 $inp0) in (concat $v2 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lambda Const(int, -1)))) in let $v6 = (* $v4 $v5) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in let $v9 = (concat $v1 $v8) in let $v10 = (concat $v9 $v3) in (concat $inp0 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lambda Const(int, -1)))) in let $v6 = (* $v5 $v4) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in let $v9 = (concat $v1 $v8) in let $v10 = (concat $v9 $v3) in (concat $inp0 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2, $v3 = rev($inp0 = (cons $v2 $v3)) in let $v4, $v5 = rev($v2 = (rev_fix_param (* $v4 $v5) $v4 (lambda Const(int, -1)))) in let $v6 = Const(int, -1) in let $v7 = (* $v5 $v6) in let $v8 = Const(int, 1) in let $v9 = (repeat $v7 $v8) in let $v10 = (concat $v1 $v9) in let $v11 = (concat $v10 $v3) in (concat $inp0 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = Const(int, -1) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lambda Const(int, -1)))) in let $v7 = (* $v2 $v6) in let $v8 = Const(int, 1) in let $v9 = (repeat $v7 $v8) in let $v10 = (concat $v1 $v9) in let $v11 = (concat $v10 $v4) in (concat $inp0 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = Const(int, 0) in let $v3, $v4 = rev($inp0 = (cons $v3 $v4)) in let $v5, $v6 = rev($v3 = (rev_fix_param (* $v5 $v6) $v5 (lambda Const(int, -1)))) in let $v7 = (- $v2 $v6) in let $v8 = Const(int, 1) in let $v9 = (repeat $v7 $v8) in let $v10 = (concat $v1 $v9) in let $v11 = (concat $v10 $v4) in (concat $inp0 $v11)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "repeat-k with k=5",
            "programs": [
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in (concat $v1 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in (concat $v2 $v1)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $v1 $inp0) in (concat $v1 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $v1 $v1) in (concat $inp0 $v2)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $inp0) in let $v3 = (concat $v1 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in let $v3 = (concat $inp0 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in let $v3 = (concat $inp0 $v2) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in let $v3 = (concat $v2 $inp0) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $inp0 $v1) in let $v3 = (concat $v2 $inp0) in (concat $v3 $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1 = (concat $inp0 $inp0) in let $v2 = (concat $v1 $inp0) in let $v3 = (concat $inp0 $v2) in (concat $inp0 $v3)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "repeat-many",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "replace-all-with-index-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "replace-all-with-index-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "replace-all-with-index-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "replace-all-with-index-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "replace-all-with-index-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "reverse",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "rotate-k with k=1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "rotate-k with k=2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "rotate-k with k=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "rotate-k with k=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "rotate-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=1 and n=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in (repeat $v1 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(list(int), Any[]) in (cons $v1 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = 1 in (repeat $v1 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (- $v1 $v1) in let $v4 = (range $v3) in (cons $v1 $v4)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (- $v1 $v1) in let $v4 = Const(int, -1) in let $v5 = (- $v3 $v4) in (repeat $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, -1) in let $v4 = (- $v1 $v3) in let $v5 = (- $v4 $v1) in (repeat $v1 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v3) in let $v6 = (range $v5) in (cons $v1 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v5 $v3) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v3) in let $v6 = Const(int, -1) in let $v7 = (- $v5 $v6) in (repeat $v1 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7 = Const(list(int), Any[]) in (cons $v6 $v7)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=1 and n=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 1) in let $v6 = (repeat $v3 $v5) in (cons $v1 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(list(int), Any[]) in let $v6 = (cons $v3 $v5) in (cons $v1 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in (concat $v4 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v5 $v7) in (concat $v4 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(list(int), Any[]) in let $v4 = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in (concat $v4 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(list(int), Any[]) in let $v4 = (cons $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v5 $v7) in (concat $v4 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in (cons $v1 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in (cons $v1 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v6 $v7) in (cons $v1 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v6 $v7) in (cons $v1 $v8)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=1 and n=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in let $v9 = (cons $v3 $v8) in (cons $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v3 $v10) in (cons $v6 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v6 $v10) in (cons $v1 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v3 $v10) in (cons $v6 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9 = Const(list(int), Any[]) in let $v10 = (cons $v8 $v9) in let $v11 = (cons $v3 $v10) in (cons $v1 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9 = Const(list(int), Any[]) in let $v10 = (cons $v8 $v9) in let $v11 = (cons $v3 $v10) in (cons $v1 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (- $v1 $v7) in let $v9 = Const(list(int), Any[]) in let $v10 = (cons $v8 $v9) in let $v11 = (cons $v3 $v10) in (cons $v1 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (+ $v9 $v7) in let $v11 = Const(int, 1) in let $v12 = (repeat $v5 $v11) in let $v13 = (cons $v3 $v12) in (cons $v10 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v5 $v7) in let $v10 = (+ $v9 $v7) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v10 $v11) in let $v13 = (cons $v3 $v12) in (cons $v1 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7 = (- $v1 $v5) in let $v8, $v9 = rev($v4 = (cons $v8 $v9)) in let $v10 = Const(int, 1) in let $v11 = (repeat $v8 $v10) in let $v12 = (cons $v7 $v11) in (cons $v6 $v12)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=1 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=1 and n=5",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13, $v14 = rev($v12 = (cons $v13 $v14)) in let $v15 = (- $v11 $v13) in let $v16 = (+ $v13 $v15) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (cons $v10 $v18) in let $v20 = (cons $v5 $v19) in let $v21 = (cons $v3 $v20) in (cons $v1 $v21)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v9) in let $v12 = (- $v11 $v1) in let $v13 = (+ $v7 $v12) in let $v14 = (+ $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (- $v9 $v15) in let $v18 = (+ $v15 $v17) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v18 $v19) in let $v21 = (cons $v14 $v20) in let $v22 = (cons $v5 $v21) in let $v23 = (cons $v3 $v22) in (cons $v1 $v23)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v1) in let $v10 = (- $v9 $v1) in let $v11 = (+ $v7 $v10) in let $v12 = (+ $v11 $v1) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17 = (- $v13 $v15) in let $v18 = (+ $v15 $v17) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v18 $v19) in let $v21 = (cons $v12 $v20) in let $v22 = (cons $v5 $v21) in let $v23 = (cons $v3 $v22) in (cons $v1 $v23)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (+ $v9 $v7) in let $v11 = (- $v7 $v1) in let $v12 = (+ $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17 = (- $v13 $v15) in let $v18 = (+ $v15 $v17) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v18 $v19) in let $v21 = (cons $v12 $v20) in let $v22 = (cons $v5 $v21) in let $v23 = (cons $v3 $v22) in (cons $v10 $v23)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v3 $v9) in let $v11 = (+ $v1 $v10) in let $v12 = (- $v11 $v3) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17 = (- $v13 $v15) in let $v18 = (+ $v15 $v17) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v18 $v19) in let $v21 = (cons $v12 $v20) in let $v22 = (cons $v5 $v21) in let $v23 = (cons $v3 $v22) in (cons $v1 $v23)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (+ $v1 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15, $v16 = rev($v14 = (cons $v15 $v16)) in let $v17 = (- $v13 $v15) in let $v18 = (+ $v15 $v17) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v18 $v19) in let $v21 = (cons $v12 $v20) in let $v22 = (cons $v7 $v21) in let $v23 = (cons $v3 $v22) in (cons $v6 $v23)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v3) in let $v10 = (- $v9 $v9) in let $v11 = (- $v10 $v1) in let $v12 = (+ $v7 $v11) in let $v13 = (+ $v12 $v1) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18 = (- $v14 $v16) in let $v19 = (+ $v16 $v18) in let $v20 = Const(list(int), Any[]) in let $v21 = (cons $v19 $v20) in let $v22 = (cons $v13 $v21) in let $v23 = (cons $v5 $v22) in let $v24 = (cons $v3 $v23) in (cons $v1 $v24)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (+ $v9 $v7) in let $v11 = (- $v3 $v9) in let $v12 = (+ $v1 $v11) in let $v13 = (- $v12 $v3) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16, $v17 = rev($v15 = (cons $v16 $v17)) in let $v18 = (- $v14 $v16) in let $v19 = (+ $v16 $v18) in let $v20 = Const(list(int), Any[]) in let $v21 = (cons $v19 $v20) in let $v22 = (cons $v13 $v21) in let $v23 = (cons $v5 $v22) in let $v24 = (cons $v3 $v23) in (cons $v10 $v24)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = Const(int, 0) in let $v7 = (- $v6 $v3) in let $v8 = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v11 $v1) in let $v14 = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19 = (- $v15 $v17) in let $v20 = (+ $v17 $v19) in let $v21 = Const(list(int), Any[]) in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v14 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v3 $v24) in (cons $v8 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = (+ $v1 $v1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6 = (- $v1 $v4) in let $v7 = (- $v3 $v6) in let $v8 = (- $v7 $v4) in let $v9, $v10 = rev($v5 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v11 $v1) in let $v14 = (+ $v1 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19 = (- $v15 $v17) in let $v20 = (+ $v17 $v19) in let $v21 = Const(list(int), Any[]) in let $v22 = (cons $v20 $v21) in let $v23 = (cons $v14 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v4 $v24) in (cons $v8 $v25)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=2 and n=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 1) in (repeat $v3 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(list(int), Any[]) in (cons $v3 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = 1 in (repeat $v3 $v5)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v1) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v1) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v1) in let $v7 = Const(list(int), Any[]) in (cons $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v1) in let $v7 = Const(list(int), Any[]) in (cons $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7 = Const(list(int), Any[]) in (cons $v6 $v7)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=2 and n=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in (cons $v3 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9 = Const(int, 1) in let $v10 = (repeat $v8 $v9) in (cons $v3 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v3 $v5) in let $v8 = (+ $v5 $v7) in let $v9 = Const(int, 1) in let $v10 = (repeat $v5 $v9) in (cons $v8 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, -1) in let $v8 = (- $v3 $v7) in let $v9 = (- $v8 $v3) in let $v10 = (repeat $v5 $v9) in (cons $v3 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (- $v5 $v7) in let $v9 = (- $v5 $v8) in let $v10 = (repeat $v5 $v9) in (cons $v3 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in (cons $v6 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in (cons $v6 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9 = Const(list(int), Any[]) in let $v10 = (cons $v8 $v9) in (cons $v3 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (- $v1 $v7) in let $v9 = (- $v8 $v1) in let $v10 = (+ $v1 $v9) in let $v11 = Const(int, 1) in let $v12 = (repeat $v10 $v11) in (cons $v3 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v3 $v5) in let $v8 = (+ $v5 $v7) in let $v9 = Const(int, -1) in let $v10 = (- $v3 $v9) in let $v11 = (- $v10 $v3) in let $v12 = (repeat $v5 $v11) in (cons $v8 $v12)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=2 and n=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v5 $v10) in (cons $v3 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v3 $v5) in let $v8 = (+ $v5 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in let $v13 = (cons $v5 $v12) in (cons $v8 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in let $v13 = (cons $v7 $v12) in (cons $v6 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in let $v13 = (cons $v7 $v12) in (cons $v6 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in let $v13 = (cons $v7 $v12) in (cons $v6 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (+ $v9 $v11) in let $v13 = Const(int, 1) in let $v14 = (repeat $v7 $v13) in let $v15 = (cons $v5 $v14) in (cons $v12 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v3 $v5) in let $v8 = (+ $v5 $v7) in let $v9 = Const(int, 1) in let $v10 = (repeat $v8 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13 = Const(int, 1) in let $v14 = (repeat $v11 $v13) in let $v15 = (cons $v5 $v14) in (concat $v10 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = Const(int, 1) in let $v14 = (repeat $v11 $v13) in let $v15 = (cons $v9 $v14) in (concat $v8 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7 = Const(int, 1) in let $v8 = (repeat $v6 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = Const(int, 1) in let $v14 = (repeat $v11 $v13) in let $v15 = (cons $v9 $v14) in (concat $v8 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6, $v7 = rev($v1 = (rev_fix_param (* $v6 $v7) $v6 (lambda Const(int, -1)))) in let $v8 = (- $v5 $v7) in let $v9, $v10 = rev($v4 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = Const(int, 1) in let $v14 = (repeat $v11 $v13) in let $v15 = (cons $v9 $v14) in (cons $v8 $v15)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=2 and n=4",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v1 $v9) in let $v12 = (- $v1 $v11) in let $v13 = (- $v1 $v12) in let $v14 = (- $v1 $v13) in let $v15 = Const(list(int), Any[]) in let $v16 = (cons $v14 $v15) in let $v17 = (cons $v7 $v16) in let $v18 = (cons $v5 $v17) in (cons $v3 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v1 $v11) in let $v14 = (- $v1 $v13) in let $v15 = (- $v1 $v14) in let $v16 = (- $v1 $v15) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (cons $v9 $v18) in let $v20 = (cons $v8 $v19) in (cons $v3 $v20)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v1 $v11) in let $v14 = (- $v1 $v13) in let $v15 = (- $v1 $v14) in let $v16 = (- $v1 $v15) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (cons $v9 $v18) in let $v20 = (cons $v8 $v19) in (cons $v3 $v20)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in let $v8 = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v1 $v11) in let $v14 = (- $v1 $v13) in let $v15 = (- $v1 $v14) in let $v16 = (- $v1 $v15) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v16 $v17) in let $v19 = (cons $v9 $v18) in let $v20 = (cons $v8 $v19) in (cons $v3 $v20)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=2 and n=5",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v15 $v6) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v6 $v15) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v15 $v6) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v6 $v15) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v15 $v6) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v6 $v15) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v15 $v6) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v5 $v1) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (- $v9 $v11) in let $v13 = (+ $v12 $v7) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = (+ $v6 $v15) in let $v18 = (- $v17 $v3) in let $v19, $v20 = rev($v16 = (cons $v19 $v20)) in let $v21 = Const(int, 1) in let $v22 = (repeat $v19 $v21) in let $v23 = (cons $v18 $v22) in let $v24 = (cons $v9 $v23) in let $v25 = (cons $v14 $v24) in (cons $v6 $v25)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 0) in let $v10 = (- $v9 $v1) in let $v11 = (- $v7 $v10) in let $v12 = (- $v11 $v1) in let $v13 = (- $v12 $v1) in let $v14 = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19 = (+ $v17 $v6) in let $v20 = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23 = Const(int, 1) in let $v24 = (repeat $v21 $v23) in let $v25 = (cons $v20 $v24) in let $v26 = (cons $v15 $v25) in let $v27 = (cons $v14 $v26) in (cons $v6 $v27)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (- $v1 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 0) in let $v10 = (- $v9 $v1) in let $v11 = (- $v7 $v10) in let $v12 = (- $v11 $v1) in let $v13 = (- $v12 $v1) in let $v14 = (+ $v13 $v1) in let $v15, $v16 = rev($v8 = (cons $v15 $v16)) in let $v17, $v18 = rev($v16 = (cons $v17 $v18)) in let $v19 = (+ $v6 $v17) in let $v20 = (- $v19 $v3) in let $v21, $v22 = rev($v18 = (cons $v21 $v22)) in let $v23 = Const(int, 1) in let $v24 = (repeat $v21 $v23) in let $v25 = (cons $v20 $v24) in let $v26 = (cons $v15 $v25) in let $v27 = (cons $v14 $v26) in (cons $v6 $v27)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=3 and n=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in (cons $v5 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9 = Const(int, 1) in (repeat $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v3 $v5) in let $v8 = (- $v7 $v3) in let $v9 = Const(int, 1) in (repeat $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9 = Const(int, 1) in (repeat $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (- $v1 $v7) in let $v9 = Const(int, 1) in (repeat $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v1 $v7) in let $v9 = Const(int, 1) in (repeat $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v7 $v1) in let $v9 = Const(int, 1) in (repeat $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9 = Const(list(int), Any[]) in (cons $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9 = Const(list(int), Any[]) in (cons $v8 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v7 $v1) in let $v9 = Const(list(int), Any[]) in (cons $v8 $v9)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=3 and n=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in (cons $v5 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in (cons $v8 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in (cons $v8 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v3) in let $v8 = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in (cons $v8 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in (cons $v8 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (repeat $v9 $v11) in (cons $v8 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in let $v8 = (+ $v3 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v9 $v11) in (cons $v8 $v12)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, -1) in let $v12 = (- $v8 $v11) in let $v13 = (- $v12 $v5) in let $v14 = (repeat $v9 $v13) in (cons $v8 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, -1) in let $v12 = (- $v8 $v11) in let $v13 = (- $v12 $v5) in let $v14 = (repeat $v9 $v13) in (cons $v8 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v3) in let $v8 = (- $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(int, -1) in let $v12 = (- $v8 $v11) in let $v13 = (- $v12 $v5) in let $v14 = (repeat $v9 $v13) in (cons $v8 $v14)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=3 and n=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = (- $v5 $v9) in let $v12 = (- $v8 $v11) in let $v13 = (+ $v12 $v1) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v8 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = (- $v5 $v9) in let $v12 = (- $v8 $v11) in let $v13 = (+ $v12 $v1) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v8 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = (- $v5 $v9) in let $v12 = (- $v8 $v11) in let $v13 = (+ $v12 $v1) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v8 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in let $v8 = (+ $v7 $v3) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = (- $v5 $v9) in let $v12 = (- $v8 $v11) in let $v13 = (+ $v12 $v1) in let $v14 = (- $v13 $v1) in let $v15, $v16 = rev($v10 = (cons $v15 $v16)) in let $v17 = Const(list(int), Any[]) in let $v18 = (cons $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v8 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v1 $v5) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = (- $v7 $v9) in let $v12 = (- $v1 $v11) in let $v13 = (- $v1 $v12) in let $v14 = (- $v13 $v8) in let $v15 = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18 = Const(list(int), Any[]) in let $v19 = (cons $v16 $v18) in let $v20 = (cons $v15 $v19) in (cons $v8 $v20)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (+ $v5 $v1) in let $v8 = (- $v7 $v1) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = (- $v7 $v9) in let $v12 = (- $v1 $v11) in let $v13 = (- $v1 $v12) in let $v14 = (- $v13 $v8) in let $v15 = (- $v1 $v14) in let $v16, $v17 = rev($v10 = (cons $v16 $v17)) in let $v18 = Const(list(int), Any[]) in let $v19 = (cons $v16 $v18) in let $v20 = (cons $v15 $v19) in (cons $v8 $v20)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 0) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6, $v7 = rev($v5 = (cons $v6 $v7)) in let $v8 = (- $v3 $v6) in let $v9 = (+ $v1 $v8) in let $v10 = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13 = (- $v6 $v11) in let $v14 = (- $v10 $v13) in let $v15 = (+ $v14 $v1) in let $v16 = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v17 $v19) in let $v21 = (cons $v16 $v20) in (cons $v10 $v21)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v7 $v1) in let $v9 = (+ $v1 $v5) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12 = (- $v9 $v10) in let $v13 = (- $v1 $v12) in let $v14 = (- $v1 $v13) in let $v15 = (- $v14 $v8) in let $v16 = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v17 $v19) in let $v21 = (cons $v16 $v20) in (cons $v8 $v21)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v7 $v1) in let $v9 = (+ $v5 $v1) in let $v10, $v11 = rev($v6 = (cons $v10 $v11)) in let $v12 = (- $v9 $v10) in let $v13 = (- $v1 $v12) in let $v14 = (- $v1 $v13) in let $v15 = (- $v14 $v8) in let $v16 = (- $v1 $v15) in let $v17, $v18 = rev($v11 = (cons $v17 $v18)) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v17 $v19) in let $v21 = (cons $v16 $v20) in (cons $v8 $v21)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v3) in let $v6, $v7 = rev($v4 = (cons $v6 $v7)) in let $v8 = (- $v5 $v6) in let $v9 = (+ $v1 $v8) in let $v10 = (- $v1 $v9) in let $v11, $v12 = rev($v7 = (cons $v11 $v12)) in let $v13 = (- $v6 $v11) in let $v14 = (- $v10 $v13) in let $v15 = (+ $v14 $v1) in let $v16 = (- $v15 $v1) in let $v17, $v18 = rev($v12 = (cons $v17 $v18)) in let $v19 = Const(list(int), Any[]) in let $v20 = (cons $v17 $v19) in let $v21 = (cons $v16 $v20) in (cons $v10 $v21)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=3 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=3 and n=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=4 and n=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in (repeat $v7 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = Const(list(int), Any[]) in (cons $v7 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = 1 in (repeat $v7 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v1) in let $v10 = (range $v9) in (cons $v7 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v3 $v3) in let $v10 = (range $v9) in (cons $v7 $v10)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11 = Const(int, 1) in (repeat $v10 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v3 $v7) in let $v10 = (- $v3 $v9) in let $v11 = Const(int, 1) in (repeat $v10 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v1 $v9) in let $v11 = Const(int, 1) in (repeat $v10 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11 = Const(list(int), Any[]) in (cons $v10 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v1 $v9) in let $v11 = Const(list(int), Any[]) in (cons $v10 $v11)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=4 and n=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13 = Const(int, 1) in let $v14 = (repeat $v12 $v13) in (cons $v7 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v9 $v1) in let $v12 = (- $v11 $v1) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v12 $v13) in (cons $v7 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v12 $v13) in (cons $v7 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (+ $v11 $v1) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v12 $v13) in (cons $v7 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13 = 1 in let $v14 = (repeat $v12 $v13) in (cons $v7 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13 = (- $v3 $v3) in let $v14 = (range $v13) in let $v15 = (cons $v12 $v14) in (cons $v7 $v15)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v3 $v11) in let $v14 = (- $v3 $v13) in let $v15 = Const(int, 1) in let $v16 = (repeat $v14 $v15) in (cons $v10 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v3 $v11) in let $v14 = (- $v3 $v13) in let $v15 = Const(int, 1) in let $v16 = (repeat $v14 $v15) in (cons $v10 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v3 $v7) in let $v10 = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (+ $v11 $v1) in let $v14 = (- $v13 $v1) in let $v15 = Const(list(int), Any[]) in let $v16 = (cons $v14 $v15) in (cons $v10 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v3 $v7) in let $v10 = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v1) in let $v14 = (+ $v13 $v1) in let $v15 = Const(list(int), Any[]) in let $v16 = (cons $v14 $v15) in (cons $v10 $v16)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=4 and n=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v7) in let $v12 = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = Const(int, 1) in let $v16 = (repeat $v13 $v15) in let $v17 = (cons $v12 $v16) in (cons $v7 $v17)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v7) in let $v12 = (+ $v7 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = Const(int, 1) in let $v16 = (- $v3 $v15) in let $v17 = (- $v3 $v16) in let $v18 = (repeat $v13 $v17) in let $v19 = (cons $v12 $v18) in (cons $v7 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v3 $v7) in let $v10 = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v7) in let $v14 = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = Const(int, 1) in let $v18 = (repeat $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v10 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v7 $v3) in let $v10 = (- $v9 $v3) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v7) in let $v14 = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = Const(int, 1) in let $v18 = (repeat $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v10 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v3 $v7) in let $v10 = (- $v3 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v7) in let $v14 = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = Const(int, 1) in let $v18 = (repeat $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v10 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v5 $v7) in let $v10 = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v10) in let $v14 = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = Const(int, 1) in let $v18 = (repeat $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v10 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v5 $v7) in let $v10 = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v7) in let $v14 = (+ $v10 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = Const(int, 1) in let $v18 = (repeat $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v10 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v5 $v7) in let $v10 = (- $v5 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v7) in let $v14 = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = Const(int, 1) in let $v18 = (repeat $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v10 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (- $v7 $v1) in let $v10 = (+ $v9 $v1) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = (- $v11 $v7) in let $v14 = (+ $v7 $v13) in let $v15, $v16 = rev($v12 = (cons $v15 $v16)) in let $v17 = Const(int, 1) in let $v18 = (repeat $v15 $v17) in let $v19 = (cons $v14 $v18) in (cons $v10 $v19)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9 = (+ $v7 $v3) in let $v10 = (- $v3 $v9) in let $v11, $v12 = rev($v3 = (rev_fix_param (* $v11 $v12) $v11 (lambda Const(int, -1)))) in let $v13 = (* $v10 $v11) in let $v14, $v15 = rev($v8 = (cons $v14 $v15)) in let $v16 = (- $v14 $v7) in let $v17 = (+ $v7 $v16) in let $v18, $v19 = rev($v15 = (cons $v18 $v19)) in let $v20 = Const(int, 1) in let $v21 = (repeat $v18 $v20) in let $v22 = (cons $v17 $v21) in (cons $v13 $v22)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=4 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=4 and n=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=5 and n=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in (repeat $v9 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v1 $v9) in let $v12 = (- $v1 $v11) in let $v13 = Const(int, 1) in (repeat $v12 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (+ $v11 $v1) in let $v13 = Const(int, 1) in (repeat $v12 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v3) in let $v12 = (+ $v3 $v11) in let $v13 = Const(int, 1) in (repeat $v12 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 1) in let $v12 = (+ $v3 $v11) in let $v13 = (- $v12 $v3) in (repeat $v9 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v1 $v9) in let $v12 = (- $v1 $v11) in let $v13 = Const(list(int), Any[]) in (cons $v12 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v9 $v1) in let $v12 = (+ $v11 $v1) in let $v13 = Const(list(int), Any[]) in (cons $v12 $v13)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = Const(int, 2) in let $v12, $v13 = rev($v1 = (rev_fix_param (* $v12 $v13) $v13 (lambda Const(int, -1)))) in let $v14 = (+ $v11 $v13) in (repeat $v9 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v11 (lambda Const(int, -1)))) in let $v13 = (- $v3 $v11) in let $v14 = (- $v13 $v3) in (repeat $v9 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v1 = (rev_fix_param (* $v11 $v12) $v12 (lambda Const(int, -1)))) in let $v13 = (- $v1 $v12) in let $v14 = (- $v13 $v1) in (repeat $v9 $v14)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=5 and n=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = Const(int, 1) in let $v14 = (repeat $v11 $v13) in (cons $v9 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11, $v12 = rev($v10 = (cons $v11 $v12)) in let $v13 = (- $v7 $v11) in let $v14 = (- $v7 $v13) in let $v15 = Const(int, 1) in let $v16 = (repeat $v14 $v15) in (cons $v9 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v1 $v9) in let $v12 = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = Const(int, 1) in let $v16 = (repeat $v13 $v15) in (cons $v12 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v7 $v9) in let $v12 = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = Const(int, 1) in let $v16 = (repeat $v13 $v15) in (cons $v12 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v9 $v1) in let $v12 = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = Const(int, 1) in let $v16 = (repeat $v13 $v15) in (cons $v12 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = Const(int, 1) in let $v16 = (repeat $v13 $v15) in (cons $v12 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v1 $v9) in let $v12 = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (- $v7 $v13) in let $v16 = (- $v7 $v15) in let $v17 = Const(int, 1) in let $v18 = (repeat $v16 $v17) in (cons $v12 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v7 $v9) in let $v12 = (- $v11 $v7) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (- $v7 $v13) in let $v16 = (- $v7 $v15) in let $v17 = Const(int, 1) in let $v18 = (repeat $v16 $v17) in (cons $v12 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (+ $v9 $v1) in let $v12 = (- $v11 $v1) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (- $v7 $v13) in let $v16 = (- $v7 $v15) in let $v17 = Const(int, 1) in let $v18 = (repeat $v16 $v17) in (cons $v12 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7, $v8 = rev($v6 = (cons $v7 $v8)) in let $v9, $v10 = rev($v8 = (cons $v9 $v10)) in let $v11 = (- $v3 $v9) in let $v12 = (- $v3 $v11) in let $v13, $v14 = rev($v10 = (cons $v13 $v14)) in let $v15 = (- $v7 $v13) in let $v16 = (- $v7 $v15) in let $v17 = Const(int, 1) in let $v18 = (repeat $v16 $v17) in (cons $v12 $v18)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=5 and n=3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=5 and n=4",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "slice-k-n with k=5 and n=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "sort",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "sum",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "tail",
            "programs": [
                {
                    "program": "(cdr $inp0)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in $v2",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lambda 1))) in (cdr (concat (repeat $v1 $v3) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (+ $v3 $v4) $v3 (lambda 1))) in (cdr (concat (repeat $v3 $v3) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat $inp0 (repeat $v3 $v3)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v1 $v2)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in (cdr (concat (repeat $v3 $v3) (cons $v3 $v2)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v4 (lambda (+ $0 $0)))) in let $v5, $v6 = rev($v1 = (rev_fix_param (+ $v5 $v6) $v5 (lambda 1))) in (cdr (concat (repeat $v4 $v5) $v2))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v5 (lambda 1))) in (cdr (concat (repeat $v3 $v3) (cons $v6 $v2)))",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v1 = (rev_fix_param (- $v3 $v4) $v3 (lambda (- $0 $0)))) in let $v5, $v6 = rev($v1 = (rev_fix_param (- $v5 $v6) $v6 (lambda 1))) in (cdr (concat (repeat $v3 $v3) (cons $v5 $v2)))",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "take-k with k=1",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in (repeat $v1 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(list(int), Any[]) in (cons $v1 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = 1 in (repeat $v1 $v3)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v3) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7 = Const(int, 1) in (repeat $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4, $v5 = rev($v2 = (cons $v4 $v5)) in let $v6 = (- $v3 $v4) in let $v7 = (+ $v6 $v4) in (repeat $v1 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7 = Const(list(int), Any[]) in (cons $v6 $v7)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v3) in let $v7 = Const(list(int), Any[]) in (cons $v6 $v7)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "take-k with k=2",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, 1) in let $v6 = (repeat $v3 $v5) in (cons $v1 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(list(int), Any[]) in let $v6 = (cons $v3 $v5) in (cons $v1 $v6)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in (concat $v4 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v5 $v7) in (concat $v4 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7 = Const(int, 1) in let $v8 = (repeat $v3 $v7) in (cons $v6 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = Const(int, -1) in let $v6 = (- $v1 $v5) in let $v7 = (- $v6 $v1) in let $v8 = (repeat $v3 $v7) in (cons $v1 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (+ $v1 $v5) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v6 $v7) in (cons $v1 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7 = Const(list(int), Any[]) in let $v8 = (cons $v3 $v7) in (cons $v6 $v8)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v1 = (rev_fix_param (* $v5 $v6) $v5 (lambda Const(int, -1)))) in let $v7 = Const(int, 2) in let $v8 = (+ $v5 $v7) in let $v9 = (repeat $v3 $v8) in (cons $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3 = Const(int, 1) in let $v4 = (repeat $v1 $v3) in let $v5, $v6 = rev($v2 = (cons $v5 $v6)) in let $v7 = Const(int, -1) in let $v8 = (- $v1 $v7) in let $v9 = (- $v8 $v1) in let $v10 = (repeat $v5 $v9) in (concat $v4 $v10)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "take-k with k=3",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = Const(int, 1) in let $v8 = (repeat $v5 $v7) in let $v9 = (cons $v3 $v8) in (cons $v1 $v9)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (+ $v5 $v7) in let $v9 = Const(int, 1) in let $v10 = (repeat $v5 $v9) in let $v11 = (cons $v3 $v10) in (cons $v8 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (+ $v7 $v5) in let $v9 = Const(int, 1) in let $v10 = (repeat $v5 $v9) in let $v11 = (cons $v3 $v10) in (cons $v8 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (- $v5 $v7) in let $v9 = Const(int, 1) in let $v10 = (repeat $v5 $v9) in let $v11 = (cons $v3 $v10) in (cons $v8 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v3 $v10) in (cons $v6 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v3 $v10) in (cons $v6 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v3 $v10) in (cons $v6 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v3 $v10) in (cons $v6 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v3 $v1) in let $v6 = (- $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = Const(int, 1) in let $v10 = (repeat $v7 $v9) in let $v11 = (cons $v3 $v10) in (cons $v6 $v11)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v1) in let $v8 = (+ $v1 $v7) in let $v9 = Const(list(int), Any[]) in let $v10 = (cons $v8 $v9) in let $v11 = (cons $v3 $v10) in (cons $v1 $v11)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "take-k with k=4",
            "programs": [
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v1 $v5) in let $v8 = (- $v1 $v7) in let $v9, $v10 = rev($v6 = (cons $v9 $v10)) in let $v11 = Const(list(int), Any[]) in let $v12 = (cons $v9 $v11) in let $v13 = (cons $v8 $v12) in let $v14 = (cons $v3 $v13) in (cons $v1 $v14)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in let $v8 = (- $v5 $v7) in let $v9 = (- $v1 $v5) in let $v10 = (- $v1 $v9) in let $v11, $v12 = rev($v6 = (cons $v11 $v12)) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v11 $v13) in let $v15 = (cons $v10 $v14) in let $v16 = (cons $v8 $v15) in (cons $v1 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v11 $v13) in let $v15 = (cons $v10 $v14) in let $v16 = (cons $v3 $v15) in (cons $v6 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v3 $v1) in let $v6 = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v11 $v13) in let $v15 = (cons $v10 $v14) in let $v16 = (cons $v3 $v15) in (cons $v6 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v11 $v13) in let $v15 = (cons $v10 $v14) in let $v16 = (cons $v3 $v15) in (cons $v6 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v1 $v7) in let $v10 = (- $v1 $v9) in let $v11, $v12 = rev($v8 = (cons $v11 $v12)) in let $v13 = Const(list(int), Any[]) in let $v14 = (cons $v11 $v13) in let $v15 = (cons $v10 $v14) in let $v16 = (cons $v3 $v15) in (cons $v6 $v16)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5, $v6 = rev($v4 = (cons $v5 $v6)) in let $v7 = (- $v5 $v3) in let $v8 = (- $v5 $v7) in let $v9 = (- $v8 $v1) in let $v10 = (- $v3 $v9) in let $v11 = (- $v1 $v5) in let $v12 = (- $v1 $v11) in let $v13, $v14 = rev($v6 = (cons $v13 $v14)) in let $v15 = Const(list(int), Any[]) in let $v16 = (cons $v13 $v15) in let $v17 = (cons $v12 $v16) in let $v18 = (cons $v8 $v17) in (cons $v10 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (+ $v1 $v3) in let $v6 = (- $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (- $v7 $v9) in let $v11 = (- $v1 $v7) in let $v12 = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15 = Const(list(int), Any[]) in let $v16 = (cons $v13 $v15) in let $v17 = (cons $v12 $v16) in let $v18 = (cons $v10 $v17) in (cons $v6 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v3 $v5) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (- $v7 $v9) in let $v11 = (- $v1 $v7) in let $v12 = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15 = Const(list(int), Any[]) in let $v16 = (cons $v13 $v15) in let $v17 = (cons $v12 $v16) in let $v18 = (cons $v10 $v17) in (cons $v6 $v18)",
                    "logLikelihood": 0.0
                },
                {
                    "program": "let $v1, $v2 = rev($inp0 = (cons $v1 $v2)) in let $v3, $v4 = rev($v2 = (cons $v3 $v4)) in let $v5 = (- $v1 $v3) in let $v6 = (+ $v5 $v3) in let $v7, $v8 = rev($v4 = (cons $v7 $v8)) in let $v9 = (- $v7 $v3) in let $v10 = (- $v7 $v9) in let $v11 = (- $v1 $v7) in let $v12 = (- $v1 $v11) in let $v13, $v14 = rev($v8 = (cons $v13 $v14)) in let $v15 = Const(list(int), Any[]) in let $v16 = (cons $v13 $v15) in let $v17 = (cons $v12 $v16) in let $v18 = (cons $v10 $v17) in (cons $v6 $v18)",
                    "logLikelihood": 0.0
                }
            ]
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "take-k with k=5",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "sort-and-deduplicate",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "int",
                    "arguments": []
                }
            },
            "task": "+1 maximum list",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "range +1 maximum list",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "list",
                                "arguments": [
                                    {
                                        "constructor": "bool",
                                        "arguments": []
                                    }
                                ]
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "list",
                            "arguments": [
                                {
                                    "constructor": "bool",
                                    "arguments": []
                                }
                            ]
                        }
                    ]
                }
            },
            "task": "remove empty lists",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep squares",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep primes",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep eq 0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove eq 0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep gt 0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove gt 0",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep eq 1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove eq 1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep gt 1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove gt 1",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep eq 2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove eq 2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep gt 2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove gt 2",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep eq 3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove eq 3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "keep gt 3",
            "programs": []
        },
        {
            "request": {
                "constructor": "->",
                "arguments": {
                    "inp0": {
                        "constructor": "list",
                        "arguments": [
                            {
                                "constructor": "int",
                                "arguments": []
                            }
                        ]
                    }
                },
                "output": {
                    "constructor": "list",
                    "arguments": [
                        {
                            "constructor": "int",
                            "arguments": []
                        }
                    ]
                }
            },
            "task": "remove gt 3",
            "programs": []
        }
    ],
    "topK": 2,
    "pseudoCounts": 30.0,
    "aic": 1.0,
    "structurePenalty": 1.0,
    "topk_use_only_likelihood": false,
    "CPUs": 8,
    "iteration": 0
}
